{"version":3,"file":"static/js/1981.4eeb977e.chunk.js","mappings":"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","sources":["components/forms/downloadForm/MultiFileDownloadForm.js","components/forms/inputForm/ModalQuillEditor.js","components/Modal/officialMall/InquiryDetailModal.js","pages/officialMall/inquiry/InquiryList.js"],"sourcesContent":["import {CCol, CFormLabel} from '@coreui/react'\nimport {map} from 'lodash'\nimport styled from 'styled-components'\nimport {antdImageFormat} from '../../../utils/awsCustom'\n\nconst MultiFileDownloadForm = ({id, placeholder, files, label, isRequired}) => {\n  const downloadFile = (url, fileName) => {\n    url = antdImageFormat(url)\n\n    fetch(url, {method: 'GET'})\n      .then(res => {\n        return res.blob()\n      })\n      .then(blob => {\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = fileName\n        document.body.appendChild(a)\n        a.click()\n        setTimeout(_ => {\n          window.URL.revokeObjectURL(url)\n        }, 60000)\n        a.remove()\n      })\n      .catch(err => {\n        console.error('err: ', err)\n      })\n  }\n\n  //onClick={() => downloadFile(file, fileName)}\n\n  return (\n    <>\n      <CFormLabel htmlFor={`${id}Static`} className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol>\n        {files?.length > 0 ? (\n          files.map((file, index) => {\n            const splitUrl = file.split('/') //   \"/\" 로 전체 url 을 나눈다\n            const splitUrlLength = splitUrl.length\n            const fileName = splitUrl[splitUrlLength - 1] // 나누어진 배열의 맨 끝이 파일명이다\n            return (\n              <div key={index} className='col-form-label'>\n                <SpanStyle\n                  role='link'\n                  key={index}\n                  href={antdImageFormat(file)}\n                  onClick={() => downloadFile(file, fileName)}\n                >\n                  {index + 1}. {fileName}\n                </SpanStyle>\n              </div>\n            )\n          })\n        ) : (\n          <div className='col-form-label'>등록된 파일이 없습니다.</div>\n        )}\n      </CCol>\n    </>\n  )\n}\nexport default MultiFileDownloadForm\n\nconst SpanStyle = styled.span`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding: 0 8px;\n  line-height: 1.5714285714285714;\n  flex: auto;\n  transition: all 0.3s;\n  color: #1677ff !important;\n  text-decoration: none;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n`\n","import React, {useMemo, useRef} from 'react'\nimport ReactQuill from 'react-quill'\nimport 'react-quill/dist/quill.snow.css'\nimport {CCol, CFormLabel} from '@coreui/react'\nimport styled from 'styled-components'\n\nconst ModalQuillEditor = ({\n  id, // Tag ID\n  value, // useState\n  label, // Title\n  isRequired, // isRequired\n  readOnly = false,\n  setValue, // onChange function\n}) => {\n  const QuillRef = useRef()\n\n  // 이미지를 업로드 하기 위한 함수\n  const imageHandler = () => {\n    // 파일을 업로드 하기 위한 input 태그 생성\n    const input = document.createElement('input')\n    const formData = new FormData()\n    let url = ''\n\n    input.setAttribute('type', 'file')\n    input.setAttribute('accept', 'image/*')\n    input.click()\n\n    // 파일이 input 태그에 담기면 실행 될 함수\n    input.onchange = async () => {\n      const file = input.files\n      console.log(file)\n      if (file !== null) {\n        formData.append('image', file[0])\n        try {\n          const res = (url = res.data.url)\n          // 커서의 위치를 알고 해당 위치에 이미지 태그를 넣어주는 코드\n          // 해당 DOM의 데이터가 필요하기에 useRef를 사용.\n          const range = QuillRef.current?.getEditor().getSelection()?.index\n          if (range !== null && range !== undefined) {\n            let quill = QuillRef.current?.getEditor()\n\n            quill?.setSelection(range, 1)\n\n            quill?.clipboard.dangerouslyPasteHTML(range, `<img src=${url} alt=\"이미지 태그가 삽입됩니다.\" />`)\n          }\n\n          return {...res, success: true}\n        } catch (error) {\n          return {...error.response, success: false}\n        }\n      }\n    }\n  }\n\n  const modules = useMemo(() => {\n    return {\n      toolbar: {\n        container: [\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n          [{size: ['small', false, 'large', 'huge']}, {color: []}],\n          [{list: 'ordered'}, {list: 'bullet'}, {indent: '-1'}, {indent: '+1'}, {align: []}],\n          ['image', 'video'],\n        ],\n        handlers: {\n          image: imageHandler,\n        },\n      },\n    }\n  }, [])\n\n  return (\n    <CCol style={{height: '300px'}} className={'pb-5'}>\n      <CFormLabel htmlFor={`${id}Static`} className='col-sm-2 col-form-label'>\n        <span className={isRequired && 'required'}>{label || ' * '}</span>\n      </CFormLabel>\n      <EditorStyle\n        id={id || ''}\n        ref={element => {\n          if (element !== null) {\n            QuillRef.current = element\n          }\n        }}\n        value={value}\n        onChange={setValue}\n        modules={modules}\n        readOnly={readOnly}\n        theme='snow'\n        placeholder='내용을 입력해주세요.'\n        style={{height: '100%'}}\n      />\n    </CCol>\n  )\n}\n\nexport default ModalQuillEditor\n\nconst EditorStyle = styled(ReactQuill)`\n  background-color: ${({readOnly}) => (readOnly ? '#d8dbe0' : 'transparent')};\n\n  .ql-toolbar {\n    display: ${({readOnly}) => (readOnly ? 'none' : 'block')};\n  }\n`\n","import {\n  CButton,\n  CForm,\n  CFormTextarea,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\nimport ModalInput from '../../forms/inputForm/ModalInput'\nimport MultiFileDownloadForm from '../../forms/downloadForm/MultiFileDownloadForm'\nimport ModalQuillEditor from '../../forms/inputForm/ModalQuillEditor'\n\nconst InquiryDetailModal = ({\n  onCreate,\n  onChange,\n  onDelete,\n  inquiryReplyContent,\n  setInquiryReplyContent,\n  value,\n  isReadOnly,\n  setIsReadOnly,\n  isUpdate,\n  setIsUpdate,\n  visible,\n  setVisible,\n}) => {\n  // modal title 세팅\n  let modalTitle = '1:1 문의 상세 내용'\n  if (isUpdate) modalTitle = '1:1 문의 답변 수정'\n  if (isReadOnly) modalTitle = '1:1 문의 상세 내용'\n\n  // 함수 선언\n\n  const clickUpdateBtn = () => {\n    setIsReadOnly(false)\n    setIsUpdate(true)\n  }\n\n  return (\n    <CModal size='lg' visible={visible} onClose={() => setVisible(false)}>\n      <CModalHeader>\n        <CModalTitle>{modalTitle}</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CRow className={'p-2'}>\n          <ModalInput id={'id'} placeholder={'inquiryId'} label={'No'} value={value.inquiryId} readOnly disabled />\n          <ModalInput id={'name'} placeholder={'이름'} label={'이름'} value={value.name} readOnly disabled />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput id={'email'} placeholder={'이메일'} label={'이메일'} value={value.email} readOnly disabled />\n          <ModalInput\n            id={'phoneNumber'}\n            placeholder={'휴대전화번호'}\n            label={'휴대전화번호'}\n            value={value.phoneNumber}\n            onChange={onChange}\n            readOnly\n            disabled\n          />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput\n            id={'category'}\n            placeholder={'문의 유형'}\n            label={'문의 유형'}\n            value={value.category}\n            readOnly\n            disabled\n          />\n        </CRow>\n        <CRow className={'p-2'}>\n          <MultiFileDownloadForm\n            id={'files'}\n            placeholder={'첨부파일'}\n            label={'첨부파일'}\n            files={value.files || ''}\n            readOnly\n            disabled\n          />\n        </CRow>\n        <CRow className={'p-2'}>\n          <CFormTextarea id='content' label='문의내용' value={value.content} readOnly disabled rows={9} />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalQuillEditor\n            id='inquiryReplyContent'\n            value={inquiryReplyContent || ''}\n            isRequired={true}\n            readOnly={isReadOnly}\n            setValue={setInquiryReplyContent}\n            label='답변'\n          />\n        </CRow>\n        <br />\n      </CModalBody>\n      <CModalFooter>\n        {isReadOnly ? (\n          <CButton color='success' onClick={clickUpdateBtn}>\n            수정\n          </CButton>\n        ) : (\n          <CButton onClick={() => onCreate(value)} color='primary'>\n            저장\n          </CButton>\n        )}\n        <CButton color='danger' onClick={() => onDelete(value)}>\n          삭제\n        </CButton>\n        <CButton color='secondary' onClick={() => setVisible(false)}>\n          취소\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default InquiryDetailModal\n","import React, {useEffect, useState} from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport {CCard, CCardBody, CCardHeader, CCol, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport InquiryDetailModal from '../../../components/Modal/officialMall/InquiryDetailModal'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {inquiryListColumns} from '../../../utils/columns/officialMall/Columns'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport {isEmpty} from '../../../utils/utility'\n\nconst InquiryList = () => {\n  // 모듈 선언\n  const navigate = useNavigate()\n\n  // Local state 선언\n  const [inquiryList, setInquiryList] = useState([])\n  const [selectedItem, setSelectedItem] = useState({\n    inquiryId: 0,\n    name: '',\n    email: '',\n    category: '',\n    phoneNumber: '',\n    content: '',\n    file: [],\n    inquiryReplyId: null,\n    inquiryReplyContent: '',\n  })\n  const [inquiryReplyContent, setInquiryReplyContent] = useState('')\n  const [showModal, setShowModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(false)\n  const [isUpdate, setIsUpdate] = useState(false)\n\n  // API 통신 함수\n  // 1:1 문의 리스트 조회\n  const onLoadMallInquiryList = async () => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.GET,\n        url: EndPoint.GET_MALL_INQUIRIES,\n      })\n\n      if (!res?.isSuccess || isEmpty(res?.result)) {\n        console.log('onLoadMallInquiryList error')\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n      setInquiryList(res.result.inquiryInfos)\n    } catch (error) {\n      console.log(error)\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 1:1 문의 상세정보 조회\n  const onloadMallInquiry = async inquiryId => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {inquiryId},\n        method: HttpMethod.GET,\n        url: EndPoint.GET_MALL_INQUIRY,\n      })\n      if (!res?.isSuccess || isEmpty(res?.result)) {\n        console.log('onloadMallInquiry error')\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n      await setSelectedItem(res.result)\n      await setInquiryReplyContent(res.result.inquiryReplyContent)\n      if (res.result.inquiryReplyId) {\n        setIsReadOnly(true)\n      } else {\n        setIsReadOnly(false)\n      }\n    } catch (error) {\n      console.log(error)\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 1:1 문의 답변 추가\n  const onCreateMallInquiryAnswer = async (inquiryId, inquiryReplyContent) => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.POST,\n        url: EndPoint.POST_MALL_INQUIRY_REPLY,\n        data: {\n          inquiryId: inquiryId,\n          inquiryReplyContent: inquiryReplyContent,\n        },\n      })\n      if (!res?.isSuccess) {\n        if (res?.code === 2014) {\n          navigate('/login')\n        }\n      }\n      alert(res?.message)\n      await onloadMallInquiry(inquiryId)\n    } catch (error) {\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 1:1 문의 답변 수정\n  const onUpdateInquiryAnswer = async (inquiryReplyId, inquiryReplyContent) => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.PATCH,\n        url: EndPoint.PATCH_MALL_UPDATE_INQUIRY_REPLY,\n        data: {\n          inquiryReplyId: inquiryReplyId,\n          inquiryReplyContent: inquiryReplyContent,\n        },\n      })\n\n      if (!res?.isSuccess) {\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n      alert(res?.message)\n    } catch (error) {\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 1:1 문의 삭제\n  const onDeleteInquiry = async inquiry => {\n    if (window.confirm('정말 삭제하시겠습니까?')) {\n      const {inquiryId} = inquiry\n      try {\n        const {data: res} = await ApiConfig.request({\n          method: HttpMethod.PATCH,\n          url: EndPoint.PATCH_MALL_DELETE_INQUIRY,\n          path: {inquiryId},\n        })\n\n        if (!res?.isSuccess) {\n          if (res?.code === 2014) {\n            navigate('/login')\n          } else {\n            alert(res?.message)\n          }\n        }\n        alert(res?.message)\n        setShowModal(!showModal)\n        await onLoadMallInquiryList()\n      } catch (error) {\n        alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n      }\n    }\n  }\n\n  // Life Cycle 선언\n  useEffect(() => {\n    onLoadMallInquiryList()\n  }, [])\n\n  // 함수 선언\n\n  // Open Modal\n  const handleShowInquiryDetailModal = async item => {\n    await onloadMallInquiry(item.inquiryId)\n    await setShowModal(!showModal)\n  }\n\n  // data onChange\n  const handleInquiryModalOnChange = e => {\n    const {id, value} = e.target\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n\n  // 답변 저장\n  const handleInquiryModalCreate = async () => {\n    const {inquiryId, inquiryReplyId} = selectedItem\n\n    // validation\n    if (!inquiryId) return alert('번호를 찾을 수 없습니다.')\n    if (!inquiryReplyId) return alert('번호를 찾을 수 없습니다.')\n    if (!inquiryReplyContent) return alert('답변을 입력해주세요.')\n    if (inquiryReplyContent.length > 300) return alert('답변 글자 수를 초과했습니다.')\n\n    if (window.confirm('저장 하시겠습니까?')) {\n      if (inquiryReplyId) {\n        // 수정\n        await onUpdateInquiryAnswer(inquiryReplyId, inquiryReplyContent)\n      } else {\n        // 생성\n        await onCreateMallInquiryAnswer(inquiryId, inquiryReplyContent)\n      }\n\n      await onLoadMallInquiryList()\n      setIsReadOnly(true)\n      setIsUpdate(false)\n    }\n  }\n  return (\n    <CRow>\n      <PageHeader title='1 : 1 문의 관리' />\n      <CCol xs={12}>\n        <CCard className='mb-4'>\n          <CCardBody>\n            <ListTemplate\n              items={inquiryList}\n              onClick={handleShowInquiryDetailModal}\n              columns={inquiryListColumns}\n              className={'userList'}\n              datePickerHidden={false}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <InquiryDetailModal\n        visible={showModal}\n        setVisible={setShowModal}\n        value={selectedItem}\n        onCreate={handleInquiryModalCreate}\n        onChange={handleInquiryModalOnChange}\n        onDelete={onDeleteInquiry}\n        inquiryReplyContent={inquiryReplyContent}\n        setInquiryReplyContent={setInquiryReplyContent}\n        isReadOnly={isReadOnly}\n        setIsReadOnly={setIsReadOnly}\n        isUpdate={isUpdate}\n        setIsUpdate={setIsUpdate}\n      />\n    </CRow>\n  )\n}\n\nexport default InquiryList\n"],"names":["id","files","placeholder","label","isRequired","htmlFor","className","length","map","file","index","splitUrl","split","fileName","SpanStyle","role","href","antdImageFormat","onClick","url","fetch","method","then","res","blob","window","URL","createObjectURL","a","document","createElement","download","body","appendChild","click","setTimeout","_","revokeObjectURL","remove","catch","err","console","error","downloadFile","styled","value","readOnly","setValue","QuillRef","useRef","imageHandler","input","formData","FormData","setAttribute","onchange","log","append","data","range","current","getEditor","getSelection","undefined","quill","setSelection","clipboard","dangerouslyPasteHTML","success","response","modules","useMemo","toolbar","container","size","color","list","indent","align","handlers","image","style","height","EditorStyle","ref","element","onChange","theme","ReactQuill","onCreate","onDelete","inquiryReplyContent","setInquiryReplyContent","isReadOnly","setIsReadOnly","isUpdate","setIsUpdate","visible","setVisible","modalTitle","onClose","ModalInput","inquiryId","disabled","name","email","phoneNumber","category","MultiFileDownloadForm","content","rows","ModalQuillEditor","navigate","useNavigate","useState","inquiryList","setInquiryList","inquiryReplyId","selectedItem","setSelectedItem","showModal","setShowModal","onLoadMallInquiryList","ApiConfig","HttpMethod","EndPoint","isSuccess","isEmpty","result","code","alert","message","inquiryInfos","onloadMallInquiry","query","path","onCreateMallInquiryAnswer","onUpdateInquiryAnswer","onDeleteInquiry","inquiry","confirm","useEffect","handleShowInquiryDetailModal","item","handleInquiryModalCreate","PageHeader","title","xs","ListTemplate","items","columns","inquiryListColumns","datePickerHidden","e","target"],"sourceRoot":""}