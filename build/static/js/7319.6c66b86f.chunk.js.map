{"version":3,"file":"static/js/7319.6c66b86f.chunk.js","mappings":"6RAAaA,EAAgB,CAC3B,CACEC,IAAK,eACLC,MAAO,GACPC,OAAQ,CAACC,MAAO,UAAWC,UAAW,iBAExC,CACEJ,IAAK,SACLC,MAAO,KACPC,OAAQ,CAACC,MAAO,UAAWC,UAAW,WAExC,CACEJ,IAAK,UACLC,MAAO,qBACPC,OAAQ,CAACC,MAAO,UAAWC,UAAW,YAExC,CACEJ,IAAK,YACLC,MAAO,kCACPC,OAAQ,CAACC,MAAO,UAAWC,UAAW,cAExC,CACEJ,IAAK,sBACLC,MAAO,eACPC,OAAQ,CAACC,MAAO,UAAWC,UAAW,yB,iCCgG1C,EAhHyB,WACvB,OAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAkCF,EAAAA,EAAAA,WAAS,GAAM,eAA1CG,EAAS,KAAEC,EAAY,KAC9B,GAAoCJ,EAAAA,EAAAA,WAAS,GAAK,eAA/BK,GAAF,KAAe,MAChC,GAAwCL,EAAAA,EAAAA,UAAS,CAC/CM,QAAS,EACTC,SAAU,EACVC,QAAS,GACTC,UAAW,GACXC,gBAAiB,GACjBC,aAAc,IACd,eAPmBC,GAAF,KAAiB,MAS9BC,EAA0B,yCAAG,kHAEZC,EAAAA,EAAAA,QAAkB,CACnCC,KAAM,CAAC,EACPC,MAAO,CAAC,EACRC,KAAM,CAAC,EACPC,OAAQC,EAAAA,EAAAA,IACRC,IAAKC,EAAAA,EAAAA,SACL,OANIN,EAAI,OAOVb,EAAa,OAAJa,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KAAKO,OAAOC,WAAU,gDAErCC,MAAM,EAAD,IAAO,yDAEf,kBAb+B,mCAc1BC,EAAkB,yCAAG,WAAMC,GAAI,4EACkD,OAA/EC,EAAqC,IAAtBD,EAAKf,aAAqB,kBAAoB,mBAAkB,kBAEhEG,EAAAA,EAAAA,QAAkB,CACnCC,KAAM,CACJ,CACER,SAAUmB,EAAKnB,SACfqB,gBAAiBD,IAGrBX,MAAO,CAAC,EACRC,KAAM,CAAC,EACPC,OAAQC,EAAAA,EAAAA,MACRC,IAAI,GAAD,OAAKC,EAAAA,EAAAA,OAAe,WACvB,OAXQ,OAYDN,KAAKc,WACZhB,IACD,gDAEDW,MAAM,EAAD,IAAO,yDAEf,gBArBuB,uCA2BxBM,EAAAA,EAAAA,YAAU,WACRjB,GACF,GAAG,IAEH,IAAMkB,EAAqC,yCAAG,WAAML,GAAI,sEACtDtB,GAAcD,GAAU,2CACzB,gBAF0C,sCAiB3C,OACE,iCACE,SAAC6B,EAAA,EAAU,CAACC,MAAM,8BAClB,SAAC,KAAI,WACH,SAAC,KAAI,CAACC,GAAI,GAAG,UACX,UAAC,KAAK,CAACnC,UAAU,OAAM,WACrB,SAAC,KAAW,WACV,UAAC,KAAK,CAACA,UAAU,UAAS,WACxB,SAAC,KAAI,CAACmC,GAAI,EAAE,UACV,SAAC,KAAO,CAACpC,MAAM,UAAUqC,QAAStB,EAA2B,yCAI/D,SAAC,KAAI,CAACqB,GAAI,EAAE,UACV,SAAC,KAAO,CAACpC,MAAM,UAAUqC,QA3BF,WACrC9B,GAAc,GACdO,EAAgB,CACdN,QAAS,EACTC,SAAU,EACVC,QAAS,GACTC,UAAW,GACXC,gBAAiB,GACjBC,aAAc,IAEhBP,GAAcD,EAChB,EAgBiF,kCAMvE,SAAC,KAAS,WACR,SAACiC,EAAA,EAAY,CACXnC,MAAOA,EACPkC,QAASJ,EACTM,QAAS3C,EACTK,UAAW,WACXuC,KAAMb,EACNc,kBAAkB,eAQlC,C","sources":["utils/columns/member/Columns.js","pages/member/MemberMagement.js"],"sourcesContent":["export const EditorColumns = [\n  {\n    key: 'isAuthorized',\n    label: '',\n    _props: {color: 'primary', className: 'isAuthorized'},\n  },\n  {\n    key: 'number',\n    label: 'No',\n    _props: {color: 'primary', className: 'number'},\n  },\n  {\n    key: 'loginId',\n    label: '아이디',\n    _props: {color: 'primary', className: 'loginId'},\n  },\n  {\n    key: 'createdAt',\n    label: '최초 등록일',\n    _props: {color: 'primary', className: 'createdAt'},\n  },\n  {\n    key: 'editAuthorityKorean',\n    label: '권한',\n    _props: {color: 'primary', className: 'editAuthorityKorean'},\n  },\n]\n","import {useEffect, useState} from 'react'\nimport PageHeader from '../../components/common/PageHeader'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../components/list/ListTemplate'\nimport {EditorColumns} from '../../utils/columns/member/Columns'\nimport ApiConfig, {HttpMethod} from '../../dataManager/apiConfig'\nimport {EndPoint} from '../../dataManager/apiMapper'\n\nconst MemberManageMent = () => {\n  const [items, setItems] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(true)\n  const [selectedItem, setSelectedItem] = useState({\n    number: -1,\n    editorId: 4,\n    loginId: '',\n    createdAt: '',\n    accessAuthority: '',\n    isAuthorized: 1,\n  })\n\n  const onLoadMemberManageMentList = async () => {\n    try {\n      const data = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {},\n        method: HttpMethod.GET,\n        url: EndPoint.EDITOR,\n      })\n      setItems(data?.data.result.responses)\n    } catch (error) {\n      alert(error)\n    }\n  }\n  const handleOnCheckedApi = async item => {\n    const sendAuthType = item.isAuthorized === 1 ? 'EDITOR_PROHIBIT' : 'EDITOR_AUTHORIZE'\n    try {\n      const data = await ApiConfig.request({\n        data: [\n          {\n            editorId: item.editorId,\n            editorAuthority: sendAuthType,\n          },\n        ],\n        query: {},\n        path: {},\n        method: HttpMethod.PATCH,\n        url: `${EndPoint.EDITOR}/auth`,\n      })\n      if (data.data.isSuccess) {\n        onLoadMemberManageMentList()\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n  //가져오기 onLoad\n  //생성 onCreate\n  //수정 onUpdate\n  //삭제 onDelete\n\n  useEffect(() => {\n    onLoadMemberManageMentList()\n  }, [])\n\n  const handleShowMemberManageMentDetailModal = async item => {\n    setShowModal(!showModal)\n  }\n\n  const handleMemberManageMentAddModal = () => {\n    setIsReadOnly(false)\n    setSelectedItem({\n      number: -1,\n      editorId: 1,\n      loginId: '',\n      createdAt: '',\n      accessAuthority: '',\n      isAuthorized: 1,\n    })\n    setShowModal(!showModal)\n  }\n\n  return (\n    <>\n      <PageHeader title='회원관리' />\n      <CRow>\n        <CCol xs={12}>\n          <CCard className='mb-4'>\n            <CCardHeader>\n              <CForm className='row g-3'>\n                <CCol xs={1}>\n                  <CButton color='primary' onClick={onLoadMemberManageMentList}>\n                    조회하기\n                  </CButton>\n                </CCol>\n                <CCol xs={1}>\n                  <CButton color='primary' onClick={handleMemberManageMentAddModal}>\n                    추가\n                  </CButton>\n                </CCol>\n              </CForm>\n            </CCardHeader>\n            <CCardBody>\n              <ListTemplate\n                items={items}\n                onClick={handleShowMemberManageMentDetailModal}\n                columns={EditorColumns}\n                className={'userList'}\n                func={handleOnCheckedApi}\n                datePickerHidden={false}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default MemberManageMent\n"],"names":["EditorColumns","key","label","_props","color","className","useState","items","setItems","showModal","setShowModal","setIsReadOnly","number","editorId","loginId","createdAt","accessAuthority","isAuthorized","setSelectedItem","onLoadMemberManageMentList","ApiConfig","data","query","path","method","HttpMethod","url","EndPoint","result","responses","alert","handleOnCheckedApi","item","sendAuthType","editorAuthority","isSuccess","useEffect","handleShowMemberManageMentDetailModal","PageHeader","title","xs","onClick","ListTemplate","columns","func","datePickerHidden"],"sourceRoot":""}