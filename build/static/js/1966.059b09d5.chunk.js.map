{"version":3,"file":"static/js/1966.059b09d5.chunk.js","mappings":"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","sources":["components/custom/pagination/CPagination.tsx","components/custom/pagination/CPaginationItem.tsx","components/custom/pagination/CSmartPagination.tsx","components/custom/hooks/useForkedRef.ts","components/custom/spinner/CSpinner.tsx","components/custom/element-cover/CElementCover.tsx","components/custom/table/CTable.tsx","components/custom/table/CTableFoot.tsx","components/custom/table/CTableBody.tsx","components/custom/table/CTableRow.tsx","components/custom/table/CTableDataCell.tsx","components/custom/smart-table/CSmartTableBody.tsx","components/custom/smart-table/CSmartTableCleaner.tsx","components/custom/smart-table/CSmartTableFilter.tsx","components/custom/table/CTableHead.tsx","components/custom/table/CTableHeaderCell.tsx","components/custom/smart-table/CSmartTableHead.tsx","components/custom/smart-table/CSmartTableItemsPerPageSelector.tsx","components/custom/smart-table/CSmartTable.tsx"],"sourcesContent":["import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CPaginationProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Set the alignment of pagination components.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CPagination = forwardRef<HTMLUListElement, CPaginationProps>(\n  ({children, align, className, size, ...rest}, ref) => {\n    const _className = classNames(\n      'pagination',\n      {\n        [`justify-content-${align}`]: align,\n        [`pagination-${size}`]: size,\n      },\n      className,\n    )\n    return (\n      <nav ref={ref} {...rest}>\n        <ul className={_className}>{children}</ul>\n      </nav>\n    )\n  },\n)\n\nCPagination.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCPagination.displayName = 'CPagination'\n","import {ElementType, forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {CLink} from '@coreui/react'\n\nexport interface CPaginationItemProps extends HTMLAttributes<HTMLAnchorElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n}\n\nexport const CPaginationItem = forwardRef<HTMLAnchorElement, CPaginationItemProps>(\n  ({children, className, component, ...rest}, ref) => {\n    const _className = classNames(\n      'page-item',\n      {\n        active: rest.active,\n        disabled: rest.disabled,\n      },\n      className,\n    )\n\n    const Component = component ? component : rest.active ? 'span' : 'a'\n\n    return (\n      <li className={_className} {...(rest.active && {'aria-current': 'page'})}>\n        {Component === 'a' ? (\n          <CLink className='page-link' component={Component} {...rest} ref={ref}>\n            {children}\n          </CLink>\n        ) : (\n          <Component className='page-link' ref={ref}>\n            {children}\n          </Component>\n        )}\n      </li>\n    )\n  },\n)\n\nCPaginationItem.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCPaginationItem.displayName = 'CPaginationItem'\n","import React, {forwardRef, ReactNode, HTMLAttributes, useEffect} from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport {CPagination} from './CPagination'\nimport {CPaginationItem} from './CPaginationItem'\n\nexport interface CSmartPaginationProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * A string of all className you want applied to the base component. [docs]\n   */\n  className?: string\n  /**\n   * Current page number. [docs]\n   *\n   * @default 1\n   */\n  activePage?: number\n  /**\n   * Show/hide dots. [docs]\n   *\n   * @default true\n   */\n  dots?: boolean\n  /**\n   * Show/hide arrows. [docs]\n   *\n   * @default true\n   */\n  arrows?: boolean\n  /**\n   * Show double arrows buttons. [docs]\n   *\n   * @default doubleArrows\n   */\n  doubleArrows?: boolean\n  /**\n   * The content of 'firstButton' button. [docs]\n   *\n   * @default '<React.Fragment>&laquo;</React.Fragment>''\n   */\n  firstButton?: ReactNode | string\n  /**\n   * The content of 'previousButton' button. [docs]\n   *\n   * @default '<React.Fragment>&lsaquo;</React.Fragment>'\n   */\n  previousButton?: ReactNode | string\n  /**\n   * The content of 'nextButton' button. [docs]\n   *\n   * @default '<React.Fragment>&rsaquo;</React.Fragment>''\n   */\n  nextButton?: ReactNode | string\n  /**\n   * The content of 'lastButton' button. [docs]\n   *\n   * @default '<React.Fragment>&raquo;</React.Fragment>'\n   */\n  lastButton?: ReactNode | string\n  /**\n   * Size of pagination, valid values: 'sm', 'lg'. [docs]\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Horizontall align. [docs]\n   *\n   * @default 'start'\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * Maximum items number. [docs]\n   *\n   * @default 5\n   */\n  limit?: number\n  /**\n   * Number of pages. [docs]\n   */\n  pages: number\n  /**\n   * On active page change callback. [docs]\n   */\n  onActivePageChange: (a: number, b?: boolean) => void // TODO: change a, b to descriptive names\n}\n\nexport const CSmartPagination = forwardRef<HTMLUListElement, CSmartPaginationProps>(\n  (\n    {\n      className,\n      activePage = 1,\n      align = 'start',\n      arrows = true,\n      dots = true,\n      doubleArrows = true,\n      firstButton = <React.Fragment>&laquo;</React.Fragment>,\n      lastButton = <React.Fragment>&raquo;</React.Fragment>,\n      limit = 5,\n      nextButton = <React.Fragment>&rsaquo;</React.Fragment>,\n      onActivePageChange,\n      pages,\n      previousButton = <React.Fragment>&lsaquo;</React.Fragment>,\n      size,\n      ...rest\n    },\n    ref,\n  ) => {\n    useEffect(() => {\n      pages < activePage && onActivePageChange(pages, true)\n    }, [pages])\n\n    const _classNames = classNames(`justify-content-${align}`, className)\n\n    const showDots: boolean = (() => {\n      return dots && limit > 4 && limit < pages\n    })()\n\n    const maxPrevItems: number = (() => {\n      return Math.floor((limit - 1) / 2)\n    })()\n\n    const maxNextItems: number = (() => {\n      return Math.ceil((limit - 1) / 2)\n    })()\n\n    const beforeDots: boolean = (() => {\n      return showDots && activePage > maxPrevItems + 1\n    })()\n\n    const afterDots: boolean = (() => {\n      return showDots && activePage < pages - maxNextItems\n    })()\n\n    const computedLimit: number = (() => {\n      return limit - (afterDots ? 1 : 0) - (beforeDots ? 1 : 0)\n    })()\n\n    const range: number = (() => {\n      return activePage + maxNextItems\n    })()\n\n    const lastItem: number = (() => {\n      return range >= pages ? pages : range - (afterDots ? 1 : 0)\n    })()\n\n    const itemsAmount: number = (() => {\n      return pages < computedLimit ? pages : computedLimit\n    })()\n\n    const items: number[] = (() => {\n      if (activePage - maxPrevItems <= 1) {\n        return Array.from(\n          {\n            length: itemsAmount,\n          },\n          (_v, i) => i + 1,\n        )\n      } else {\n        return Array.from(\n          {\n            length: itemsAmount,\n          },\n          (_v, i) => {\n            return lastItem - i\n          },\n        ).reverse()\n      }\n    })()\n\n    const setPage = (number: number): void => {\n      if (number !== activePage) {\n        onActivePageChange(number)\n      }\n    }\n\n    return (\n      <CPagination className={_classNames} aria-label='pagination' size={size} {...rest} ref={ref}>\n        {doubleArrows && (\n          <CPaginationItem\n            onClick={() => setPage(1)}\n            aria-label='Go to first page'\n            aria-disabled={activePage === 1}\n            disabled={activePage === 1}\n          >\n            {firstButton}\n          </CPaginationItem>\n        )}\n        {arrows && (\n          <CPaginationItem\n            onClick={() => setPage(activePage - 1)}\n            aria-label='Go to previous page'\n            aria-disabled={activePage === 1}\n            disabled={activePage === 1}\n          >\n            {previousButton}\n          </CPaginationItem>\n        )}\n        {beforeDots && (\n          <CPaginationItem role='separator' disabled>\n            …\n          </CPaginationItem>\n        )}\n        {items.map(i => {\n          return (\n            <CPaginationItem\n              onClick={() => setPage(i)}\n              aria-label={activePage === i ? `Current page ${i}` : `Go to page ${i}`}\n              active={activePage === i}\n              key={i}\n            >\n              {i}\n            </CPaginationItem>\n          )\n        })}\n        {afterDots && (\n          <CPaginationItem role='separator' disabled>\n            …\n          </CPaginationItem>\n        )}\n        {arrows && (\n          <CPaginationItem\n            onClick={() => setPage(activePage + 1)}\n            aria-label='Go to next page'\n            aria-disabled={activePage === pages}\n            disabled={activePage === pages}\n          >\n            {nextButton}\n          </CPaginationItem>\n        )}\n        {doubleArrows && (\n          <CPaginationItem\n            onClick={() => setPage(pages)}\n            aria-label='Go to last page'\n            aria-disabled={activePage === pages}\n            disabled={activePage === pages}\n          >\n            {lastButton}\n          </CPaginationItem>\n        )}\n      </CPagination>\n    )\n  },\n)\n\nCSmartPagination.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string]),\n  activePage: PropTypes.number,\n  dots: PropTypes.bool,\n  arrows: PropTypes.bool,\n  doubleArrows: PropTypes.bool,\n  firstButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  previousButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  nextButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  lastButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  size: PropTypes.oneOf(['sm', 'lg']),\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  limit: PropTypes.number,\n  pages: PropTypes.number.isRequired,\n  onActivePageChange: PropTypes.func.isRequired,\n}\n\nCSmartPagination.displayName = 'CSmartPagination'\n","import {useMemo} from 'react'\n\nexport type AssignableRef<ValueType> =\n  | {\n      bivarianceHack(instance: ValueType | null): void\n    }['bivarianceHack']\n  | React.MutableRefObject<ValueType | null>\n\nexport function useForkedRef<RefValueType = any>(...refs: (AssignableRef<RefValueType> | null | undefined)[]) {\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null\n    }\n    return (node: any) => {\n      refs.forEach(ref => {\n        assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n\nexport function assignRef<RefValueType = any>(ref: AssignableRef<RefValueType> | null | undefined, value: any) {\n  if (ref == null) return\n  if (isFunction(ref)) {\n    ref(value)\n  } else {\n    try {\n      ref.current = value\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`)\n    }\n  }\n}\n\nexport function isFunction(value: any): value is Function {\n  return !!(value && {}.toString.call(value) == '[object Function]')\n}\n","import {ElementType, forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CSpinnerProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Size the component small.\n   */\n  size?: 'sm'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'border' | 'grow'\n  /**\n   * Set visually hidden label for accessibility purposes.\n   */\n  visuallyHiddenLabel?: string\n}\n\nexport const CSpinner = forwardRef<HTMLDivElement | HTMLSpanElement, CSpinnerProps>(\n  (\n    {\n      className,\n      color,\n      component: Component = 'div',\n      size,\n      variant = 'border',\n      visuallyHiddenLabel = 'Loading...',\n      ...rest\n    },\n    ref,\n  ) => {\n    const _className = classNames(\n      `spinner-${variant}`,\n      `text-${color}`,\n      size && `spinner-${variant}-${size}`,\n      className,\n    )\n\n    return (\n      <Component className={_className} role='status' {...rest} ref={ref}>\n        <span className='visually-hidden'>{visuallyHiddenLabel}</span>\n      </Component>\n    )\n  },\n)\n\nCSpinner.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  component: PropTypes.string,\n  size: PropTypes.oneOf(['sm']),\n  variant: PropTypes.oneOf(['border', 'grow']),\n  visuallyHiddenLabel: PropTypes.string,\n}\n\nCSpinner.displayName = 'CSpinner'\n","import PropTypes from 'prop-types'\nimport {CSSProperties, forwardRef, HTMLAttributes, useEffect, useRef, useState} from 'react'\nimport classNames from 'classnames'\n\nimport {useForkedRef} from '../hooks'\nimport {CSpinner} from '../spinner/CSpinner'\n\ninterface CElementCoverProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component. [docs]\n   */\n  className?: string\n  /**\n   * Array of custom boundaries. Use to create custom cover area (instead of parent element area). Area is defined by four sides: 'top', 'bottom', 'right', 'left'. If side is not defined by any custom boundary it is equal to parent element boundary. Each custom boundary is object with keys:\n   * - sides (array) - select boundaries of element to define boundaries. Sides names: 'top', 'bottom', 'right', 'left'.\n   * - query (string) - query used to get element which define boundaries. Search will be done only inside parent element, by parent.querySelector(query) function. [docs]\n   *\n   * @type {sides: string[], query: string}[]\n   */\n  boundaries?: {sides: string[]; query: string}[] // TODO: check if this is correct, TJ\n  /**\n   * Opacity of the cover. [docs]\n   *\n   * @type number\n   */\n  opacity?: number\n}\nexport const CElementCover = forwardRef<HTMLDivElement, CElementCoverProps>(\n  ({children, className, boundaries, opacity = 0.4, ...rest}, ref) => {\n    const elementCoverRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, elementCoverRef)\n\n    const [customBoundaries, setCustomBoundaries] = useState({})\n\n    const getCustomBoundaries = () => {\n      if (!elementCoverRef || !elementCoverRef.current || !boundaries) {\n        return {}\n      }\n      const parent = elementCoverRef.current.parentElement\n      if (!parent) {\n        return {}\n      }\n      const parentCoords = parent.getBoundingClientRect()\n      const customBoundaries = {}\n      boundaries.forEach(({sides, query}) => {\n        const element = parent.querySelector(query)\n        if (!element || !sides) {\n          return\n        }\n        const coords = element.getBoundingClientRect()\n        sides.forEach(side => {\n          // @ts-ignore\n          const sideMargin = Math.abs(coords[side] - parentCoords[side])\n          // @ts-ignore\n          customBoundaries[side] = `${sideMargin}px`\n        })\n      })\n      return customBoundaries\n    }\n\n    useEffect(() => {\n      setCustomBoundaries(getCustomBoundaries())\n    }, [JSON.stringify(getCustomBoundaries())])\n\n    //render\n\n    const classes = classNames(className)\n\n    const containerCoords = {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      ...customBoundaries,\n    }\n\n    const coverStyles: CSSProperties = {\n      ...containerCoords,\n      position: 'absolute',\n      backgroundColor: `rgb(255,255,255,${opacity})`,\n    }\n\n    return (\n      <div className={classes} style={coverStyles} {...rest} ref={forkedRef}>\n        {children || (\n          <div\n            style={{\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translateX(-50%) translateY(-50%)',\n            }}\n          >\n            <CSpinner variant='grow' color='primary' />\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nCElementCover.propTypes = {\n  boundaries: PropTypes.array,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  opacity: PropTypes.number,\n}\n\nCElementCover.displayName = 'CElementCover'\n","import {forwardRef, TableHTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\n\n\nimport {Colors, colorPropType} from '../Types'\nimport classNames from \"classnames\";\n\n// @ts-ignore\nexport interface CTableProps extends TableHTMLAttributes<HTMLTableElement> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top'\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the `<caption>` on the top of the table.\n   */\n  caption?: 'top'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      className,\n      color,\n      hover,\n      responsive,\n      small,\n      striped,\n      ...rest\n    },\n    ref,\n  ) => {\n    const _className = classNames(\n      'table',\n      {\n        [`align-${align}`]: align,\n        [`caption-${caption}`]: caption,\n        [`border-${borderColor}`]: borderColor,\n        'table-bordered': bordered,\n        'table-borderless': borderless,\n        [`table-${color}`]: color,\n        'table-hover': hover,\n        'table-sm': small,\n        'table-striped': striped,\n      },\n      className,\n    )\n\n    return responsive ? (\n      <div className={typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`}>\n        <table className={_className ? _className : undefined} {...rest} ref={ref}>\n          {children}\n        </table>\n      </div>\n    ) : (\n      <table className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </table>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOf(['top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n}\n\nCTable.displayName = 'CTable'\n","import PropTypes from 'prop-types'\nimport {forwardRef, HTMLAttributes} from 'react'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <tfoot className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <tbody className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({children, active, align, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`align-${align}`]: align,\n        'table-active': active,\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <tr className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n","import {forwardRef, TdHTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableDataCellProps extends Omit<TdHTMLAttributes<HTMLTableDataCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableDataCellElement, CTableDataCellProps>(\n  ({children, active, align, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`align-${align}`]: align,\n        'table-active': active,\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <td className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </td>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import React, {forwardRef, MouseEvent, ReactNode} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {CTableBody, CTableBodyProps} from '../table/CTableBody'\nimport {CTableRow} from '../table/CTableRow'\nimport {CTableDataCell} from '../table/CTableDataCell'\n\nimport {CFormCheck} from '@coreui/react'\n\nimport {Item, ItemInternal, ScopedColumns} from './CSmartTableInterface'\n\nexport interface CSmartTableBodyProps extends CTableBodyProps {\n  clickableRows?: boolean\n  currentItems: ItemInternal[]\n  firstItemOnActivePageIndex: number\n  noItemsLabel?: string | ReactNode\n  onRowChecked?: (id: number, value: boolean) => void\n  onRowClick?: (item: ItemInternal, index: number, columnName: string, event: MouseEvent | boolean) => void\n  rawColumnNames: string[]\n  scopedColumns?: ScopedColumns\n  selectable?: boolean\n}\n\nexport const CSmartTableBody = forwardRef<HTMLTableSectionElement, CSmartTableBodyProps>(\n  (\n    {\n      clickableRows,\n      currentItems,\n      firstItemOnActivePageIndex,\n      noItemsLabel,\n      onRowChecked,\n      onRowClick,\n      rawColumnNames,\n      scopedColumns,\n      selectable,\n      ...rest\n    },\n    ref,\n  ) => {\n    const tableDataCellProps = (item: Item, colName: string) => {\n      const props = item._cellProps && {\n        ...(item._cellProps['all'] && {...item._cellProps['all']}),\n        ...(item._cellProps[colName] && {...item._cellProps[colName]}),\n      }\n\n      return props\n    }\n\n    const getColumnName = (event: MouseEvent): string => {\n      const target = event.target as HTMLTextAreaElement\n      const closest = target.closest('tr')\n      const children = closest ? Array.from(closest.children) : []\n      const clickedCell = children.filter(child => child.contains(target))[0]\n      return rawColumnNames[children.indexOf(clickedCell)]\n    }\n\n    const colspan: number = selectable ? rawColumnNames.length + 1 : rawColumnNames.length\n\n    return (\n      <CTableBody\n        {...(clickableRows && {\n          style: {cursor: 'pointer'},\n        })}\n        {...rest}\n        ref={ref}\n      >\n        {currentItems.map((item: ItemInternal, trIndex) => {\n          return (\n            <React.Fragment key={trIndex}>\n              <CTableRow\n                {...(item._props && {...item._props})}\n                {...(clickableRows && {tabIndex: 0})}\n                onClick={event =>\n                  onRowClick && onRowClick(item, trIndex + firstItemOnActivePageIndex, getColumnName(event), event)\n                }\n              >\n                {selectable && (\n                  <CTableDataCell>\n                    <CFormCheck\n                      checked={item._selected ? item._selected : false}\n                      onChange={event => onRowChecked && onRowChecked(item._id, event.target.checked)}\n                    />\n                  </CTableDataCell>\n                )}\n                {rawColumnNames.map((colName, index) => {\n                  return (\n                    (scopedColumns &&\n                      scopedColumns[colName] &&\n                      React.cloneElement(scopedColumns[colName](item, trIndex + firstItemOnActivePageIndex), {\n                        key: index,\n                      })) || (\n                      <CTableDataCell {...tableDataCellProps(item, colName)} key={index}>\n                        {String(item[colName])}\n                      </CTableDataCell>\n                    )\n                  )\n                })}\n              </CTableRow>\n              {scopedColumns && scopedColumns.details && (\n                <>\n                  <CTableRow>\n                    <CTableDataCell\n                      colSpan={colspan}\n                      className='p-0'\n                      style={{borderBottomWidth: 0}}\n                      tabIndex={-1}\n                    ></CTableDataCell>\n                  </CTableRow>\n                  <CTableRow\n                    onClick={event =>\n                      onRowClick && onRowClick(item, trIndex + firstItemOnActivePageIndex, getColumnName(event), true)\n                    }\n                    className='p-0'\n                    key={`details${trIndex}`}\n                  >\n                    <CTableDataCell colSpan={colspan} className='p-0' style={{border: 0}}>\n                      {scopedColumns.details(item, trIndex + firstItemOnActivePageIndex)}\n                    </CTableDataCell>\n                  </CTableRow>\n                </>\n              )}\n            </React.Fragment>\n          )\n        })}\n        {!currentItems.length && (\n          <CTableRow>\n            <CTableDataCell colSpan={colspan}>{noItemsLabel}</CTableDataCell>\n          </CTableRow>\n        )}\n      </CTableBody>\n    )\n  },\n)\n\nCSmartTableBody.propTypes = {\n  clickableRows: PropTypes.bool,\n  currentItems: PropTypes.array.isRequired,\n  firstItemOnActivePageIndex: PropTypes.number.isRequired,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onRowChecked: PropTypes.func,\n  onRowClick: PropTypes.func,\n  rawColumnNames: PropTypes.array.isRequired,\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n}\n\nCSmartTableBody.displayName = 'CSmartTableBody'\n","import PropTypes from 'prop-types'\nimport {forwardRef, HTMLAttributes, ReactNode} from 'react'\nimport {cilFilterX} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\n\ninterface CSmartTableCleanerProps extends HTMLAttributes<HTMLButtonElement> {\n  content?: string \n  isFiltered?: string\n}\n\nexport const CSmartTableCleaner = forwardRef<HTMLButtonElement, CSmartTableCleanerProps>(\n  ({content = <CIcon width={18} icon={cilFilterX} />, isFiltered, ...rest}, ref) => {\n    return (\n      <button\n        type='button'\n        className='btn btn-transparent'\n        {...(!isFiltered && {\n          disabled: true,\n          tabIndex: -1,\n        })}\n        {...rest}\n        ref={ref}\n      >\n        {content}\n      </button>\n    )\n  },\n)\n\nCSmartTableCleaner.propTypes = {\n  content: PropTypes.oneOfType([PropTypes.string]),\n  isFiltered: PropTypes.string,\n}\n\nCSmartTableCleaner.displayName = 'CSmartTableCleaner'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {CFormLabel} from '@coreui/react'\nimport {CFormInput} from '@coreui/react'\n\ninterface CSmartTableFilterProps extends HTMLAttributes<HTMLInputElement> {\n  // TODO: consider to simplify ex. filterLabel --> label\n  filterLabel?: string\n  filterPlaceholder?: string\n  value?: string | number\n}\n\nexport const CSmartTableFilter = forwardRef<HTMLInputElement, CSmartTableFilterProps>(\n  ({filterLabel, filterPlaceholder, value, ...rest}, ref) => {\n    return (\n      <div className='row mb-2'>\n        <CFormLabel className='col-sm-auto col-form-label'>{filterLabel}</CFormLabel>\n        <div className='col-sm-auto'>\n          <CFormInput placeholder={filterPlaceholder} value={value} {...rest} ref={ref} />\n        </div>\n      </div>\n    )\n  },\n)\n\nCSmartTableFilter.propTypes = {\n  filterLabel: PropTypes.string,\n  filterPlaceholder: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}\n\nCSmartTableFilter.displayName = 'CSmartTableFilter'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <thead className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import {forwardRef, ThHTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableHeaderCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableHeaderCellElement, CTableHeaderCellProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <th className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import {ElementType, forwardRef, ReactNode, useEffect, useRef} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {ColumnFilter, ColumnFilterValue, Column, Sorter, SorterValue} from './CSmartTableInterface'\n\nimport {CFormInput} from '@coreui/react'\nimport {CFormCheck} from '@coreui/react'\nimport {CTableHead, CTableHeadProps} from '../table/CTableHead'\nimport {CTableHeaderCell} from '../table/CTableHeaderCell'\nimport {CTableRow} from '../table/CTableRow'\n\nexport interface CSmartTableHeadProps extends CTableHeadProps {\n  columnFilter?: boolean | ColumnFilter\n  columnFilterState?: ColumnFilterValue\n  columnSorter?: boolean | Sorter\n  component?: string | ElementType\n  columns: (Column | string)[]\n  handleFilterOnChange?: (key: string, value: string) => void\n  handleFilterOnInput?: (key: string, value: string) => void\n  handleSelectAllChecked?: () => void\n  handleSort?: (key: string, index: number) => void\n  selectable?: boolean\n  selectAll?: boolean | string\n  sorterState?: SorterValue\n  sortingIcon?: ReactNode\n  sortingIconAscending?: ReactNode\n  sortingIconDescending?: ReactNode\n}\n\nexport const CSmartTableHead = forwardRef<HTMLTableSectionElement, CSmartTableHeadProps>(\n  (\n    {\n      columnFilter,\n      columnFilterState,\n      columnSorter,\n      component: Component = CTableHead,\n      columns,\n      handleFilterOnChange,\n      handleFilterOnInput,\n      handleSelectAllChecked,\n      handleSort,\n      selectable,\n      selectAll,\n      sorterState,\n      sortingIcon,\n      sortingIconAscending,\n      sortingIconDescending,\n      ...rest\n    },\n    ref,\n  ) => {\n    const tableHeaderCellProps = (column: Column | string) => {\n      if (typeof column === 'object' && column._props) {\n        return column._props\n      }\n      return {}\n    }\n\n    const tableHeaderCellStyles = (column: Column | string) => {\n      const style = {verticalAlign: 'middle', overflow: 'hidden', cursor: ''}\n\n      if (\n        columnSorter &&\n        (typeof column !== 'object' ||\n          (typeof column === 'object' && (typeof column.sorter === 'undefined' || column.sorter)))\n      ) {\n        style.cursor = 'pointer'\n      }\n\n      if (typeof column === 'object' && column._props) {\n        return {...style, ...column._style}\n      }\n      return style\n    }\n\n    const pretifyName = (name: string) => {\n      return name\n        .replace(/[-_.]/g, ' ')\n        .replace(/ +/g, ' ')\n        .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ')\n    }\n\n    const label = (column: Column | string) =>\n      typeof column === 'object'\n        ? column.label !== undefined\n          ? column.label\n          : pretifyName(column.key)\n        : pretifyName(column)\n\n    const key = (column: Column | string) => (typeof column === 'object' ? column.key : column)\n\n    const getColumnSorterState = (key: string): string | number => {\n      if (sorterState && sorterState.column === key) {\n        if (sorterState.state) {\n          return sorterState.state\n        }\n        return 0\n      }\n\n      return 0\n    }\n\n\n    // @ts-ignore\n    const columnSorterIcon = (column : Column | string) => {\n      if (getColumnSorterState(key(column)) === 0) {\n        return <span className='opacity-25 float-end me-1'>{sortingIcon}</span>\n      }\n      if (getColumnSorterState(key(column)) === 'asc') {\n        return <span className='float-end me-1'>{sortingIconAscending}</span>\n      }\n      if (getColumnSorterState(key(column)) === 'desc') {\n        return <span className='float-end me-1'>{sortingIconDescending}</span>\n      }\n    }\n\n    const checkboxRef = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n      if (selectAll === 'indeterminate') {\n        if (checkboxRef.current) checkboxRef.current.indeterminate = true\n      } else {\n        if (checkboxRef.current) checkboxRef.current.indeterminate = false\n      }\n    }, [selectAll])\n\n    return (\n      <Component {...rest} ref={ref}>\n        <CTableRow>\n          {selectable && (\n            <CTableHeaderCell>\n              <CFormCheck\n                checked={typeof selectAll === 'boolean' ? selectAll : false}\n                onChange={() => handleSelectAllChecked && handleSelectAllChecked()}\n                ref={checkboxRef}\n              />\n            </CTableHeaderCell>\n          )}\n          {columns.map((column: Column | string, index: number) => {\n            return (\n              <CTableHeaderCell\n                {...tableHeaderCellProps(column)}\n                onClick={() => handleSort && handleSort(key(column), index)}\n                style={tableHeaderCellStyles(column)}\n                key={index}\n              >\n                <div className='d-inline'>{label(column)}</div>\n                {columnSorter &&\n                  (typeof column !== 'object' ? true : typeof column.sorter === 'undefined' ? true : column.sorter) &&\n                  columnSorterIcon(column)}\n              </CTableHeaderCell>\n            )\n          })}\n        </CTableRow>\n        {columnFilter && (\n          <CTableRow>\n            {selectable && <CTableHeaderCell></CTableHeaderCell>}\n            {columns.map((column: Column | string, index: number) => {\n              return (\n                <CTableHeaderCell {...tableHeaderCellProps(column)} key={index}>\n                  {(typeof column !== 'object'\n                    ? true\n                    : typeof column.filter === 'undefined'\n                    ? true\n                    : column.filter) && (\n                    <CFormInput\n                      size='sm'\n                      onInput={event =>\n                        handleFilterOnInput &&\n                        handleFilterOnInput(key(column), (event.target as HTMLInputElement).value)\n                      }\n                      onChange={event =>\n                        handleFilterOnChange &&\n                        handleFilterOnChange(key(column), (event.target as HTMLInputElement).value)\n                      }\n                      value={columnFilterState && columnFilterState[key(column)] ? columnFilterState[key(column)] : ''}\n                      aria-label={`column name: '${label(column)}' filter input`}\n                    />\n                  )}\n                </CTableHeaderCell>\n              )\n            })}\n          </CTableRow>\n        )}\n      </Component>\n    )\n  },\n)\n\nCSmartTableHead.propTypes = {\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  columnFilterState: PropTypes.object,\n  columnSorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  component: PropTypes.elementType,\n  children: PropTypes.node,\n  columns: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.string])).isRequired, // TODO: improve this Prop Type,\n  handleFilterOnChange: PropTypes.func,\n  handleFilterOnInput: PropTypes.func,\n  handleSelectAllChecked: PropTypes.func,\n  handleSort: PropTypes.func,\n  selectable: PropTypes.bool,\n  selectAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  sorterState: PropTypes.object,\n  sortingIcon: PropTypes.node,\n  sortingIconAscending: PropTypes.node,\n  sortingIconDescending: PropTypes.node,\n}\n\nCSmartTableHead.displayName = 'CSmartTableHead'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport {CFormLabel} from '@coreui/react'\nimport {CFormSelect} from '@coreui/react'\n\ninterface CSmartTableItemsPerPageSelectorProps extends HTMLAttributes<HTMLSelectElement> {\n  itemsPerPage?: number\n  itemsPerPageLabel?: string\n  itemsPerPageOptions?: number[]\n}\n\nexport const CSmartTableItemsPerPageSelector = forwardRef<HTMLSelectElement, CSmartTableItemsPerPageSelectorProps>(\n  ({itemsPerPage, itemsPerPageLabel, itemsPerPageOptions, ...rest}, ref) => {\n    return (\n      <div className='row'>\n        <CFormLabel className='col-auto col-form-label'>{itemsPerPageLabel}</CFormLabel>\n        <div className='col-auto'>\n          <CFormSelect defaultValue={itemsPerPage} {...rest} ref={ref}>\n            {itemsPerPageOptions &&\n              itemsPerPageOptions.map((number, index) => {\n                return (\n                  <option value={number} key={index}>\n                    {number}\n                  </option>\n                )\n              })}\n          </CFormSelect>\n        </div>\n      </div>\n    )\n  },\n)\n\nCSmartTableItemsPerPageSelector.propTypes = {\n  itemsPerPage: PropTypes.number,\n  itemsPerPageLabel: PropTypes.string,\n  itemsPerPageOptions: PropTypes.array,\n}\n\nCSmartTableItemsPerPageSelector.displayName = 'CSmartTableItemsPerPageSelector'\n","import React, {ChangeEvent, forwardRef, useEffect, useMemo, useState} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {cilArrowBottom, cilArrowTop, cilSwapVertical} from '@coreui/icons'\n\nimport {ColumnFilterValue, CSmartTableProps, Item, ItemInternal, SorterValue} from './CSmartTableInterface'\n\nimport {CSmartPagination} from '../pagination/CSmartPagination'\nimport {CElementCover} from '../element-cover/CElementCover'\n\nimport {CTable} from '../table/CTable'\nimport {CTableFoot} from '../table/CTableFoot'\n\nimport {CSmartTableBody} from './CSmartTableBody'\nimport {CSmartTableCleaner} from './CSmartTableCleaner'\nimport {CSmartTableFilter} from './CSmartTableFilter'\nimport {CSmartTableHead} from './CSmartTableHead'\nimport {CSmartTableItemsPerPageSelector} from './CSmartTableItemsPerPageSelector'\n\nimport CIcon from '@coreui/icons-react'\n\nexport const CSmartTable = forwardRef<HTMLDivElement, CSmartTableProps>(\n  (\n    {\n      activePage = 1,\n      cleaner,\n      clickableRows,\n      columnFilter,\n      columnFilterValue, // TODO: consider to use only columnFilter prop\n      columns,\n      columnSorter,\n      footer,\n      header = true,\n      items,\n      itemsPerPage = 10,\n      itemsPerPageLabel = 'Items per page:',\n      itemsPerPageOptions = [5, 10, 20, 50],\n      itemsPerPageSelect,\n      loading,\n      noItemsLabel = 'No items found',\n      onActivePageChange,\n      onColumnFilterChange,\n      onFilteredItemsChange,\n      onItemsPerPageChange,\n      onRowClick,\n      onSelectedItemsChange,\n      onSorterChange,\n      onTableFilterChange,\n      pagination,\n      paginationProps,\n      scopedColumns,\n      selectable,\n      sorterValue,\n      sortingIcon = <CIcon width={18} icon={cilSwapVertical} key='csv' />,\n      sortingIconAscending = <CIcon width={18} icon={cilArrowTop} key='cat' />,\n      sortingIconDescending = <CIcon width={18} icon={cilArrowBottom} key='cab' />,\n      tableBodyProps,\n      tableFootProps,\n      tableFilter,\n      tableFilterLabel = 'Filter:',\n      tableFilterPlaceholder = 'type string...',\n      tableFilterValue, // TODO: consider to use only tableFilter prop\n      tableHeadProps,\n      tableProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    // instance data\n    const [_activePage, setActivePage] = useState<number>(activePage)\n    const [_items, setItems] = useState<ItemInternal[]>([])\n    const [_itemsPerPage, setItemsPerPage] = useState(itemsPerPage)\n    const [columnFilterState, setColumnFilterState] = useState<ColumnFilterValue>({})\n    const [selectedAll, setSelectedAll] = useState<boolean | string>()\n    const [sorterState, setSorterState] = useState<SorterValue>({})\n    const [tableFilterState, setTableFilterState] = useState<string>(tableFilterValue ? tableFilterValue : '')\n\n    // watch\n    useMemo(() => {\n      if (items && items.length < _itemsPerPage * _activePage - _itemsPerPage) {\n        setActivePage(1)\n      }\n\n      // Create the internal array of items\n      Array.isArray(items) &&\n        setItems(\n          items?.map((item: Item, index: number) => {\n            return {...item, _id: index}\n          }),\n        )\n    }, [JSON.stringify(items)])\n\n    useMemo(() => {\n      columnFilterValue && setColumnFilterState(columnFilterValue)\n    }, [JSON.stringify(columnFilterValue)])\n\n    useMemo(() => {\n      setSorterState({...sorterValue})\n    }, [JSON.stringify(sorterValue)])\n\n    useMemo(() => setItemsPerPage(itemsPerPage), [itemsPerPage])\n\n    // functions\n\n    const isSortable = (i: number): boolean | undefined => {\n      const isDataColumn = itemsDataColumns.includes(rawColumnNames[i])\n      let column\n      if (columns) column = columns[i]\n      return (\n        columnSorter &&\n        (!columns ||\n          typeof column !== 'object' ||\n          (typeof column === 'object' && (typeof column.sorter === 'undefined' || column.sorter))) &&\n        isDataColumn\n      )\n    }\n\n    const sorterChange = (column: string, index: number): void => {\n      if (!isSortable(index)) {\n        return\n      }\n      //if column changed or sort was descending change asc to true\n      const state = sorterState ? sorterState : {column: '', state: ''}\n\n      if (state.column === column) {\n        if (state.state === 0) {\n          state.state = 'asc'\n        } else if (state.state === 'asc') {\n          state.state = 'desc'\n        } else {\n          if (typeof columnSorter === 'object' && !columnSorter.resetable) {\n            state.state = 'asc'\n          } else {\n            state.state = 0\n          }\n        }\n      } else {\n        state.column = column\n        state.state = 'asc'\n      }\n      setSorterState({...state})\n    }\n\n    const itemsPerPageChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n      if (\n        typeof itemsPerPageSelect !== 'object' ||\n        (typeof itemsPerPageSelect === 'object' && !itemsPerPageSelect.external)\n      )\n        setItemsPerPage(Number((event.target as HTMLSelectElement).value))\n    }\n\n    const columnFilterChange = (colName: string, value: string, type: string): void => {\n      const isLazy = columnFilter && typeof columnFilter === 'object' && columnFilter.lazy === true\n      if ((isLazy && type === 'input') || (!isLazy && type === 'change')) {\n        return\n      }\n      const newState = {...columnFilterState, [`${colName}`]: value}\n      setActivePage(1)\n      setColumnFilterState(newState)\n    }\n\n    const tableFilterChange = (value: string, type: string): void => {\n      const isLazy = tableFilter && typeof tableFilter === 'object' && tableFilter.lazy === true\n      if ((isLazy && type === 'input') || (!isLazy && type === 'change')) {\n        return\n      }\n      setActivePage(1)\n      setTableFilterState(value)\n    }\n\n    const clean = (): void => {\n      setTableFilterState('')\n      setColumnFilterState({})\n      setSorterState({})\n    }\n\n    // computed\n\n    const genCols = Object.keys(_items[0] || {}).filter(el => el.charAt(0) !== '_')\n    const rawColumnNames = columns\n      ? columns.map((column: any) => {\n          if (typeof column === 'object') return column.key\n          else return column\n        })\n      : genCols //! || el\n    const itemsDataColumns = rawColumnNames.filter(name => genCols.includes(name))\n\n    // variables\n    const filteredColumns: ItemInternal[] = useMemo(() => {\n      let items = _items\n      if (columnFilter && typeof columnFilter === 'object' && columnFilter.external) {\n        return items\n      }\n      Object.entries(columnFilterState).forEach(([key, value]) => {\n        const columnFilter = String(value).toLowerCase()\n        if (columnFilter && itemsDataColumns.includes(key)) {\n          items = items.filter(item => {\n            return String(item[key]).toLowerCase().includes(columnFilter)\n          })\n        }\n      })\n      return items\n    }, [JSON.stringify(columnFilterState), JSON.stringify(_items)])\n\n    const filteredTable: ItemInternal[] = useMemo(() => {\n      let items = filteredColumns\n      if (!tableFilterState || (tableFilter && typeof tableFilter === 'object' && tableFilter.external)) {\n        return items\n      }\n      const filter = tableFilterState.toLowerCase()\n      const valueContainFilter = (val: any) => String(val).toLowerCase().includes(filter)\n      items = items.filter(item => {\n        return !!itemsDataColumns.find(key => valueContainFilter(item[key]))\n      })\n      return items\n    }, [tableFilterState, JSON.stringify(tableFilterValue), JSON.stringify(filteredColumns)])\n\n    const sortedItems: ItemInternal[] = useMemo(() => {\n      const col = sorterState?.column\n      if (\n        !col ||\n        !itemsDataColumns.includes(col) ||\n        (columnSorter && typeof columnSorter === 'object' && columnSorter.external)\n      ) {\n        return filteredTable\n      }\n\n      const flip = sorterState.state === 'asc' ? 1 : sorterState.state === 'desc' ? -1 : 0\n      const sorted = filteredTable.slice().sort((item, item2) => {\n        const value = item[col]\n        const value2 = item2[col]\n        const a = typeof value === 'number' ? value : String(value).toLowerCase()\n        const b = typeof value2 === 'number' ? value2 : String(value2).toLowerCase()\n        return a > b ? 1 * flip : b > a ? -1 * flip : 0\n      })\n      return sorted\n    }, [\n      JSON.stringify(filteredTable),\n      JSON.stringify(sorterState),\n      JSON.stringify(columnSorter),\n      JSON.stringify(filteredColumns),\n      JSON.stringify(_items),\n    ])\n\n    const numberOfPages: number = _itemsPerPage ? Math.ceil(sortedItems.length / _itemsPerPage) : 1\n\n    const firstItemOnActivePageIndex: number = _activePage ? (_activePage - 1) * _itemsPerPage : 0\n\n    const itemsOnActivePage: ItemInternal[] = sortedItems.slice(\n      firstItemOnActivePageIndex,\n      firstItemOnActivePageIndex + _itemsPerPage,\n    )\n\n    const currentItems: ItemInternal[] = _activePage ? itemsOnActivePage : sortedItems\n\n    const isFiltered: string = tableFilterState || sorterState?.column || Object.values(columnFilterState).join('')\n\n    // effects\n\n    useEffect(() => {\n      onActivePageChange && onActivePageChange(_activePage)\n    }, [_activePage])\n\n    useEffect(() => {\n      onItemsPerPageChange && onItemsPerPageChange(_itemsPerPage)\n      itemsPerPage !== _itemsPerPage && setActivePage(1) // TODO: set proper page after _itemsPerPage update\n    }, [_itemsPerPage])\n\n    useEffect(() => {\n      sorterState && onSorterChange && onSorterChange(sorterState)\n    }, [JSON.stringify(sorterState)])\n\n    useEffect(() => {\n      onColumnFilterChange && onColumnFilterChange(columnFilterState)\n    }, [JSON.stringify(columnFilterState)])\n\n    useEffect(() => {\n      onTableFilterChange && onTableFilterChange(tableFilterState)\n    }, [tableFilterState])\n\n    useEffect(() => {\n      onFilteredItemsChange && onFilteredItemsChange(sortedItems)\n    }, [JSON.stringify(sortedItems)])\n\n    const handleRowChecked = (id: number, value: boolean) => {\n      const newArr = [..._items]\n      newArr[id]._selected = value\n      setItems(newArr)\n    }\n\n    const handleSelectAllChecked = () => {\n      if (selectedAll === true) {\n        setItems(\n          _items.map((item: ItemInternal) => {\n            return {...item, _selected: false}\n          }),\n        )\n        return\n      }\n\n      setItems(\n        _items.map((item: ItemInternal) => {\n          return {...item, _selected: true}\n        }),\n      )\n    }\n\n    useEffect(() => {\n      if (selectable) {\n        const selected = _items.filter(item => item._selected === true)\n        onSelectedItemsChange && onSelectedItemsChange(selected)\n\n        if (selected.length === _items.length) {\n          setSelectedAll(true)\n          return\n        }\n\n        if (selected.length === 0) {\n          setSelectedAll(false)\n          return\n        }\n\n        if (selected.length !== 0 && selected.length !== _items.length) {\n          setSelectedAll('indeterminate')\n        }\n      }\n    }, [_items])\n\n    return (\n      <React.Fragment>\n        <div {...rest} ref={ref}>\n          {(itemsPerPageSelect || tableFilter || cleaner) && (\n            <div className='row my-2 mx-0'>\n              {(tableFilter || cleaner) && (\n                <>\n                  <div className='col-auto p-0'>\n                    {tableFilter && (\n                      <CSmartTableFilter\n                        filterLabel={tableFilterLabel}\n                        filterPlaceholder={tableFilterPlaceholder}\n                        onInput={e => {\n                          tableFilterChange((e.target as HTMLInputElement).value, 'input')\n                        }}\n                        onChange={e => {\n                          tableFilterChange((e.target as HTMLInputElement).value, 'change')\n                        }}\n                        value={tableFilterState || ''}\n                      />\n                    )}\n                  </div>\n                  <div className='col-auto p-0'>\n                    {cleaner && (\n                      <CSmartTableCleaner\n                        isFiltered={isFiltered}\n                        onClick={() => clean()}\n                        onKeyUp={event => {\n                          if (event.key === 'Enter') clean()\n                        }}\n                      />\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        <div className='position-relative'>\n          <CTable {...tableProps}>\n            {header && (\n              <CSmartTableHead\n                {...tableHeadProps}\n                columnFilter={columnFilter}\n                columnFilterState={columnFilterState}\n                columns={columns ? columns : rawColumnNames}\n                columnSorter={columnSorter}\n                selectable={selectable}\n                selectAll={selectedAll}\n                sorterState={sorterState}\n                sortingIcon={sortingIcon}\n                sortingIconAscending={sortingIconAscending}\n                sortingIconDescending={sortingIconDescending}\n                handleSort={(key, index) => sorterChange(key, index)}\n                handleFilterOnChange={(key, event) => columnFilterChange(key, event, 'change')}\n                handleFilterOnInput={(key, event) => columnFilterChange(key, event, 'input')}\n                handleSelectAllChecked={() => handleSelectAllChecked()}\n              />\n            )}\n            <CSmartTableBody\n              currentItems={currentItems}\n              firstItemOnActivePageIndex={firstItemOnActivePageIndex}\n              noItemsLabel={noItemsLabel}\n              onRowClick={(item, index, columnName, event) =>\n                clickableRows && onRowClick && onRowClick(item, index, columnName, event)\n              }\n              onRowChecked={(id, value) => handleRowChecked(id, value)}\n              rawColumnNames={rawColumnNames}\n              scopedColumns={scopedColumns}\n              selectable={selectable}\n              {...tableBodyProps}\n            />\n            {footer && (\n              <CSmartTableHead\n                component={CTableFoot}\n                {...tableFootProps}\n                columnFilter={false}\n                columnSorter={false}\n                columns={columns ? columns : rawColumnNames}\n                handleSelectAllChecked={() => handleSelectAllChecked()}\n                selectable={selectable}\n                selectAll={selectedAll}\n              />\n            )}\n          </CTable>\n          {loading && (\n            <CElementCover\n              boundaries={[\n                {sides: ['top'], query: 'td'},\n                {sides: ['bottom'], query: 'tbody'},\n              ]}\n            />\n          )}\n        </div>\n\n        {(pagination || itemsPerPageSelect) && (\n          <div className='row'>\n            <div className='col'>\n              {pagination && numberOfPages > 1 && (\n                <CSmartPagination\n                  {...paginationProps}\n                  onActivePageChange={page => {\n                    setActivePage(page)\n                  }}\n                  pages={numberOfPages}\n                  activePage={_activePage}\n                />\n              )}\n            </div>\n            <div className='col-auto ms-auto'>\n              {itemsPerPageSelect && (\n                <CSmartTableItemsPerPageSelector\n                  itemsPerPage={_itemsPerPage}\n                  itemsPerPageLabel={itemsPerPageLabel}\n                  itemsPerPageOptions={itemsPerPageOptions}\n                  onChange={(event: ChangeEvent<HTMLSelectElement>) => itemsPerPageChange(event)}\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    )\n  },\n)\n\nCSmartTable.propTypes = {\n  activePage: PropTypes.number,\n  cleaner: PropTypes.bool,\n  clickableRows: PropTypes.bool,\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  columnFilterValue: PropTypes.object,\n  columns: PropTypes.array,\n  columnSorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  footer: PropTypes.bool,\n  header: PropTypes.bool,\n  items: PropTypes.array,\n  itemsPerPage: PropTypes.number,\n  itemsPerPageLabel: PropTypes.string,\n  itemsPerPageOptions: PropTypes.array,\n  itemsPerPageSelect: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  loading: PropTypes.bool,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onActivePageChange: PropTypes.func,\n  onColumnFilterChange: PropTypes.func,\n  onFilteredItemsChange: PropTypes.func,\n  onItemsPerPageChange: PropTypes.func,\n  onRowClick: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  onSorterChange: PropTypes.func,\n  onTableFilterChange: PropTypes.func,\n  pagination: PropTypes.bool,\n  paginationProps: PropTypes.any, // TODO: update\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n  sorterValue: PropTypes.object,\n  sortingIcon: PropTypes.node,\n  sortingIconAscending: PropTypes.node,\n  sortingIconDescending: PropTypes.node,\n  tableBodyProps: PropTypes.object,\n  tableFootProps: PropTypes.object,\n  tableFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  tableFilterLabel: PropTypes.string,\n  tableFilterPlaceholder: PropTypes.string,\n  tableFilterValue: PropTypes.string,\n  tableHeadProps: PropTypes.object,\n  tableProps: PropTypes.object,\n}\n\nCSmartTable.displayName = 'CSmartTable'\n"],"names":["CPagination","forwardRef","_ref","ref","children","align","className","size","rest","_className","classNames","concat","_jsx","displayName","CPaginationItem","component","active","disabled","Component","CLink","CSmartPagination","activePage","arrows","dots","doubleArrows","firstButton","React","lastButton","limit","nextButton","onActivePageChange","pages","previousButton","useEffect","_classNames","showDots","maxPrevItems","Math","floor","maxNextItems","ceil","beforeDots","afterDots","computedLimit","range","lastItem","itemsAmount","items","Array","from","length","_v","i","reverse","setPage","number","_jsxs","onClick","role","map","useForkedRef","_len","arguments","refs","_key","useMemo","every","node","forEach","value","toString","call","isFunction","current","error","Error","assignRef","CSpinner","color","variant","visuallyHiddenLabel","CElementCover","boundaries","opacity","elementCoverRef","useRef","forkedRef","customBoundaries","setCustomBoundaries","useState","getCustomBoundaries","parent","parentElement","parentCoords","getBoundingClientRect","_ref2","sides","query","element","querySelector","coords","side","sideMargin","abs","JSON","stringify","classes","coverStyles","top","left","right","bottom","position","backgroundColor","style","transform","CTable","borderColor","bordered","borderless","caption","hover","responsive","small","striped","undefined","CTableFoot","CTableBody","CTableRow","CTableDataCell","CSmartTableBody","clickableRows","currentItems","firstItemOnActivePageIndex","noItemsLabel","onRowChecked","onRowClick","rawColumnNames","scopedColumns","selectable","tableDataCellProps","item","colName","_cellProps","getColumnName","event","target","closest","clickedCell","filter","child","contains","indexOf","colspan","cursor","trIndex","_props","tabIndex","CFormCheck","checked","_selected","onChange","_id","index","key","_createElement","String","details","_Fragment","colSpan","borderBottomWidth","border","CSmartTableCleaner","content","CIcon","width","icon","cilFilterX","isFiltered","type","CSmartTableFilter","filterLabel","filterPlaceholder","CFormLabel","CFormInput","placeholder","CTableHead","CTableHeaderCell","CSmartTableHead","columnFilter","columnFilterState","columnSorter","columns","handleFilterOnChange","handleFilterOnInput","handleSelectAllChecked","handleSort","selectAll","sorterState","sortingIcon","sortingIconAscending","sortingIconDescending","tableHeaderCellProps","column","tableHeaderCellStyles","verticalAlign","overflow","sorter","_style","pretifyName","name","replace","split","word","charAt","toUpperCase","slice","join","label","getColumnSorterState","state","checkboxRef","indeterminate","columnSorterIcon","onInput","CSmartTableItemsPerPageSelector","itemsPerPage","itemsPerPageLabel","itemsPerPageOptions","CFormSelect","defaultValue","CSmartTable","cleaner","columnFilterValue","footer","header","itemsPerPageSelect","loading","onColumnFilterChange","onFilteredItemsChange","onItemsPerPageChange","onSelectedItemsChange","onSorterChange","onTableFilterChange","pagination","paginationProps","sorterValue","cilSwapVertical","cilArrowTop","cilArrowBottom","tableBodyProps","tableFootProps","tableFilter","tableFilterLabel","tableFilterPlaceholder","tableFilterValue","tableHeadProps","tableProps","_activePage","setActivePage","_items","setItems","_itemsPerPage","setItemsPerPage","setColumnFilterState","selectedAll","setSelectedAll","setSorterState","tableFilterState","setTableFilterState","isArray","sorterChange","isDataColumn","itemsDataColumns","includes","isSortable","resetable","columnFilterChange","isLazy","lazy","newState","tableFilterChange","clean","genCols","Object","keys","el","filteredColumns","external","entries","toLowerCase","filteredTable","find","valueContainFilter","val","sortedItems","col","flip","sort","item2","value2","a","b","numberOfPages","itemsOnActivePage","values","selected","e","onKeyUp","columnName","id","handleRowChecked","newArr","page","Number","itemsPerPageChange"],"sourceRoot":""}