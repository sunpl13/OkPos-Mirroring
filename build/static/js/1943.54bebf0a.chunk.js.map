{"version":3,"file":"static/js/1943.54bebf0a.chunk.js","mappings":"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","sources":["components/list/mall/ProductList.js","components/Modal/officialMall/OrderModal.js","pages/officialMall/order/OrderList.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {CSmartTable} from '../../custom/smart-table/CSmartTable'\nimport PropTypes from 'prop-types'\nimport {CBadge, CButton, CCol, CFormInput, CRow} from '@coreui/react'\nimport RangeDatePicker from '../../common/RangeDatePicker'\nimport moment from 'moment'\nimport {isPrice, maskString} from '../../../utils/utility'\nimport {getMallBadgeColor} from '../../../utils/badge/officalMall/Badge'\n\nconst ProductList = ({\n  items, // 리스트 아이템\n  onClick, // 리스트 클릭 이벤트 ex) Modal\n  columns, // 리스트의 헤더\n  className, // 리스트의 클레스 네임\n  datePickerHidden = true, // 기간선택 데이터 피커 출력 유무\n  setSelectedProduct, // radioButton 함수\n  onUpdateInvoice, // 송장번호 등록\n}) => {\n  // Local state 선언\n  const [listItems, setListItems] = useState([])\n  const [filterItems, setFilterItems] = useState()\n  const [showModal, setShowModal] = useState(false)\n\n  const [startDate, setStartDate] = useState('')\n  const [endDate, setEndDate] = useState('')\n\n  const [selectedItem, setSelectedItem] = useState(false)\n\n  // 함수 선언\n  const modalOnClick = () => {\n    setShowModal(!showModal)\n  }\n\n  useEffect(() => {\n    setListItems(items)\n  }, [items])\n\n  useEffect(() => {\n    // data picker 에 선택된 값\n    if (endDate) {\n      if (listItems[0]?.orderDate) {\n        setFilterItems(\n          listItems.filter(\n            value =>\n              moment(value.orderDate, 'YYYYMMDDHHmmss').format('YYYY-MM-DD') >= startDate &&\n              moment(value.orderDate, 'YYYYMMDDHHmmss').format('YYYY-MM-DD') <= endDate,\n          ),\n        )\n      } else {\n        // default 는 createdAt 그 외 하고 싶은 값은 위에 작성\n        setFilterItems(\n          listItems.filter(\n            value =>\n              moment(value.createdAt, 'YYYYMMDDHHmmss').format('YYYY-MM-DD') >= startDate &&\n              moment(value.createdAt, 'YYYYMMDDHHmmss').format('YYYY-MM-DD') <= endDate,\n          ),\n        )\n      }\n\n      // 생성일로 필터\n    } else {\n      setFilterItems('')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [endDate])\n\n  const onClickRadioButton = item => {\n    setSelectedItem(item)\n    setSelectedProduct(item)\n  }\n\n  const onClickStop = e => {\n    e.stopPropagation()\n  }\n\n  return (\n    <>\n      {datePickerHidden && (\n        <CRow className={'d-md-flex justify-content-md-end pt-2 pb-2'}>\n          <CButton className='me-md-2' color='success' size='sm'>\n            주문상태 변경\n          </CButton>\n          <CCol xs={4}>\n            <RangeDatePicker className='me-md-2' setStartDate={setStartDate} setEndDate={setEndDate} />\n          </CCol>\n        </CRow>\n      )}\n      <CSmartTable\n        items={filterItems || listItems}\n        columns={columns || null}\n        columnSorter\n        pagination\n        paginationProps={{\n          limit: 10,\n        }}\n        tableHeadProps={{\n          id: 'smTable',\n        }}\n        clickableRows\n        onRowClick={onClickRadioButton}\n        tableProps={{\n          hover: true,\n          responsive: true,\n          striped: true,\n          align: 'middle',\n          className: className,\n        }}\n        scopedColumns={{\n          radioButton: (item, index) => (\n            <td>\n              <input\n                id={`${index}`}\n                name='select-radio'\n                type='radio'\n                checked={item.orderItemId === selectedItem.orderItemId}\n                readOnly\n              />\n            </td>\n          ),\n          orderStatus: ({orderStatus}) => (\n            <td>\n              <CBadge size='sm' color={getMallBadgeColor(orderStatus)}>\n                {orderStatus}\n              </CBadge>\n            </td>\n          ),\n          invoiceNumber: item => (\n            <td>\n              {/* <CFormInput id={`${index}`} className='me-md-2' size='sm' onClick={e => setSelectedProduct(e, item)} />\n              <CButton id={`${index}`} className='invoiceNumberBtn' color='warning' size='sm' onClick={onUpdateInvoice}>\n                등록\n              </CButton> */}\n              {item.invoiceNumber}\n            </td>\n          ),\n          orderItemPrice: ({orderItemPrice}) => <td className='orderItemPrice'>{isPrice(orderItemPrice)}</td>,\n          totalPrice: ({totalPrice}) => <td className='totalPrice'>{isPrice(totalPrice)}</td>,\n          orderDate: ({orderDate}) => <td>{moment(orderDate, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n          payDate: ({payDate}) => <td>{moment(payDate, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n        }}\n        noItemsLabel={'데이터가 없습니다.'}\n        itemsPerPage={20}\n      />\n    </>\n  )\n}\n\nProductList.propTypes = {\n  items: PropTypes.array,\n  onClick: PropTypes.func,\n  columns: PropTypes.array,\n  className: PropTypes.string,\n  onDelete: PropTypes.func,\n  selectedOptions: PropTypes.object,\n  datePickerHidden: PropTypes.bool,\n  itemPerPageHidden: PropTypes.bool,\n}\n\nexport default ProductList\n","import {\n  CButton,\n  CFormInput,\n  CFormSelect,\n  CFormTextarea,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\nimport {useNavigate} from 'react-router-dom'\nimport ModalInput from '../../forms/inputForm/ModalInput'\nimport {useEffect, useState} from 'react'\nimport {isPrice} from '../../../utils/utility'\nimport {productListColumns} from '../../../utils/columns/officialMall/Columns'\nimport ProductList from '../../list/mall/ProductList'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\n\nconst OrderModal = ({value, visible, setVisible}) => {\n  // 모듈 선언\n  const navigate = useNavigate()\n\n  // Local state 선언\n  const [order, setOrder] = useState({\n    orderId: 0,\n    orderNumber: '',\n    name: '',\n    paymentMethod: '',\n    totalPrice: 0,\n    orderDate: '',\n    payDate: '',\n    receiver: '',\n    address: '',\n    normalNumber: '',\n    phoneNumber: '',\n    totalCount: '',\n    subInfos: [],\n  })\n\n  const [orderStatus, setOrderStatus] = useState('')\n  const [reason, setReason] = useState('')\n  const [invoice, setInvoice] = useState('')\n  const [selectedProduct, setSelectedProduct] = useState('')\n\n  // Life Cycle 선언\n  useEffect(() => {\n    if (visible) {\n      setOrder(value)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible])\n\n  const closeModal = () => {\n    setOrderStatus('')\n    setSelectedProduct('')\n    setVisible(false)\n  }\n\n  // 함수 선언\n  // Update OrderStatus\n  const onUpdateOrderStatus = async (orderItemId, orderStatus) => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.PATCH,\n        url: EndPoint.PATCH_MALL_ORDERS_STATUS,\n        path: {\n          orderItemId: orderItemId,\n        },\n        query: {\n          orderStatus: orderStatus,\n        },\n      })\n\n      if (!res?.isSuccess) {\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n\n      const findIndex = order.subInfos.findIndex(product => product.orderItemId === orderItemId)\n      let tempSubInfos = order.subInfos\n      tempSubInfos[findIndex].orderStatus = orderStatus\n      setOrder(order => ({...order, subInfos: tempSubInfos}))\n\n      alert(res?.message)\n    } catch (error) {\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 제품 상태 변경 API\n  const onUpdateOrderStatusReason = async (orderItemId, orderStatus, reason) => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.POST,\n        url: EndPoint.POST_MALL_ORDERS_STATUS,\n        path: {\n          orderItemId: orderItemId,\n        },\n        data: {\n          orderStatus: orderStatus,\n          reason: reason,\n        },\n      })\n\n      if (!res?.isSuccess) {\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n\n      const findIndex = order.subInfos.findIndex(product => product.orderItemId === orderItemId)\n      let tempSubInfos = order.subInfos\n      tempSubInfos[findIndex].orderStatus = orderStatus\n      setOrder(order => ({...order, subInfos: tempSubInfos}))\n\n      alert(res?.message)\n    } catch (error) {\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 제품 송장번호 등록\n  const onUpdateInvoice = async (orderItemId, invoiceNumber) => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.PATCH,\n        url: EndPoint.PATCH_MALL_ORDERS_INVOICE,\n        path: {\n          orderItemId: orderItemId,\n        },\n        data: {\n          invoiceNumber: invoiceNumber,\n        },\n      })\n\n      if (!res?.isSuccess) {\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n\n      const findIndex = order.subInfos.findIndex(product => product.orderItemId === orderItemId)\n      let tempSubInfos = order.subInfos\n      tempSubInfos[findIndex].invoiceNumber = invoiceNumber\n      setOrder(order => ({...order, subInfos: tempSubInfos}))\n      setSelectedProduct(tempSubInfos[findIndex])\n\n      alert(res?.message)\n    } catch (error) {\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // 취소 사유 값 저장\n  const onChangeReason = e => {\n    const {value} = e.target\n    setReason(value)\n  }\n  // 주문 상태 값 저장\n  const orderStatusChange = e => {\n    const {value} = e.target\n    setOrderStatus(value)\n  }\n  // 주문 상품 row 저장\n  const handleSelectedProduct = item => {\n    setSelectedProduct(item)\n  }\n  // 주문 상태 값 저장\n  const invoiceChange = e => {\n    const {value} = e.target\n    setInvoice(value)\n  }\n\n  // 주문상태 변경 함수\n  const handleOrderStatus = () => {\n    if (!orderStatus) return alert('주문상태를 선택해주세요.')\n    if (!selectedProduct.orderItemId) return alert('주문상품을 선택해주세요.')\n\n    if (window.confirm('주문 상태를 변경 하시겠습니까?')) {\n      if (orderStatus === '취소 요청' || orderStatus === '교환 요청') {\n        onUpdateOrderStatusReason(selectedProduct.orderItemId, orderStatus, reason)\n      } else {\n        onUpdateOrderStatus(selectedProduct.orderItemId, orderStatus)\n      }\n    }\n    setOrderStatus('')\n    setReason('')\n  }\n  // 주문 상태 값 저장\n  const handleOrderInvoice = () => {\n    if (!invoice) return alert('송장번호를 입력해주세요.')\n    if (invoice.length !== 11) return alert('송장번호를 확인해주세요.(11자리)')\n    if (!selectedProduct.orderItemId) return alert('주문상품을 선택해주세요.')\n\n    onUpdateInvoice(selectedProduct.orderItemId, invoice)\n  }\n\n  // 송장조회\n  const handleInvoicCheck = () => {\n    if (selectedProduct?.invoiceNumber) {\n      const {invoiceNumber} = selectedProduct\n      window.open('https://www.ilogen.com/web/personal/trace/' + invoiceNumber)\n    } else {\n      window.open('https://www.ilogen.com/web/personal/tkSearch')\n    }\n  }\n\n  return (\n    <CModal size='xl' visible={visible} onClose={closeModal}>\n      <CModalHeader>\n        <CModalTitle>주문 상세정보</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CRow className={'p-2'}>\n          <ModalInput id={'orderId'} placeholder={'User Id'} label={'No'} value={order.no} readOnly disabled />\n          <ModalInput\n            id={'orderNumber'}\n            placeholder={''}\n            label={'주문번호'}\n            value={order.orderNumber}\n            readOnly\n            disabled\n          />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput id={'name'} placeholder={''} label={'주문자'} value={order.name} readOnly disabled />\n          <ModalInput id={'receiver'} placeholder={''} label={'수취인'} value={order.receiver} readOnly disabled />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput\n            id={'normalNumber'}\n            placeholder={''}\n            label={'일반전화번호'}\n            value={order.normalNumber}\n            readOnly\n            disabled\n          />\n          <ModalInput\n            id={'phoneNumber'}\n            placeholder={''}\n            label={'휴대전화번호'}\n            value={order.phoneNumber}\n            readOnly\n            disabled\n          />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput\n            id={'totalCount'}\n            placeholder={''}\n            label={'주문 총수량'}\n            value={order.totalCount}\n            readOnly\n            disabled\n          />\n          <ModalInput id={'orderDate'} placeholder={''} label={'주문일'} value={order.orderDate} readOnly disabled />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput\n            id={'paymentMethod'}\n            placeholder={''}\n            label={'결제수단'}\n            value={order.paymentMethod}\n            readOnly\n            disabled\n          />\n          <ModalInput id={'payDate'} placeholder={''} label={'결제일'} value={order.payDate} readOnly disabled />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput\n            id={'totalPrice'}\n            placeholder={''}\n            label={'총 결제금액'}\n            value={isPrice(order.totalPrice)}\n            readOnly\n            disabled\n          />\n        </CRow>\n        <CRow className={'p-2'}>\n          <ModalInput id={'address'} placeholder={''} label={'주소'} value={order.address} readOnly disabled />\n        </CRow>\n        <br />\n        <ProductList\n          items={order.subInfos}\n          columns={productListColumns}\n          searchInputHidden={false}\n          datePickerHidden={false}\n          setSelectedProduct={handleSelectedProduct}\n          onUpdateInvoice={onUpdateInvoice}\n          className={'subInfos'}\n        />\n        <div className={'pb-2 d-md-flex justify-content-md-end'}>\n          <CFormSelect value={orderStatus} className='me-md-2 orderStatusForm' size='sm' onChange={orderStatusChange}>\n            <option>주문상태 선택</option>\n            <option value='결제 대기'>결제 대기</option>\n            <option value='결제 완료'>결제 완료</option>\n            <option value='배송 준비중'>배송 준비중</option>\n            <option value='배송중'>배송중</option>\n            <option value='배송 완료'>배송 완료</option>\n            <option value='취소 요청'>취소 요청</option>\n            <option value='교환 요청'>교환 요청</option>\n          </CFormSelect>\n          <CButton className='me-md-2' color='success' size='sm' onClick={handleOrderStatus}>\n            주문상태 변경\n          </CButton>\n          <CFormInput\n            className='me-md-2 orderInvoiceForm'\n            placeholder='송장번호 입력'\n            size='sm'\n            onChange={invoiceChange}\n          />\n          <CButton className='me-md-2' color='warning' size='sm' onClick={handleOrderInvoice}>\n            송장등록\n          </CButton>\n          <CButton color='warning' size='sm' onClick={handleInvoicCheck}>\n            송장조회\n          </CButton>\n        </div>\n        {orderStatus === '취소 요청' && (\n          <CFormTextarea\n            id='reason'\n            placeholder={'취소 사유를 입력해 주세요'}\n            rows='3'\n            value={reason}\n            onChange={onChangeReason}\n          />\n        )}\n        {orderStatus === '교환 요청' && (\n          <CFormTextarea\n            id='reason'\n            placeholder={'교환 사유를 입력해 주세요'}\n            rows='3'\n            value={reason}\n            onChange={onChangeReason}\n          />\n        )}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color='secondary' onClick={closeModal}>\n          취소\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default OrderModal\n","import React, {useEffect, useState} from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport {CCard, CCardBody, CCol, CFormLabel, CFormSelect, CRow} from '@coreui/react'\nimport OrderModal from '../../../components/Modal/officialMall/OrderModal'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {orderListColumns} from '../../../utils/columns/officialMall/Columns'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport {isEmpty} from '../../../utils/utility'\nimport OrderTableList from '../../../components/list/mall/OrderTableList'\n\nconst OrderList = () => {\n  // 모듈 선언\n  const navigate = useNavigate()\n\n  // Local state 선언\n  const [orderList, setOrderList] = useState([])\n  const [selectedItem, setSelectedItem] = useState({})\n  const [showModal, setShowModal] = useState(false)\n\n  // API 통신 함수\n  const onLoadMallorderList = async orderStatus => {\n    try {\n      const {data: res} = await ApiConfig.request({\n        method: HttpMethod.GET,\n        url: EndPoint.GET_MALL_ORDERS,\n        query: {\n          orderStatus: orderStatus || '',\n        },\n      })\n\n      if (!res?.isSuccess || isEmpty(res?.result)) {\n        console.log('loadMallorderList error')\n        if (res?.code === 2014) {\n          navigate('/login')\n        } else {\n          alert(res?.message)\n        }\n        return\n      }\n      setOrderList(\n        res.result.responses.map((item, index) => {\n          return {...item, no: res.result.responses.length - index}\n        }),\n      )\n    } catch (error) {\n      console.log(error)\n      alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.')\n    }\n  }\n\n  // Life Cycle 선언\n  useEffect(() => {\n    onLoadMallorderList()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  // 함수 선언\n\n  // Open Modal\n  const handleShowUserDetailModal = item => {\n    setSelectedItem(item)\n    setShowModal(!showModal)\n  }\n\n  return (\n    <CRow>\n      <PageHeader title='주문 관리' />\n      <CCol xs={12}>\n        <CCard className='mb-4'>\n          <CCardBody>\n            <OrderTableList\n              items={orderList}\n              onClick={handleShowUserDetailModal}\n              columns={orderListColumns}\n              onLoadMallorderList={onLoadMallorderList}\n              datePicker\n              dataSearch\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <OrderModal\n        value={selectedItem}\n        visible={showModal}\n        setVisible={setShowModal}\n        onLoadMallorderList={onLoadMallorderList}\n        readOnly\n      />\n    </CRow>\n  )\n}\n\nexport default OrderList\n"],"names":["_ref","items","onClick","columns","className","datePickerHidden","setSelectedProduct","onUpdateInvoice","listItems","setListItems","useState","filterItems","setFilterItems","showModal","setShowModal","startDate","setStartDate","endDate","setEndDate","selectedItem","setSelectedItem","useEffect","_listItems$","orderDate","filter","value","moment","format","createdAt","_jsxs","_Fragment","children","CRow","_jsx","CButton","color","size","CCol","xs","RangeDatePicker","CSmartTable","columnSorter","pagination","paginationProps","limit","tableHeadProps","id","clickableRows","onRowClick","item","tableProps","hover","responsive","striped","align","scopedColumns","radioButton","index","concat","name","type","checked","orderItemId","readOnly","orderStatus","_ref2","CBadge","getMallBadgeColor","invoiceNumber","orderItemPrice","_ref3","isPrice","totalPrice","_ref4","_ref5","payDate","_ref6","noItemsLabel","itemsPerPage","visible","setVisible","navigate","useNavigate","order","setOrder","orderId","orderNumber","paymentMethod","receiver","address","normalNumber","phoneNumber","totalCount","subInfos","setOrderStatus","reason","setReason","invoice","setInvoice","selectedProduct","closeModal","async","data","res","ApiConfig","request","method","HttpMethod","PATCH","url","EndPoint","PATCH_MALL_ORDERS_INVOICE","path","isSuccess","code","alert","message","findIndex","product","tempSubInfos","error","onChangeReason","e","target","CModal","onClose","CModalHeader","CModalTitle","CModalBody","ModalInput","placeholder","label","no","disabled","ProductList","productListColumns","searchInputHidden","CFormSelect","onChange","handleOrderStatus","window","confirm","POST","POST_MALL_ORDERS_STATUS","onUpdateOrderStatusReason","PATCH_MALL_ORDERS_STATUS","query","onUpdateOrderStatus","CFormInput","handleOrderInvoice","length","handleInvoicCheck","open","CFormTextarea","rows","CModalFooter","OrderList","orderList","setOrderList","onLoadMallorderList","GET","GET_MALL_ORDERS","isEmpty","result","console","log","responses","map","PageHeader","title","CCard","CCardBody","OrderTableList","orderListColumns","datePicker","dataSearch","OrderModal"],"sourceRoot":""}