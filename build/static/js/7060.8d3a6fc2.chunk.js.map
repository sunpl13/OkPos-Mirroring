{"version":3,"file":"static/js/7060.8d3a6fc2.chunk.js","mappings":"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","sources":["components/Modal/partnerCenter/DetailModalTemplate.js","components/Modal/partnerCenter/inquiry/InquiryDetailModal.js","pages/partnerCenter/inquiry/InquiryList.js"],"sourcesContent":["import React from 'react'\nimport {CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle} from '@coreui/react'\n\nconst DetailModalTemplate = ({visible, title, children, setVisible, upDate, onDelete, btnText, notEditBtn}) => {\n  return (\n    <CModal size='lg' visible={visible} onClose={() => setVisible(false)}>\n      <CModalHeader>\n        <CModalTitle>{title || 'Not Title'}</CModalTitle>\n      </CModalHeader>\n      <CModalBody>{children || <h1>Not Children</h1>}</CModalBody>\n      <CModalFooter>\n        {!notEditBtn && (\n          <CButton onClick={() => upDate()} color={'primary'}>\n            {btnText || 'Not Btn Title'}\n          </CButton>\n        )}\n        {onDelete && (\n          <CButton onClick={() => onDelete()} color={'danger'}>\n            삭제\n          </CButton>\n        )}\n        <CButton color='secondary' onClick={() => setVisible(false)}>\n          닫기\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default DetailModalTemplate\n","import {CForm, CFormLabel, CFormTextarea, CRow} from '@coreui/react'\nimport ModalInput from '../../../forms/inputForm/ModalInput'\nimport ModalFilesInput from '../../../forms/inputForm/ModalFilesInput'\nimport DetailModalTemplate from '../DetailModalTemplate'\nimport ModalQuillEditor from '../../../forms/inputForm/ModalQuillEditor'\nimport ModalFilesView from '../../../forms/inputForm/ModalFilesView'\nimport ModalTextarea from '../../../forms/inputForm/ModalTextarea'\nimport ModalTextArrayInput from '../../../forms/inputForm/ModalTextArrayInput'\n\nconst InquiryDetailModal = ({upDate, setValue, value, visible, setVisible, onDelete, editor}) => {\n  const {id, userName, userPhoneNum, content, inquiryCategory, inquiryFiles, inquiryReplies} = value\n  return (\n    <DetailModalTemplate\n      visible={visible}\n      title={'문의 상세 보기'}\n      setVisible={setVisible}\n      upDate={upDate}\n      btnText={inquiryReplies?.length !== 0 ? '수정' : '답변등록'}\n      onDelete={onDelete}\n    >\n      <CRow className={'p-2'}>\n        <ModalInput id={'id'} placeholder={'문의 번호'} label={'문의 번호'} value={id} readOnly disabled />\n        <ModalInput id={'userName'} placeholder={'회원 이름'} label={'회원 이름'} value={userName} readOnly disabled />\n      </CRow>\n      <CRow className={'p-2'}>\n        <ModalInput\n          id={'inquiryCategory'}\n          placeholder={'문의 유형'}\n          label={'문의 유형'}\n          value={inquiryCategory}\n          readOnly\n          disabled\n        />\n        <ModalInput\n          id={'phoneNumber'}\n          placeholder={'휴대전화번호'}\n          label={'휴대전화번호'}\n          value={userPhoneNum}\n          readOnly\n          disabled\n        />\n      </CRow>\n      <CRow className={'p-2'}>\n        <ModalTextArrayInput id='userInquiry' value={content} readOnly={true} disabled rows={9} label={'문의 내용'} />\n      </CRow>\n      <CRow className={'p-2'}>\n        <CFormLabel>{'첨부파일'}</CFormLabel>\n        <ModalFilesView fileItem={inquiryFiles} />\n      </CRow>\n      <br />\n      <CRow className={'p-2'}>\n        <ModalQuillEditor id='content' label={'문의 답변'} value={editor} setValue={setValue} />\n      </CRow>\n      <br />\n      <br />\n    </DetailModalTemplate>\n  )\n}\n\nexport default InquiryDetailModal\n","import React, {useEffect, useState} from 'react'\nimport {CCard, CCardBody, CCol, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport InquiryDetailModal from '../../../components/Modal/partnerCenter/inquiry/InquiryDetailModal'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {userInquiryListColumns} from '../../../utils/columns/partnerCenter/Columns'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport {isEmpty} from '../../../utils/utility'\n\nconst InquiryList = () => {\n  const [items, setItems] = useState([])\n  const [selectedItem, setSelectedItem] = useState({})\n  const [editCheck, setEditCheck] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [editor, setEditor] = useState('')\n\n  // 1:1 문의 리스트 API\n  const getList = async () => {\n    try {\n      const {\n        data: {result, isSuccess, code, message},\n      } = await ApiConfig.request({\n        method: HttpMethod.GET,\n        url: EndPoint.GET_PARTNER_INQUIRIES,\n      })\n      if (!isSuccess || isEmpty(result)) {\n        return alert(message)\n      }\n      if (code === 1000) {\n        setItems(result.inquiryPartnerDTOs)\n      } else {\n        alert(message)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getList()\n  }, [])\n\n  /** Open Modal*/\n  const handleShowModal = async ({id}) => {\n    setShowModal(!showModal)\n    try {\n      const {\n        data: {result, isSuccess, code, message},\n      } = await ApiConfig.request({\n        method: HttpMethod.GET,\n        url: `${EndPoint.GET_PARTNER_INQUIRIES}/${id}`,\n      })\n      if (!isSuccess || isEmpty(result)) {\n        return alert(message)\n      }\n      if (code === 1000) {\n        setSelectedItem(result)\n        setEditCheck(result.inquiryReplies)\n        if (result.inquiryReplies.length !== 0) {\n          setEditor(result.inquiryReplies[result.inquiryReplies.length - 1].content)\n        }\n      } else {\n        alert(message)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // 1:1 문의 삭제\n  const handleInquiryModalOnDelete = async () => {\n    const {id} = selectedItem\n    if (window.confirm('정말 삭제하시겠습니까?')) {\n      try {\n        const {\n          data: {result, isSuccess, code, message},\n        } = await ApiConfig.request({\n          method: HttpMethod.PATCH,\n          url: `${EndPoint.GET_PARTNER_INQUIRIES}/reply/${id}`,\n        })\n        if (!isSuccess || isEmpty(result)) {\n          return alert(message)\n        }\n        if (code === 1000) {\n          alert(message)\n          window.location.reload()\n        } else {\n          alert(message)\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  // Editor onChange\n  const handleInquiryModalOnChange = htmlTagValue => {\n    setEditor(htmlTagValue)\n  }\n\n  // 1 : 1 문이 업데이트\n  const handleInquiryModalUpdate = async () => {\n    const {id} = selectedItem\n    if (editCheck.length !== 0) {\n      if (window.confirm('답변을 수정하시겠습니까?')) {\n        if (!editor) return alert('답변을 작성해 주세요.')\n        try {\n          const {\n            data: {result, isSuccess, code, message},\n          } = await ApiConfig.request({\n            method: HttpMethod.PUT,\n            url: `${EndPoint.GET_PARTNER_INQUIRIES}/reply/${id}`,\n            data: {\n              content: editor,\n            },\n          })\n          if (!isSuccess || isEmpty(result)) {\n            return alert(message)\n          }\n          if (code === 1000) {\n            setShowModal(false)\n            return alert(message)\n          } else {\n            alert(message)\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      }\n    } else if (window.confirm('답변을 등록하시겠습니까?')) {\n      if (!editor) return alert('답변을 작성해 주세요.')\n      try {\n        const {\n          data: {result, isSuccess, code, message},\n        } = await ApiConfig.request({\n          method: HttpMethod.POST,\n          url: `${EndPoint.GET_PARTNER_INQUIRIES}/${id}/reply`,\n          data: {\n            content: editor,\n          },\n        })\n        if (!isSuccess || isEmpty(result)) {\n          return alert(message)\n        }\n        if (code === 1000) {\n          setShowModal(false)\n          return alert(message)\n        } else {\n          alert(message)\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n  useEffect(() => {\n    if (!showModal) {\n      setEditor('')\n    }\n  }, [showModal])\n\n  return (\n    <CRow>\n      <PageHeader title='1 : 1 문의 리스트' />\n      <CCol xs={12}>\n        <CCard className='mb-4'>\n          <CCardBody>\n            <ListTemplate\n              items={items}\n              onClick={handleShowModal}\n              columns={userInquiryListColumns}\n              className={'userList'}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <InquiryDetailModal\n        visible={showModal}\n        setVisible={setShowModal}\n        value={selectedItem}\n        onChange={handleInquiryModalOnChange}\n        upDate={handleInquiryModalUpdate}\n        onDelete={handleInquiryModalOnDelete}\n        editor={editor}\n        setValue={setEditor}\n      />\n    </CRow>\n  )\n}\n\nexport default InquiryList\n"],"names":["visible","title","children","setVisible","upDate","onDelete","btnText","notEditBtn","size","onClose","onClick","color","setValue","value","editor","id","userName","userPhoneNum","content","inquiryCategory","inquiryFiles","inquiryReplies","DetailModalTemplate","length","className","ModalInput","placeholder","label","readOnly","disabled","ModalTextArrayInput","rows","ModalFilesView","fileItem","ModalQuillEditor","useState","items","setItems","selectedItem","setSelectedItem","editCheck","setEditCheck","showModal","setShowModal","setEditor","getList","ApiConfig","method","HttpMethod","url","EndPoint","data","result","isSuccess","code","message","isEmpty","alert","inquiryPartnerDTOs","console","log","useEffect","handleShowModal","handleInquiryModalOnDelete","window","confirm","location","reload","handleInquiryModalUpdate","PageHeader","xs","ListTemplate","columns","userInquiryListColumns","onChange","htmlTagValue"],"sourceRoot":""}