{"version":3,"file":"static/js/5706.9a5d263e.chunk.js","mappings":"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","sources":["components/forms/inputForm/ModalSelect.js","components/Modal/partnerCenter/notice/NoticeDetailModal.js","pages/partnerCenter/notice/NoticeList.js","utils/columns/partnerCenter/ColumnsSelectData.js"],"sourcesContent":["import {CCol, CFormSelect, CFormLabel} from '@coreui/react'\nimport * as PorpTypes from 'prop-types'\n\nconst ModalSelect = ({\n  onChange,\n  size,\n  placeholder,\n  label,\n  value,\n  readOnly,\n  id,\n  xs,\n  disabled = false,\n  isRequired,\n  options,\n}) => {\n  const newOptions = options.map(item => (\n    <option key={item.key} value={item.key}>\n      {item.value}\n    </option>\n  ))\n\n  return (\n    <>\n      <CFormLabel htmlFor='staticEmail' className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol xs={xs}>\n        <CFormSelect value={value} disabled={disabled} id={id} size={size} onChange={onChange} readOnly={readOnly}>\n          <option>{placeholder}</option>\n          {newOptions}\n        </CFormSelect>\n      </CCol>\n    </>\n  )\n}\n\nModalSelect.propTypes = {\n  onChange: PorpTypes.func,\n  size: PorpTypes.string,\n  placeholder: PorpTypes.string,\n  label: PorpTypes.string,\n  value: PorpTypes.any,\n  readOnly: PorpTypes.bool,\n  id: PorpTypes.string,\n  disabled: PorpTypes.bool,\n  isRequired: PorpTypes.bool,\n  options: PorpTypes.any,\n}\n\nexport default ModalSelect\n","import {CCol, CRow} from '@coreui/react'\nimport ModalInput from '../../../forms/inputForm/ModalInput'\nimport React, {useEffect} from 'react'\nimport ModalFilesInput from '../../../forms/inputForm/ModalFilesInput'\nimport ModalSelect from '../../../forms/inputForm/ModalSelect'\nimport DetailModalEditModeTemplate from '../DetailModalEditModeTemplate'\nimport ModalQuillEditor from '../../../forms/inputForm/ModalQuillEditor'\nimport MultiFileDownloadForm from '../../../forms/downloadForm/MultiFileDownloadForm'\nimport {inquiryTypes} from '../../../../utils/columns/partnerCenter/ColumnsSelectData'\nimport ModalImageInput from '../../../forms/inputForm/ModalImageInput'\n\nconst NoticeDetailModal = ({\n  value,\n  visible,\n  setVisible,\n  onChange,\n  upDate,\n  setEditor,\n  editor,\n  onDelete,\n  editMode,\n  setEditMode,\n}) => {\n  const {id, title, noticeFiles, noticeImages, category} = value\n  console.log('')\n  useEffect(() => {\n    if (!id) {\n      setEditMode(false)\n    }\n  }, [value])\n  console.log(value)\n  return (\n    <DetailModalEditModeTemplate\n      visible={visible}\n      title={id ? '공지사항' : '공지사항 등록'}\n      setVisible={setVisible}\n      upDate={upDate}\n      btnText={id ? '수정' : '등록'}\n      onDelete={id && onDelete}\n      editMode={id && editMode}\n      setEditMode={id && setEditMode}\n    >\n      <CRow className={'p-2'}>\n        <ModalInput\n          id={'title'}\n          placeholder={'공지사항 제목'}\n          label={'공지사항 제목'}\n          value={title || ''}\n          onChange={onChange}\n          readOnly={id && editMode}\n          disabled={id && editMode}\n        />\n        <ModalSelect\n          id={'category'}\n          placeholder={'카테고리를 선택해 주세요'}\n          label={'카테고리'}\n          options={inquiryTypes}\n          value={category || ''}\n          onChange={onChange}\n          readOnly={id && editMode}\n          disabled={id && editMode}\n        />\n      </CRow>\n      {!editMode ? (\n        <CRow className={'p-2'}>\n          <ModalFilesInput\n            id={'files'}\n            type={'file'}\n            placeholder={'파일 첨부'}\n            label={'파일 첨부'}\n            value={noticeFiles}\n            onChange={onChange}\n            readOnly={id && editMode}\n            disabled={id && editMode}\n          />\n        </CRow>\n      ) : (\n        <CCol className={'p-2'}>\n          <MultiFileDownloadForm\n            id={'files'}\n            type={'file'}\n            placeholder={'첨부 파일'}\n            label={'첨부 파일'}\n            value={noticeFiles}\n            onChange={onChange}\n            readOnly={id && editMode}\n            disabled={id && editMode}\n          />\n        </CCol>\n      )}\n      <CRow className={'p-2'}>\n        <ModalImageInput label={'이미지'} readOnly={id && editMode} fileList={noticeImages} />\n      </CRow>\n      <CRow className={'p-2'}>\n        <ModalQuillEditor\n          id='content'\n          label={'공지사항 본문'}\n          value={editor}\n          setValue={setEditor}\n          readOnly={id && editMode}\n          disabled={id && editMode}\n        />\n      </CRow>\n      <br />\n    </DetailModalEditModeTemplate>\n  )\n}\n\nexport default NoticeDetailModal\n","import React, {useEffect, useState} from 'react'\nimport {CButton, CCard, CCardBody, CCardHeader, CCol, CForm, CRow} from '@coreui/react'\nimport PageHeader from '../../../components/common/PageHeader'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport NoticeDetailModal from '../../../components/Modal/partnerCenter/notice/NoticeDetailModal'\nimport {noticeList} from '../../../utils/columns/partnerCenter/Columns'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport {isEmpty} from '../../../utils/utility'\nimport Axios from 'axios'\n\nconst NoticeList = () => {\n  const [items, setItems] = useState()\n  const [selectedItem, setSelectedItem] = useState({})\n  const [editCheck, setEditCheck] = useState({})\n  const [editor, setEditor] = useState('')\n  const [showModal, setShowModal] = useState(false)\n  const [editMode, setEditMode] = useState(true)\n\n  // 공지사항 API\n  const getList = async () => {\n    try {\n      const {\n        data: {isSuccess, result, code, message},\n      } = await ApiConfig.request({\n        method: HttpMethod.GET,\n        url: EndPoint.PARTNER_NOTICES,\n      })\n      if (!isSuccess || isEmpty(result)) {\n        return alert(message)\n      }\n      if (code === 1000) {\n        console.log(result)\n        setItems(result?.adminNoticePartnerDTOs)\n      } else {\n        alert(message)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    getList()\n  }, [])\n\n  /** Open Modal*/\n  const handleShowModal = async ({id}) => {\n    setShowModal(!showModal)\n    if (id) {\n      try {\n        const {\n          data: {isSuccess, result, code, message},\n        } = await ApiConfig.request({\n          method: HttpMethod.GET,\n          url: `${EndPoint.PARTNER_NOTICES}/${id}`,\n        })\n        if (!isSuccess || isEmpty(result)) {\n          return\n        }\n        if (code === 1000) {\n          setSelectedItem({\n            id: id,\n            ...result,\n          })\n          setEditCheck(result)\n          setEditor(result.content)\n        } else {\n          alert(message)\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    } else {\n      setSelectedItem({\n        title: '',\n        category: '',\n        content: '',\n        noticeFiles: [],\n        noticeImages: [],\n      })\n      setEditCheck({\n        title: '',\n        category: '',\n        content: '',\n        noticeFiles: [],\n        noticeImages: [],\n      })\n      setEditor('')\n    }\n  }\n  // Detail Modal\n  const handleNoticeModalOnChange = ({target: {id, value}}) => {\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n\n  const handleNoticeDetailModalUpdate = async () => {\n    const {id, title, noticeFiles, noticeImages, category, isApplicationNotice} = selectedItem\n    const json = JSON.stringify({\n      title: title,\n      content: editor,\n      category: '기타',\n      isApplicationNotice: !!isApplicationNotice,\n      files: {},\n      images: [],\n    })\n    if (id && (editCheck.title !== title || editCheck.content !== editor || editCheck.category !== category)) {\n      if (window.confirm('공지사항을 수정하시겠습니까?')) {\n        if (!title) return alert('공지사항 제목을 입력해 주세요.')\n        //if (noticeFiles.length === 0) return alert('파일을 등록해 주세요.')\n        //if (noticeImages.length === 0) return alert('이미지를 등록해 주세요.')\n        if (!editor) return alert('공지사항 본문을 작성해 주세요.')\n        if (!category) return alert('카테고리를 선택해 주세요.')\n        console.log(json)\n        try {\n          const {\n            data: {isSuccess, result, code, message},\n          } = await ApiConfig.request({\n            method: HttpMethod.PUT,\n            url: `${EndPoint.PARTNER_NOTICES}/${id}`,\n            data: json,\n          })\n          console.log(message, result)\n          if (!isSuccess || isEmpty(result)) {\n            return alert(message)\n          }\n          if (code === 1000) {\n            setShowModal(false)\n            return alert(message)\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      } else {\n        setShowModal(false)\n      }\n    } else if (!id && (title || editor || category)) {\n      if (window.confirm('공지사항을 등록하시겠습니까?')) {\n        if (!title) return alert('공지사항 제목을 입력해 주세요.')\n        //if (!category) return alert('카테고리를 선택해 주세요.')\n        if (!editor) return alert('공지사항 본문을 입력해 주세요.')\n        console.log(json)\n        try {\n          const {\n            data: {isSuccess, result, code, message},\n          } = await ApiConfig.request({\n            method: HttpMethod.POST,\n            url: EndPoint.PARTNER_NOTICES,\n            data: json,\n          })\n          if (!isSuccess || isEmpty(result)) {\n            return alert(message)\n          }\n          if (code === 1000) {\n            alert(message)\n            window.location.reload()\n          } else {\n            alert(message)\n          }\n        } catch (error) {\n          return alert(error)\n        }\n      }\n      setShowModal(false)\n    }\n  }\n\n  // onDelete\n  const handleNoticeDeleteBtnOnClick = async () => {\n    const {id} = selectedItem\n    if (window.confirm('해당 공지사항을 삭제하시겠습니까?')) {\n      try {\n        const {\n          data: {isSuccess, result, code, message},\n        } = await ApiConfig.request({\n          method: HttpMethod.PATCH,\n          url: `${EndPoint.PARTNER_NOTICES}/${id}`,\n        })\n        if (!isSuccess || isEmpty(result)) {\n          window.location.reload()\n          return alert(message)\n        }\n\n        if (code === 1000) {\n          alert(message)\n          window.location.reload()\n        } else {\n          alert(message)\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (!showModal) {\n      setEditor('')\n      setEditMode(true)\n    }\n  }, [showModal])\n\n  return (\n    <CRow>\n      <PageHeader title='공지사항 리스트' />\n      <CCol xs={12}>\n        <CCard className='mb-4'>\n          <CCardHeader>\n            <CForm className='row g-3'>\n              <CCol xs={1}>\n                <CButton color='primary' onClick={handleShowModal}>\n                  추가\n                </CButton>\n              </CCol>\n            </CForm>\n          </CCardHeader>\n          <CCardBody>\n            <ListTemplate items={items} onClick={handleShowModal} columns={noticeList} className={'userList'} />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <NoticeDetailModal\n        visible={showModal}\n        setVisible={setShowModal}\n        value={selectedItem}\n        onChange={handleNoticeModalOnChange}\n        upDate={handleNoticeDetailModalUpdate}\n        editor={editor}\n        setEditor={setEditor}\n        onDelete={handleNoticeDeleteBtnOnClick}\n        editMode={editMode}\n        setEditMode={setEditMode}\n      />\n    </CRow>\n  )\n}\n\nexport default NoticeList\n","exports.deliveryStatusOptions = {\n  1: '결제 완료',\n  2: '배송 준비중',\n  3: '배송중',\n  4: '배송 완료',\n}\nexports.inquiryTypes = [\n  {key: 'MANUAL', value: '매뉴얼'},\n  {key: 'DRIVE', value: '드라이브'},\n]\n\nexports.inquiryTypess = [\n  {key: 'MANUAL', value: '매뉴얼'},\n  {key: 'DRIVE', value: '드라이브'},\n]\n"],"names":["onChange","size","placeholder","label","value","readOnly","id","xs","disabled","isRequired","newOptions","options","map","item","key","htmlFor","className","visible","setVisible","upDate","setEditor","editor","onDelete","editMode","setEditMode","title","noticeFiles","noticeImages","category","console","log","useEffect","DetailModalEditModeTemplate","btnText","ModalInput","ModalSelect","inquiryTypes","MultiFileDownloadForm","type","ModalFilesInput","ModalImageInput","fileList","ModalQuillEditor","setValue","useState","items","setItems","selectedItem","setSelectedItem","editCheck","setEditCheck","showModal","setShowModal","getList","ApiConfig","method","HttpMethod","url","EndPoint","data","isSuccess","result","code","message","isEmpty","alert","adminNoticePartnerDTOs","handleShowModal","content","handleNoticeDetailModalUpdate","isApplicationNotice","json","JSON","stringify","files","images","window","confirm","location","reload","handleNoticeDeleteBtnOnClick","PageHeader","color","onClick","ListTemplate","columns","noticeList","target","exports"],"sourceRoot":""}