{"version":3,"file":"static/js/1466.38c8f231.chunk.js","mappings":"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","sources":["components/custom/Modal/CCustomModalHeader.tsx","components/forms/inputForm/ModalImageInput.js","components/forms/inputForm/ModalInput.js","utils/columns/EnHomePage/rollingBanner/Columns.js","components/Modal/EnHomePage/rollingBanner/RollingBannerDetail.js","pages/EnHomePage/rollingBanner/RollingBanner.js","../node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","../node_modules/@ant-design/icons/es/icons/PlusOutlined.js"],"sourcesContent":["interface IProps {\n  children:JSX.Element | string\n  onClick: ()=>void\n}\n\nconst CCustomModalHeader = ({children,onClick}: IProps) => {\n  return (\n    <div className='modal-header'>\n    <h5 className='modal-title'>{children}</h5>\n    <button type='button' className='btn btn-close' onClick={onClick} aria-label='Close'></button>\n  </div>\n  )\n}\n\nexport default CCustomModalHeader","import {PlusOutlined} from '@ant-design/icons'\nimport {Upload} from 'antd'\nimport React, {useEffect, useState} from 'react'\nimport {CCol, CFormLabel, CImage, CPopover} from '@coreui/react'\nimport styled from 'styled-components'\nimport AWS from 'aws-sdk'\nimport {antdImageFormat, returnBucketName} from '../../../utils/awsCustom'\n\nconst getBase64 = file =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = () => resolve(reader.result)\n    reader.onerror = error => reject(error)\n  })\n\nconst ModalImageInput = ({\n  images,\n  id,\n  label,\n  fileList,\n  setFileList,\n  imgPath,\n  isRequired,\n  readOnly,\n  oneSheet = false,\n  maxFileLength = 1,\n}) => {\n  const [previewOpen, setPreviewOpen] = useState(false)\n  const [previewImage, setPreviewImage] = useState('')\n  const [previewTitle, setPreviewTitle] = useState('')\n\n  useEffect(() => {\n    if (images && images.length > 0) {\n      setFileList(\n        images.map(path => ({\n          uid: path,\n          name: decodeURI(path.split('/')[path.split('/').length - 1]),\n          status: 'done',\n          url: antdImageFormat(path),\n        })),\n      )\n    }\n  }, [images, setFileList])\n\n  const handleCloseImage = () => {\n    setPreviewImage('')\n  }\n\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj)\n    }\n\n    setPreviewImage(file.url || file.preview)\n    setPreviewOpen(true)\n    setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\n  }\n\n  const onSuccess = successData => {\n    const httpRequest = successData.request.httpRequest\n    const file = httpRequest.body\n    const {protocol, host} = httpRequest.endpoint\n    const fileData = {\n      uid: successData.request.params.Key,\n      name: file.name,\n      status: 'done',\n      url: `${protocol}//${host}${httpRequest.path}`,\n    }\n\n    setFileList([...fileList, fileData])\n  }\n\n  const customReq = ({file, onError, onProgress, onSuccess}) => {\n    if (oneSheet && fileList.length === maxFileLength) {\n      alert(`이미지는 최대 ${maxFileLength}개만 등록 가능합니다!`)\n      return\n    }\n    AWS.config.update({\n      region: process.env.REACT_APP_AWS_REGION,\n      accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n      secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n    })\n\n    const S3 = new AWS.S3()\n    const fileName = file.name.replaceAll(' ', '')\n\n    const objParams = {\n      Bucket: returnBucketName(imgPath),\n      Key: fileName,\n      Body: file,\n      ContentType: file.type, // TODO: You should set content-type because AWS SDK will not automatically set file MIME\n    }\n\n    const upload = S3.putObject(objParams)\n      .on('httpUploadProgress', ({loaded, total}) => onProgress({percent: (loaded / total) * 100}))\n      .promise()\n    upload.then(\n      function (data) {\n        onSuccess(data.$response)\n      },\n      function (error) {\n        onError()\n        console.log(error.code)\n        console.log(error.message)\n      },\n    )\n  }\n\n  const onDelete = item => {\n    setFileList(fileList.filter(file => file.uid !== item.uid))\n  }\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{marginTop: 8}}>Upload</div>\n    </div>\n  )\n\n  const notFiles = <div>Have No Image.</div>\n\n  return (\n    <>\n      <CFormLabel htmlFor={`${id}Static`} className='col-form-label'>\n        <span className={isRequired && 'required'}>{label || ' * '}</span>\n      </CFormLabel>\n      <Upload\n        listType='picture-card'\n        fileList={fileList}\n        onPreview={handlePreview}\n        onSuccess={data => onSuccess(data)}\n        onRemove={data => onDelete(data)}\n        customRequest={reqData => customReq(reqData)}\n        disabled={readOnly}\n      >\n        {fileList?.length >= 8\n          ? null\n          : fileList?.length === 0\n          ? !readOnly\n            ? uploadButton\n            : notFiles\n          : !readOnly\n          ? uploadButton\n          : null}\n      </Upload>\n      {previewImage && (\n        <CCol>\n          <CFormLabel className='col-form-label w-75'>\n            <ImageTitleBox>\n              <span>{previewTitle || ''}</span>\n            </ImageTitleBox>\n          </CFormLabel>\n          <PreviewImageBox className={'text-center p-2'}>\n            <div>\n              <CImage rounded alt='example' onClick={() => handleCloseImage()} src={previewImage} />\n            </div>\n          </PreviewImageBox>\n        </CCol>\n      )}\n    </>\n  )\n}\n\nexport default ModalImageInput\n\nconst PreviewImageBox = styled(CCol)`\n  padding: 0.5rem 0;\n  background: #fafafa;\n  border: 1px dashed #d9d9d9;\n  border-radius: 2px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  div {\n    width: 75%;\n\n    & img {\n      max-width: 100%;\n      height: auto;\n      cursor: pointer;\n      max-height: 600px;\n    }\n  }\n`\nconst ImageTitleBox = styled.div`\n  width: 100%;\n  padding: 0 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n","import {CCol, CFormInput, CFormLabel} from '@coreui/react'\nimport React from 'react'\n\nconst ModalInput = ({type, onChange, id, placeholder, value, label, readOnly, disabled, isRequired, xs}) => {\n  return (\n    <>\n      <CFormLabel htmlFor={`${id}Static`} className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol className='align-items-center' xs={xs} style={{display: 'flex'}}>\n        <CFormInput\n          type={type || 'text'}\n          id={id}\n          placeholder={placeholder || ''}\n          value={type === 'file' ? undefined : value || ''}\n          onChange={onChange}\n          readOnly={readOnly}\n          disabled={disabled}\n        />\n      </CCol>\n    </>\n  )\n}\n\nexport default ModalInput\n","export const rollingBannerColumns = [\n  {\n    key: 'no',\n    label: 'No',\n    _props: {color: 'primary', className: 'no'},\n    filter: false,\n  },\n  {\n    key: 'title',\n    label: '배너 타이틀',\n    _props: {color: 'primary', className: 'title'},\n  },\n  {\n    key: 'image',\n    label: '배너 이미지',\n    _props: {color: 'primary', className: 'image'},\n    filter: false,\n    sorter: false,\n  },\n]\n","import {useState} from 'react'\nimport {CModal, CButton, CModalBody, CModalFooter, CRow} from '@coreui/react'\nimport ModalInput from '../../../forms/inputForm/ModalInput'\nimport {isEmpty} from '../../../../utils/utility'\nimport ModalImageInput from '../../../forms/inputForm/ModalImageInput'\nimport {sendImageUrlFormat} from '../../../../utils/awsCustom'\nimport {EndPoint} from '../../../../dataManager/apiMapper'\nimport ApiConfig, {HttpMethod} from '../../../../dataManager/apiConfig'\nimport CCustomModalHeader from '../../../custom/Modal/CCustomModalHeader'\n\nconst RollingBannerDetail = ({\n  getList,\n  value,\n  visible,\n  setSelectedItem,\n  setVisible,\n  onChange,\n  isReadOnly,\n  setIsReadOnly,\n}) => {\n  const [iamgeList, setImageList] = useState([])\n\n  const userDetailEditMode = () => {\n    if (!isReadOnly) {\n      onUpdate()\n    } else {\n      setIsReadOnly(false)\n    }\n  }\n\n  const validateCheck = () => {\n    if (isEmpty(value.title)) {\n      alert('배너 타이틀을 입력해주세요.')\n      return false\n    }\n\n    if (iamgeList.length === 0) {\n      alert('이미지를 첨부해주세요.')\n      return false\n    }\n\n    return true\n  }\n\n  const onCreate = async () => {\n    try {\n      if (!validateCheck()) {\n        return\n      }\n      const imgUrls = sendImageUrlFormat(iamgeList)\n      const {data} = await ApiConfig.request({\n        data: {\n          title: value.title,\n          imageUrls: imgUrls,\n        },\n        query: {},\n        path: {},\n        method: HttpMethod.POST,\n        url: `${EndPoint.ENGLISH_BANNER}`,\n      })\n      console.log(data)\n      if (data.isSuccess) {\n        getList()\n        alert('배너가 정상적으로 생성 되었습니다.')\n        onClose()\n      } else {\n        alert(data.message)\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onDelete = async () => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          id: value.bannerEnglishId,\n        },\n        method: HttpMethod.PATCH,\n        url: `${EndPoint.ENGLISH_BANNER}/:id/d`,\n      })\n      if (data.isSuccess) {\n        getList()\n        alert(data.result)\n        onClose()\n      } else {\n        alert(data.message)\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onUpdate = async () => {\n    const imgUrls = sendImageUrlFormat(iamgeList)\n\n    try {\n      if (!validateCheck()) {\n        return\n      }\n      const {data} = await ApiConfig.request({\n        data: {\n          title: value.title,\n          imageUrls: imgUrls,\n        },\n        query: {},\n        path: {\n          id: value.bannerEnglishId,\n        },\n        method: HttpMethod.PATCH,\n        url: `${EndPoint.ENGLISH_BANNER}/:id`,\n      })\n      if (data.isSuccess) {\n        getList()\n        onClose()\n        alert(data.result)\n      } else {\n        alert(data.message)\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onCloseCheck = () => {\n    if (!isReadOnly && value.bannerEnglishId !== -1) {\n      if (window.confirm('정말 페이지에서 나가시겠습니까? \\n\\n 지금 페이지를 나가시면 변경사항이 저장되지 않습니다.')) {\n        onClose()\n      }\n    } else {\n      onClose()\n    }\n  }\n\n  const onClose = () => {\n    setImageList([])\n    setVisible(false)\n    setIsReadOnly(true)\n    setSelectedItem({\n      bannerEnglishId: -1,\n      title: '',\n      imageUrls: [],\n    })\n  }\n\n  const onDeleteConfilm = () => {\n    if (window.confirm('정말 삭제하시겠습니까?')) {\n      onDelete()\n    }\n  }\n  return (\n    <>\n      <CModal alignment='center' size='lg' visible={visible}>\n        <CCustomModalHeader onClick={onCloseCheck}>롤링배너 상세</CCustomModalHeader>\n        <CModalBody>\n          <CRow className='mb-3'>\n            <ModalInput\n              onChange={onChange}\n              id='bannerEnglishId'\n              xs={4}\n              placeholder='ID'\n              label='No'\n              readOnly={true}\n              disabled={true}\n              value={value.bannerEnglishId === -1 ? '' : value.bannerEnglishId}\n            />\n          </CRow>\n          <CRow className='mb-3'>\n            <ModalInput\n              onChange={onChange}\n              id='title'\n              placeholder='배너 타이틀'\n              label='배너 타이틀'\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n              value={value.title}\n            />\n          </CRow>\n          <CRow className='mb-3'>\n            <ModalImageInput\n              id='image'\n              label='이미지 첨부'\n              fileList={iamgeList}\n              setFileList={setImageList}\n              images={value.imageUrls}\n              imgPath='english_banner_images'\n              readOnly={isReadOnly}\n              isRequired={true}\n            />\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          {value.bannerEnglishId === -1 ? (\n            <CButton color='primary' onClick={onCreate}>\n              추가\n            </CButton>\n          ) : (\n            <>\n              <CButton color='danger' onClick={onDeleteConfilm}>\n                삭제\n              </CButton>\n              <CButton color={isReadOnly ? 'primary' : 'success'} onClick={userDetailEditMode}>\n                {isReadOnly ? '수정' : '저장'}\n              </CButton>\n            </>\n          )}\n          <CButton color='secondary' onClick={onCloseCheck}>\n            취소\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default RollingBannerDetail\n","import {useEffect, useState} from 'react'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport {rollingBannerColumns} from '../../../utils/columns/EnHomePage/rollingBanner/Columns'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport RollingBannerDetail from '../../../components/Modal/EnHomePage/rollingBanner/RollingBannerDetail'\nimport PrimaryBtn from '../../../components/common/PrimaryBtn'\n\nconst RollingBanner = () => {\n  const [items, setItems] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(true)\n  const [selectedItem, setSelectedItem] = useState({\n    bannerEnglishId: -1,\n    title: '',\n    imageUrls: [],\n  })\n\n  const onLoadBannerList = async () => {\n    try {\n      const data = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {},\n        method: HttpMethod.GET,\n        url: EndPoint.ENGLISH_BANNER,\n      })\n      setItems(data?.data.result.responses)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  //가져오기 onLoad\n  //생성 onCreate\n  //수정 onUpdate\n  //삭제 onDelete\n  const onLoadDetail = async id => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          id: id,\n        },\n        method: HttpMethod.GET,\n        url: `${EndPoint.ENGLISH_BANNER}/:id`,\n      })\n      setSelectedItem(data.result)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  useEffect(() => {\n    onLoadBannerList()\n  }, [])\n\n  const handleShowBannerDetailModal = async item => {\n    onLoadDetail(item.bannerEnglishId)\n    setShowModal(!showModal)\n  }\n\n  const handleBannerAddModal = () => {\n    setIsReadOnly(false)\n    setSelectedItem({\n      bannerEnglishId: -1,\n      title: '',\n      imageUrls: [],\n    })\n    setShowModal(!showModal)\n  }\n\n  const handleBannerDetailOnChange = ({target}) => {\n    const {id, value} = target\n\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n  return (\n    <>\n      <PageHeader title='롤링배너 관리' />\n      <CRow>\n        <CCol xs={12}>\n          <CCard className='mb-4'>\n            <CCardHeader>\n              <CForm className='row g-3'>\n                <CCol xs={1}>\n                  <PrimaryBtn onClick={handleBannerAddModal}>추가</PrimaryBtn>\n                </CCol>\n              </CForm>\n            </CCardHeader>\n            <CCardBody>\n              <ListTemplate\n                items={items}\n                onClick={handleShowBannerDetailModal}\n                columns={rollingBannerColumns}\n                className='BannerList'\n                datePickerHidden={false}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <RollingBannerDetail\n        onChange={handleBannerDetailOnChange}\n        visible={showModal}\n        value={selectedItem}\n        setVisible={setShowModal}\n        isReadOnly={isReadOnly}\n        setIsReadOnly={setIsReadOnly}\n        getList={onLoadBannerList}\n        setSelectedItem={setSelectedItem}\n      />\n    </>\n  )\n}\n\nexport default RollingBanner\n","// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\nPlusOutlined.displayName = 'PlusOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);"],"names":["children","onClick","className","type","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","images","id","label","fileList","setFileList","imgPath","isRequired","readOnly","oneSheet","maxFileLength","useState","setPreviewOpen","previewImage","setPreviewImage","previewTitle","setPreviewTitle","useEffect","length","map","path","uid","name","decodeURI","split","status","url","antdImageFormat","handlePreview","preview","originFileObj","substring","lastIndexOf","uploadButton","style","marginTop","notFiles","htmlFor","listType","onPreview","onSuccess","data","successData","httpRequest","request","body","endpoint","protocol","host","fileData","params","Key","onRemove","item","filter","customRequest","reqData","onError","onProgress","alert","AWS","region","process","accessKeyId","secretAccessKey","S3","fileName","replaceAll","objParams","Bucket","returnBucketName","Body","ContentType","putObject","on","loaded","total","percent","promise","then","$response","console","log","code","message","customReq","disabled","ImageTitleBox","PreviewImageBox","rounded","alt","src","styled","CCol","onChange","placeholder","value","xs","display","undefined","rollingBannerColumns","key","_props","color","sorter","getList","visible","setSelectedItem","setVisible","isReadOnly","setIsReadOnly","iamgeList","setImageList","validateCheck","isEmpty","title","onCreate","imgUrls","sendImageUrlFormat","ApiConfig","imageUrls","query","method","HttpMethod","EndPoint","isSuccess","onClose","onDelete","bannerEnglishId","onUpdate","onCloseCheck","window","confirm","alignment","size","CCustomModalHeader","ModalInput","ModalImageInput","items","setItems","showModal","setShowModal","selectedItem","onLoadBannerList","responses","onLoadDetail","handleShowBannerDetailModal","PageHeader","PrimaryBtn","ListTemplate","columns","datePickerHidden","target","PlusOutlined","props","ref","React","AntdIcon","_objectSpread","icon","PlusOutlinedSvg","displayName"],"sourceRoot":""}