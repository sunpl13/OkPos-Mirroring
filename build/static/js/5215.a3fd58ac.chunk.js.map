{"version":3,"file":"static/js/5215.a3fd58ac.chunk.js","mappings":"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","sources":["components/forms/downloadForm/MultiFileDownloadForm.js","components/forms/inputForm/ModalInput.js","components/forms/inputForm/ModalQuillEditor.js","utils/columns/homePage/qna/Columns.js","components/Modal/homePage/QnA/QnADetail.js","pages/homePage/QnA/QnAList.js","utils/columns/homePage/qna/ColumnsSelectedValue.js"],"sourcesContent":["import {CCol, CFormInput, CFormLabel} from '@coreui/react'\nimport styled from 'styled-components'\nimport {antdImageFormat} from '../../../utils/awsCustom'\nimport React from 'react'\n\nconst MultiFileDownloadForm = ({id, files, label, isRequired}) => {\n  const downloadFile = (url, fileName) => {\n    url = antdImageFormat(url)\n\n    fetch(url, {method: 'GET'})\n      .then(res => {\n        return res.blob()\n      })\n      .then(blob => {\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = fileName\n        document.body.appendChild(a)\n        a.click()\n        setTimeout(_ => {\n          window.URL.revokeObjectURL(url)\n        }, 60000)\n        a.remove()\n      })\n      .catch(err => {\n        console.error('err: ', err)\n      })\n  }\n\n  //onClick={() => downloadFile(file, fileName)}\n\n  return (\n    <>\n      <CFormLabel htmlFor={`${id}Static`} className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol>\n        {files?.length > 0 ? (\n          files.map((file, index) => {\n            const splitUrl = file.split('/') //   \"/\" 로 전체 url 을 나눈다\n            const splitUrlLength = splitUrl.length\n            const fileName = splitUrl[splitUrlLength - 1] // 나누어진 배열의 맨 끝이 파일명이다\n            return (\n              <div key={index} className='col-form-label'>\n                <SpanStyle\n                  role='link'\n                  key={index}\n                  href={antdImageFormat(file)}\n                  onClick={() => downloadFile(file, fileName)}\n                >\n                  {index + 1}. {fileName}\n                </SpanStyle>\n              </div>\n            )\n          })\n        ) : (\n          <CFormInput type={'text'} id={id || ''} placeholder='등록된 파일이 없습니다.' disabled />\n        )}\n      </CCol>\n    </>\n  )\n}\nexport default MultiFileDownloadForm\n\nconst SpanStyle = styled.span`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding: 0 8px;\n  line-height: 1.5714285714285714;\n  flex: auto;\n  transition: all 0.3s;\n  color: #1677ff !important;\n  text-decoration: none;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n`\n","import {CCol, CFormInput, CFormLabel} from '@coreui/react'\nimport React from 'react'\n\nconst ModalInput = ({type, onChange, id, placeholder, value, label, readOnly, disabled, isRequired, xs}) => {\n  return (\n    <>\n      <CFormLabel htmlFor={`${id}Static`} className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol className='align-items-center' xs={xs} style={{display: 'flex'}}>\n        <CFormInput\n          type={type || 'text'}\n          id={id}\n          placeholder={placeholder || ''}\n          value={type === 'file' ? undefined : value || ''}\n          onChange={onChange}\n          readOnly={readOnly}\n          disabled={disabled}\n        />\n      </CCol>\n    </>\n  )\n}\n\nexport default ModalInput\n","import React, {useMemo, useRef, useState} from 'react'\nimport ReactQuill from 'react-quill'\nimport 'react-quill/dist/quill.snow.css'\nimport {CCol, CFormLabel} from '@coreui/react'\nimport styled from 'styled-components'\n\nconst ModalQuillEditor = ({\n  id, // Tag ID\n  value, // useState\n  label, // Title\n  isRequired, // isRequired\n  readOnly = false,\n  setValue, // onChange function\n  maxLength, // 문자 길이 int ex) 400\n  editorHeight = 300,\n}) => {\n  const QuillRef = useRef()\n  const [textLengthCheck, setTextLengthCheck] = useState(false)\n\n  // 이미지를 업로드 하기 위한 함수\n  const imageHandler = () => {\n    // 파일을 업로드 하기 위한 input 태그 생성\n    const input = document.createElement('input')\n    const formData = new FormData()\n    let url = ''\n\n    input.setAttribute('type', 'file')\n    input.setAttribute('accept', 'image/*')\n    input.click()\n\n    // 파일이 input 태그에 담기면 실행 될 함수\n    input.onchange = async () => {\n      const file = input.files\n      console.log(file)\n      if (file !== null) {\n        formData.append('image', file[0])\n        try {\n          const res = (url = res.data.url)\n          // 커서의 위치를 알고 해당 위치에 이미지 태그를 넣어주는 코드\n          // 해당 DOM의 데이터가 필요하기에 useRef를 사용.\n          const range = QuillRef.current?.getEditor().getSelection()?.index\n          if (range !== null && range !== undefined) {\n            let quill = QuillRef.current?.getEditor()\n\n            quill?.setSelection(range, 1)\n\n            quill?.clipboard.dangerouslyPasteHTML(range, `<img src=${url} alt=\"이미지 태그가 삽입됩니다.\" />`)\n          }\n\n          return {...res, success: true}\n        } catch (error) {\n          return {...error.response, success: false}\n        }\n      }\n    }\n  }\n\n  const modules = useMemo(() => {\n    return {\n      toolbar: {\n        container: [\n          ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n          ['blockquote'],\n          [{list: 'ordered'}, {list: 'bullet'}], // 리스트\n          [{script: 'sub'}, {script: 'super'}], // superscript/subscript\n          [{indent: '-1'}, {indent: '+1'}], // Text 좌우 이동\n          [{direction: 'rtl'}], // Text 좌우 끝으로 이동\n          [{header: [1, 2, 3, 4, 5, 6, false]}], // Text 제목 크기\n          [{color: []}, {background: []}], // Text 색상\n          [{font: []}], // Text 폰트\n          [{align: []}], // Text 정렬\n          ['clean'], // Text 설정 초기화\n          //['image', 'video'],\n        ],\n        //handlers: {\n        //           image: imageHandler,\n        //         },\n      },\n    }\n  }, [])\n\n  const handleEditorOnChange = item => {\n    if (maxLength) {\n      const textReplace = item.replace(/<[^>]*>?| /g, '').length\n      if (maxLength >= textReplace) {\n        setValue(item)\n        setTextLengthCheck(false)\n      } else {\n        setTextLengthCheck(true)\n      }\n    } else if (!maxLength) {\n      setValue(item)\n    }\n  }\n\n  return (\n    <CCol style={{height: `${editorHeight}px`, marginBottom: '20px'}} className={'pb-5'}>\n      <CFormLabel htmlFor={`${id}Static`} className='col-form-label'>\n        <span className={isRequired && 'required'}>{label || ' * '}</span>\n        <MaxTextMsg className={'px-lg-2'} textLengthCheck={textLengthCheck}>\n          {maxLength ? `* ${maxLength}자 까지 입력 가능합니다.` : '  '}\n        </MaxTextMsg>\n      </CFormLabel>\n      <EditorStyle\n        id={id || ''}\n        ref={element => {\n          if (element !== null) {\n            QuillRef.current = element\n          }\n        }}\n        value={value}\n        defaultValue={value}\n        onChange={item => (!textLengthCheck ? handleEditorOnChange(item) : handleEditorOnChange(value))}\n        modules={modules}\n        readOnly={readOnly}\n        theme='snow'\n        placeholder='내용을 입력해주세요.'\n        style={{height: '100%'}}\n      />\n    </CCol>\n  )\n}\n\nexport default ModalQuillEditor\n\nconst EditorStyle = styled(ReactQuill)`\n  background-color: ${({readOnly}) => (readOnly ? '#d8dbe0' : 'transparent')};\n  border-radius: 0.375rem;\n  border: none;\n  padding-bottom: ${({readOnly}) => (readOnly ? '0' : '67px')};\n  .ql-container {\n    border-radius: ${({readOnly}) => (readOnly ? '0.375rem' : '0')};\n    border-bottom-left-radius: 0.375rem;\n    border-bottom-right-radius: 0.375rem;\n  }\n  .ql-editor {\n    border-radius: ${({readOnly}) => (readOnly ? '0.375rem' : '0')};\n  }\n  .ql-toolbar {\n    border-top-left-radius: 0.375rem;\n    border-top-right-radius: 0.375rem;\n    display: ${({readOnly}) => (readOnly ? 'none' : 'block')};\n  }\n`\nconst MaxTextMsg = styled.span`\n  font-size: 12px;\n  padding-left: 10px;\n  //color: ${({textLengthCheck}) => textLengthCheck && 'red'};\n`\n//border-top: ${({readOnly}) => (readOnly ? '1px solid #b1b7c1' : 'none')};\n","export const qnaColumns = [\n  {\n    key: 'no',\n    label: 'No',\n    _props: {color: 'primary', className: 'no'},\n    filter: false,\n  },\n  {\n    key: 'name',\n    label: '이름',\n    _props: {color: 'primary', className: 'name'},\n  },\n  {\n    key: 'email',\n    label: '이메일',\n    _props: {color: 'primary', className: 'email'},\n    sorter: false,\n  },\n  {\n    key: 'number',\n    label: '전화번호',\n    _props: {color: 'primary', className: 'number'},\n    sorter: false,\n  },\n  {\n    key: 'categoryKorean',\n    label: '문의 유형',\n    _props: {color: 'primary', className: 'categoryKorean'},\n  },\n]\n","import {CModal, CModalBody, CModalHeader, CModalTitle, CRow, CModalFooter, CButton} from '@coreui/react'\nimport ModalInput from '../../../forms/inputForm/ModalInput'\nimport PropTypes from 'prop-types'\nimport MultiFileDownloadForm from '../../../forms/downloadForm/MultiFileDownloadForm'\nimport ApiConfig, {HttpMethod} from '../../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../../dataManager/apiMapper'\nimport ModalQuillEditor from '../../../forms/inputForm/ModalQuillEditor'\n\nconst QnADetail = ({getList, value, visible, setVisible, onChange, isReadOnly, setIsReadOnly, content, setContent}) => {\n  const onDelete = async () => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          id: value.inquiryId,\n        },\n        method: HttpMethod.PATCH,\n        url: `${EndPoint.HOME_INQUIRY}/:id/d`,\n      })\n      if (data.isSuccess) {\n        getList()\n        setIsReadOnly(true)\n        setVisible(false)\n        alert(data.result)\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onCloseCheck = () => {\n    if (!isReadOnly && value.No !== -1) {\n      if (window.confirm('정말 페이지에서 나가시겠습니까? \\n\\n 지금 페이지를 나가시면 변경사항이 저장되지 않습니다.')) {\n        onClose()\n      }\n    } else {\n      onClose()\n    }\n  }\n\n  const onClose = () => {\n    setVisible(false)\n    setIsReadOnly(true)\n  }\n\n  const onDeleteConfilm = () => {\n    if (window.confirm('정말 삭제하시겠습니까?')) {\n      onDelete()\n    }\n  }\n  return (\n    <>\n      <CModal alignment='center' size='lg' visible={visible}>\n        <CModalHeader>\n          <CModalTitle>1:1 문의 상세</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow className='mb-3'>\n            <ModalInput\n              onChange={onChange}\n              id='inquiryId'\n              placeholder='No.'\n              label='ID'\n              readOnly={true}\n              disabled={true}\n              value={value.inquiryId === -1 ? '' : value.inquiryId}\n            />\n            <ModalInput\n              onChange={onChange}\n              id='name'\n              placeholder='이름을 입력해주세요'\n              label='이름'\n              value={value.name}\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n            />\n          </CRow>\n\n          <CRow className='mb-3'>\n            <ModalInput\n              onChange={onChange}\n              id='email'\n              placeholder='email'\n              label='이메일'\n              value={value.email}\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n            />\n            <ModalInput\n              onChange={onChange}\n              id='number'\n              placeholder='phone number'\n              label='전화번호'\n              value={value.number}\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n            />\n          </CRow>\n          <CRow>\n            <ModalQuillEditor\n              id='content'\n              value={content}\n              isRequired={false}\n              readOnly={isReadOnly}\n              setValue={setContent}\n              label='문의 내용'\n            />\n          </CRow>\n          <CRow>\n            <MultiFileDownloadForm files={value.fileUrl} id='fileUrl' label='첨부파일' />\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color='danger' onClick={onDeleteConfilm}>\n            삭제\n          </CButton>\n          <CButton color='secondary' onClick={onCloseCheck}>\n            취소\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nQnADetail.propTypes = {\n  value: PropTypes.any,\n  visible: PropTypes.bool,\n  setVisible: PropTypes.func,\n  onChange: PropTypes.func,\n  isReadOnly: PropTypes.bool,\n  setIsReadOnly: PropTypes.func,\n}\n\nexport default QnADetail\n","import {useState, useEffect} from 'react'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport {qnaColumns} from '../../../utils/columns/homePage/qna/Columns'\nimport {inquirys} from '../../../utils/columns/homePage/qna/ColumnsSelectedValue'\nimport QnADetail from '../../../components/Modal/homePage/QnA/QnADetail'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nconst QnAList = () => {\n  const [items, setItems] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(true)\n  const [content, setContent] = useState('') //quill용 state\n  const [selectedItem, setSelectedItem] = useState({\n    inquiryId: -1,\n    content: '',\n    name: '',\n    email: '',\n    pNum: '',\n    inquiryType: '',\n    fileUrl: [],\n  })\n\n  const onLoadInquiryList = async () => {\n    try {\n      const data = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {},\n        method: HttpMethod.GET,\n        url: EndPoint.HOME_INQUIRY,\n      })\n      setItems(data?.data.result.responses)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onLoadDetail = async id => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          id: id,\n        },\n        method: HttpMethod.GET,\n        url: `${EndPoint.HOME_INQUIRY}/:id`,\n      })\n\n      setSelectedItem(data.result)\n      setContent(data.result.content)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  useEffect(() => {\n    onLoadInquiryList()\n  }, [])\n\n  const handleShowInquiryDetailModal = async item => {\n    onLoadDetail(item.inquiryId)\n    setShowModal(!showModal)\n  }\n\n  const handleInquiryDetailOnChange = ({target}) => {\n    const {id, value} = target\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n  return (\n    <main>\n      <PageHeader title='1:1 문의' />\n      <CRow>\n        <CCol xs={12}>\n          <CCard className='mb-4'>\n            <CCardBody>\n              <ListTemplate\n                items={items}\n                onClick={handleShowInquiryDetailModal}\n                selectedOptions={inquirys}\n                columns={qnaColumns}\n                className='inquiryList'\n                datePickerHidden={false}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <QnADetail\n        onChange={handleInquiryDetailOnChange}\n        visible={showModal}\n        value={selectedItem}\n        setVisible={setShowModal}\n        isReadOnly={isReadOnly}\n        setIsReadOnly={setIsReadOnly}\n        getList={onLoadInquiryList}\n        content={content}\n        setContent={setContent}\n      />\n    </main>\n  )\n}\n\nexport default QnAList\n","exports.inquirys = {\n  a: '제품',\n  b: '부가 서비스',\n  c: '채용 ',\n  d: '제휴',\n  e: '기타',\n}\n"],"names":["id","files","label","isRequired","htmlFor","className","length","map","file","index","splitUrl","split","fileName","SpanStyle","role","href","antdImageFormat","onClick","url","fetch","method","then","res","blob","window","URL","createObjectURL","a","document","createElement","download","body","appendChild","click","setTimeout","_","revokeObjectURL","remove","catch","err","console","error","downloadFile","type","placeholder","disabled","styled","onChange","value","readOnly","xs","style","display","undefined","setValue","maxLength","editorHeight","QuillRef","useRef","useState","textLengthCheck","setTextLengthCheck","modules","useMemo","toolbar","container","list","script","indent","direction","header","color","background","font","align","handleEditorOnChange","item","textReplace","replace","height","marginBottom","MaxTextMsg","EditorStyle","ref","element","current","defaultValue","theme","ReactQuill","qnaColumns","key","_props","filter","sorter","getList","visible","setVisible","isReadOnly","setIsReadOnly","content","setContent","onDelete","ApiConfig","data","query","path","inquiryId","HttpMethod","EndPoint","isSuccess","alert","result","onClose","alignment","size","ModalInput","name","email","number","ModalQuillEditor","MultiFileDownloadForm","fileUrl","confirm","No","items","setItems","showModal","setShowModal","pNum","inquiryType","selectedItem","setSelectedItem","onLoadInquiryList","responses","onLoadDetail","useEffect","handleShowInquiryDetailModal","PageHeader","title","ListTemplate","selectedOptions","inquirys","columns","datePickerHidden","target","exports","b","c","d","e"],"sourceRoot":""}