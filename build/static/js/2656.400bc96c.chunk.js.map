{"version":3,"file":"static/js/2656.400bc96c.chunk.js","mappings":"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","sources":["components/list/ThumbnailModal.tsx","components/common/RangeDatePicker.js","components/list/ListTemplate.js","utils/columns/homePage/employment/Columns.js","pages/homePage/employment/Employment.js"],"sourcesContent":["import {CButton, CImage, CModal, CModalBody, CModalFooter} from '@coreui/react'\nimport {useState} from 'react'\nimport {antdImageFormat} from '../../utils/awsCustom'\n\nexport interface IImage {\n  img: string\n  altName: string\n}\n\ninterface IThumbnail {\n  thumbnails: any\n  visible: boolean\n  url: string\n  setVisible: (state: boolean) => void\n}\n\nconst ThumbnailModal = ({visible, setVisible, url}: IThumbnail) => {\n  const [imgUrl, setImgUrl] = useState('')\n  // useEffect(() => {\n  //   setImgUrl(thumbnails[0].img)\n\n  //   return () => {\n  //     setImgUrl(thumbnails[0].img)\n  //   }\n  // }, [thumbnails])\n  //const onChangeImg = (selectedUrl: string) => {\n  //     setImgUrl(selectedUrl)\n  //   }\n  return (\n    <CModal alignment='center' size='xl' visible={visible} onClose={() => setVisible(false)}>\n      {/*<CModalHeader></CModalHeader>*/}\n      <CModalBody className='clearfix'>\n        <CImage align='center' fluid src={antdImageFormat(url)} alt='안녕하세요' width={600} />\n        {/* <MultipleRows>\n          {thumbnails.map(item => (\n            <CImage key={item.img} src={item.img} alt={item.altName} width={80} height={60} />\n          ))}\n        </MultipleRows> */}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color='primary' onClick={() => setVisible(false)}>\n          Cancel\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ThumbnailModal\n\n//const MultipleRows = styled.div`\n//   display: flex;\n//   justify-content: center;\n//   flex-wrap: wrap;\n//   gap: 0 10px;\n//   margin-top: 20px;\n//   & img {\n//     width: 80px;\n//     height: 60px;\n//   }\n// `\n","import {ConfigProvider, DatePicker, Space} from 'antd'\nimport locale from 'antd/lib/locale/ko_KR'\nimport 'antd/dist/antd.min.css'\nimport moment from 'moment'\nimport 'moment/locale/ko'\nimport {CCol} from '@coreui/react'\nimport styled from 'styled-components'\n\nconst RangeDatePicker = ({setStartDate, setEndDate}) => {\n  const {RangePicker} = DatePicker\n  moment.locale('ko')\n  const datePickerOnChange = date => {\n    if (date) {\n      setStartDate(moment(date[0]._d).format('YYYY-MM-DD'))\n      setEndDate(moment(date[1]._d).format('YYYY-MM-DD'))\n    } else {\n      setStartDate('')\n      setEndDate('')\n    }\n  }\n\n  return (\n    <PickerCCol>\n      <ConfigProvider locale={locale}>\n        <Space direction='vertical'>\n          <RangePicker allowClear={true} onChange={datePickerOnChange} />\n        </Space>\n      </ConfigProvider>\n    </PickerCCol>\n  )\n}\n\nexport default RangeDatePicker\n\nconst PickerCCol = styled(CCol)`\n  display: flex;\n  flex-direction: row;\n  align-content: end;\n  justify-content: end;\n  height: 100%;\n  width: 100%;\n  & div {\n    height: 100%;\n  }\n  & .ant-space-item {\n    width: 100%;\n  }\n  & .ant-picker {\n    border-radius: 0.375rem;\n    border: solid 1px #9da5b1;\n  }\n  & .ant-space-item {\n    width: 100%;\n    & > div {\n      width: 100%;\n    }\n  }\n  & .ant-space.ant-space-vertical {\n    width: 100%;\n  }\n`\n","import React, {useEffect, useState} from 'react'\nimport {CSmartTable} from '../custom/smart-table/CSmartTable'\nimport PropTypes from 'prop-types'\nimport {\n  CBadge,\n  CButton,\n  CCol,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CFormCheck,\n  CFormInput,\n  CImage,\n  CInputGroup,\n  CRow,\n} from '@coreui/react'\nimport ThumbnailModal from './ThumbnailModal'\nimport RangeDatePicker from '../common/RangeDatePicker'\nimport moment from 'moment'\nimport {isPrice} from '../../utils/utility'\nimport {antdImageFormat} from '../../utils/awsCustom'\n\nconst ListTemplate = ({\n  items, // 리스트 아이템\n  onClick, // 리스트 클릭 이벤트 ex) Modal\n  columns, // 리스트의 헤더\n  className, // 리스트의 클레스 네임\n  onDelete, // 리스트 아이템 삭제\n  selectedOptions, // 리스트의 selectBox 옵션\n  datePickerHidden = true, // 기간선택 데이터 피커 출력 유무\n  itemPerPageHidden = true, // 리스트의 페이지마다 출력될 아이템 개수 선택 박스 출력 유무\n  searchInputHidden = true, // 검색창 출력 유무\n  checkBoxInputHidden = false, // 체크박스 출력 유무\n  func, //보낼 함수\n}) => {\n  // Local state 선언\n  const [listItems, setListItems] = useState([])\n  const [filterItems, setFilterItems] = useState()\n  const [showModal, setShowModal] = useState(false)\n\n  const [imgClick, setImgClick] = useState('')\n  const [startDate, setStartDate] = useState('')\n  const [endDate, setEndDate] = useState('')\n  const [searchOption, setSearchOption] = useState('')\n  const [allSelected, setAllSelected] = useState(false)\n\n  // 리스트 헤더 전체 체크박스\n  const handleAllSelectedOnChange = () => {\n    setAllSelected(!allSelected)\n    setListItems(\n      listItems.map(value => ({\n        ...value,\n        checked: allSelected ? false : true,\n      })),\n    )\n  }\n  // 리스트 아이템 체크박스\n  const handleItemOnSelected = item => {\n    setListItems(\n      listItems.map(value =>\n        value._id === item._id\n          ? {\n              ...value,\n              checked: !item.checked,\n            }\n          : value,\n      ),\n    )\n    if (!item.checked) {\n      item.checked = true\n    } else {\n      item.checked = false\n    }\n    console.log(item)\n  }\n  // 테이블 헤더의 전체 체크박스\n  const allCheckBox = {\n    key: 'checkBox',\n    label: (\n      <CFormCheck\n        id={'allSelected'}\n        type={'checkbox'}\n        onChange={event => handleAllSelectedOnChange(event)}\n        checked={allSelected}\n      />\n    ),\n    _props: {className: 'checkBox'},\n    sorter: false,\n    filter: false,\n  }\n\n  // 함수 선언\n\n  // 상태값 Color get 함수\n  const getBadgeColor = status => {\n    switch (status) {\n      case 'ACTIVE':\n        return 'success'\n      case 'INACTIVE':\n        return 'danger'\n      case true:\n        return 'success'\n      case false:\n        return 'danger'\n      default:\n        return 'primary'\n    }\n  }\n\n  // 상태값 Text get 함수\n  const getBadgeText = status => {\n    switch (status) {\n      case 'ACTIVE':\n        return '활성화'\n      case 'INACTIVE':\n        return '비활성화'\n      case true:\n        return '완료'\n      case false:\n        return '미완료'\n      default:\n        return '기타'\n    }\n  }\n\n  const testOnClick = (event, url) => {\n    event.stopPropagation()\n    setShowModal(!showModal)\n    setImgClick(url)\n  }\n  const modalOnClick = () => {\n    setShowModal(!showModal)\n  }\n\n  const handleDeleteOnClick = (event, item) => {\n    event.stopPropagation()\n    onDelete(item)\n  }\n\n  const handleOnCheckedApi = async item => {\n    console.log(item)\n    // try {\n    //   const data = await ApiConfig.request({\n    //     data: {\n    //       editorIds: [item.editorId],\n    //     },\n    //     query: {},\n    //     path: {},\n    //     method: HttpMethod.PATCH,\n    //     url: `${EndPoint.EDITOR}/auth`,\n    //   })\n    //   console.log(data)\n    // } catch (error) {\n    //   alert(error)\n    // }\n  }\n\n  useEffect(() => {\n    setListItems(items)\n    if (columns) {\n      setSearchOption(columns[0].key)\n    }\n  }, [items])\n\n  useEffect(() => {\n    // data picker 에 선택된 값\n    if (endDate) {\n      setFilterItems(\n        listItems.filter(\n          value =>\n            moment(value.createdAt, 'YYYYMMDDHHmmss').format('YYYY-MM-DD') >= startDate &&\n            moment(value.createdAt, 'YYYYMMDDHHmmss').format('YYYY-MM-DD') <= endDate,\n        ),\n      )\n      // 생성일로 필터\n    } else {\n      setFilterItems('')\n    }\n  }, [endDate])\n\n  const handleSearchOnClick = () => {\n    console.log('test')\n  }\n  const handleSearchItemOnClick = key => {\n    setSearchOption(key)\n  }\n  return (\n    <>\n      <CRow className={'justify-content-end'}>\n        {searchInputHidden && (\n          <CCol xs={4}>\n            <CInputGroup>\n              <CDropdown alignment='end' variant='input-group'>\n                <CDropdownToggle color='secondary' variant='outline' split>\n                  {searchOption}\n                </CDropdownToggle>\n                <CFormInput aria-label='Text input with segmented dropdown button' />\n                <CDropdownMenu>\n                  {columns.map(({key}) => {\n                    if (key !== 'createdAt') {\n                      return (\n                        <CDropdownItem key={key} onClick={() => handleSearchItemOnClick(key)}>\n                          {key}\n                        </CDropdownItem>\n                      )\n                    }\n                  })}\n                </CDropdownMenu>\n              </CDropdown>\n              <CButton type='button' color='secondary' variant='outline' onClick={() => handleSearchOnClick()}>\n                검색\n              </CButton>\n            </CInputGroup>\n          </CCol>\n        )}\n        {datePickerHidden && (\n          <CCol xs={4}>\n            <RangeDatePicker setStartDate={setStartDate} setEndDate={setEndDate} />\n          </CCol>\n        )}\n      </CRow>\n      <br />\n      <CSmartTable\n        items={filterItems || listItems}\n        columns={checkBoxInputHidden ? [allCheckBox, ...columns] : columns || null}\n        activePage={1}\n        columnSorter\n        pagination\n        clickableRows\n        tableHeadProps={{\n          color: 'primary',\n        }}\n        onRowClick={onClick}\n        tableProps={{\n          hover: true,\n          responsive: true,\n          striped: true,\n          align: 'middle',\n          className: className,\n        }}\n        scopedColumns={{\n          checkBox: item => (\n            <td onClick={event => event.stopPropagation()}>\n              <CFormCheck onChange={() => handleItemOnSelected(item)} checked={item.checked || false} />\n            </td>\n          ),\n          isAuthorized: item => (\n            <td onClick={event => event.stopPropagation()}>\n              <CFormCheck onChange={() => func(item)} checked={item.isAuthorized || false} />\n            </td>\n          ),\n          // 상태\n          status: ({status}) => (\n            <td>\n              <CBadge color={getBadgeColor(status)}>{getBadgeText(status)}</CBadge>\n            </td>\n          ),\n          // 1:1 문의 답변 상태\n          reply: ({reply}) => (\n            <td>\n              <CBadge color={getBadgeColor(reply)}>{getBadgeText(reply)}</CBadge>\n            </td>\n          ),\n          // 단일 이미지\n          image: ({image}) => (\n            <td>\n              <CImage rounded thumbnail src={image} alt='' />\n            </td>\n          ),\n          // 이미지 리스트\n          images: ({images}) => (\n            <td onClick={event => (images.length !== 0 ? testOnClick(event, images) : onClick)}>\n              <CImage rounded src={images.length === 0 ? '' : images[0]} alt='' width={100} height={60} />\n            </td>\n          ),\n          deleteBtn: item => (\n            <td onClick={event => handleDeleteOnClick(event, item)}>\n              <CBadge color={'danger'}>삭제</CBadge>\n            </td>\n          ),\n          //\n          //category: ({category}) => <td>{selectedOptions ? selectedOptions[category] : ''}</td>,\n          jobType: ({jobType}) => <td>{selectedOptions ? selectedOptions[jobType] : ''}</td>,\n          education: ({education}) => <td>{selectedOptions ? selectedOptions[education] : ''}</td>,\n          inquiryType: ({inquiryType}) => <td>{selectedOptions ? selectedOptions[inquiryType] : ''}</td>,\n          career: ({career}) => <td>{selectedOptions ? selectedOptions[career] : ''}</td>,\n          proceed: ({proceed}) => <td>{proceed ? '채용중' : '채용 마감'}</td>,\n          deliveryStatus: ({deliveryStatus}) => (\n            <td>\n              <CBadge color={'primary'}>{selectedOptions ? selectedOptions[deliveryStatus] : 'Not Data'} </CBadge>\n            </td>\n          ),\n          productImg: ({productImg}) => (\n            <td>\n              <CImage rounded src={productImg || ''} alt='' width={100} height={60} />\n            </td>\n          ),\n          totalPrice: ({totalPrice}) => <td className='totalPrice'>{isPrice(totalPrice)}</td>,\n\n          startedAt: ({startedAt}) => <td>{moment(startedAt, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n          closedAt: ({closedAt}) => <td>{moment(closedAt, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n          createdAt: ({createdAt}) => <td>{moment(createdAt, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n          deletedAt: ({deletedAt}) => <td>{moment(deletedAt, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n          updatedAt: ({updatedAt}) => <td>{moment(updatedAt, 'YYYYMMDDHHmmss').format('YYYY. MM. DD')}</td>,\n          noticeFiles: ({noticeFiles}) => <td>{noticeFiles?.length} 개</td>,\n          imageUrls: ({imageUrls}) => (\n            <td\n              onClick={event =>\n                imageUrls.length !== 0 && imageUrls[0] !== '.' ? testOnClick(event, imageUrls[0]) : onClick\n              }\n            >\n              {imageUrls.length === 0 || imageUrls[0] === '.' ? (\n                ''\n              ) : (\n                <CImage\n                  rounded\n                  src={antdImageFormat(imageUrls[0])}\n                  alt={antdImageFormat(imageUrls[0])}\n                  width={100}\n                  height={60}\n                />\n              )}\n            </td>\n          ),\n          // 변수명 겹침\n          // image: ({image}) => (\n          //   <td onClick={event => (image.length !== 0 && image[0] !== '.' ? testOnClick(event, image[0]) : onClick)}>\n          //     {image.length === 0 || image[0] === '.' ? (\n          //       ''\n          //     ) : (\n          //       <CImage\n          //         rounded\n          //         src={antdImageFormat(image[0])}\n          //         alt={antdImageFormat(image[0])}\n          //         width={100}\n          //         height={60}\n          //       />\n          //     )}\n          //   </td>\n          // ),\n        }}\n        noItemsLabel={'데이터가 없습니다.'}\n        //itemsPerPageSelect={itemPerPageHidden}\n        itemsPerPage={20}\n      />\n      {showModal ? (\n        <ThumbnailModal visible={showModal} setVisible={setShowModal} onClick={modalOnClick} url={imgClick} />\n      ) : (\n        ''\n      )}\n    </>\n  )\n}\n\nListTemplate.propTypes = {\n  items: PropTypes.array,\n  onClick: PropTypes.func,\n  columns: PropTypes.array,\n  className: PropTypes.string,\n  onDelete: PropTypes.func,\n  selectedOptions: PropTypes.object,\n  datePickerHidden: PropTypes.bool,\n  itemPerPageHidden: PropTypes.bool,\n}\n\nexport default ListTemplate\n","export const employmentColumns = [\n  {\n    key: 'number',\n    _props: {color: 'primary', className: 'number'},\n  },\n  {\n    key: 'categoryKorean',\n    label: '카테고리',\n    _props: {color: 'primary', className: 'categoryKorean'},\n  },\n  {\n    key: 'title',\n    label: '공고 제목',\n    _props: {color: 'primary', className: 'title'},\n  },\n  {\n    key: 'startedAt',\n    label: '공고 시작일',\n    _props: {color: 'primary', className: 'startedAt'},\n  },\n  {\n    key: 'closedAt',\n    label: '공고 종료일',\n    _props: {color: 'primary', className: 'employEndDate'},\n  },\n  {\n    key: 'proceed',\n    label: '진행 상태',\n    _props: {color: 'primary', className: 'proceed'},\n  },\n]\n","import React, {useEffect, useState} from 'react'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport EmploymemtDetailModal from '../../../components/Modal/homePage/employment/EmploymemtDetailModal'\nimport {employmentColumns} from '../../../utils/columns/homePage/employment/Columns'\nimport {category} from '../../../utils/columns/homePage/employment/ColumnsSelectedValue'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nconst Employment = () => {\n  const [items, setItems] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(true)\n  const [selectedItem, setSelectedItem] = useState({\n    recruitmentId: -1,\n    category: '',\n    proceed: 0,\n    title: '',\n    startedAt: new Date(),\n    closedAt: new Date(),\n    imageUrls: [],\n    jobType: 'FULL_TIME',\n    location: '',\n    education: 'UNIVERSITY_GRADUATE_4_YEAR',\n    career: 'ANY',\n    duty: '',\n    qualification: '',\n    preference: '',\n    hiringReason: '',\n    departmentStatus: '',\n    otherNote: '',\n  })\n\n  const onLoadEmploymentList = async () => {\n    try {\n      const data = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {},\n        method: HttpMethod.GET,\n        url: EndPoint.RECRUITMENT,\n      })\n      setItems(data?.data.result.responses)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  //가져오기 onLoad\n  //생성 onCreate\n  //수정 onUpdate\n  //삭제 onDelete\n  const onLoadDetail = async id => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          recruitmentId: id,\n        },\n        method: HttpMethod.GET,\n        url: `${EndPoint.RECRUITMENT}/:recruitmentId`,\n      })\n\n      setSelectedItem(data.result)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  useEffect(() => {\n    onLoadEmploymentList()\n  }, [])\n\n  const handleShowEmploymentDetailModal = async item => {\n    onLoadDetail(item.recruitmentId)\n    setShowModal(!showModal)\n  }\n\n  const handleEmploymentAddModal = () => {\n    setIsReadOnly(false)\n    setSelectedItem({\n      recruitmentId: -1,\n      category: '',\n      proceed: 0,\n      title: '',\n      startedAt: new Date(),\n      closedAt: new Date(),\n      imageUrls: [],\n      jobType: 'FULL_TIME',\n      location: '',\n      education: 'UNIVERSITY_GRADUATE_4_YEAR',\n      career: 'ANY',\n      duty: '',\n      qualification: '',\n      preference: '',\n      hiringReason: '',\n      departmentStatus: '',\n      otherNote: '',\n    })\n    setShowModal(!showModal)\n  }\n\n  const handleEmployDetailOnChange = ({target}) => {\n    const {id, value} = target\n\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n\n  return (\n    <>\n      <PageHeader title='채용관리' />\n      <CRow>\n        <CCol xs={12}>\n          <CCard className='mb-4'>\n            <CCardHeader>\n              <CForm className='row g-3'>\n                <CCol xs={1}>\n                  <CButton color='primary' onClick={onLoadEmploymentList}>\n                    조회하기\n                  </CButton>\n                </CCol>\n                <CCol xs={1}>\n                  <CButton color='primary' onClick={handleEmploymentAddModal}>\n                    추가\n                  </CButton>\n                </CCol>\n              </CForm>\n            </CCardHeader>\n            <CCardBody>\n              <ListTemplate\n                items={items}\n                onClick={handleShowEmploymentDetailModal}\n                columns={employmentColumns}\n                className={'userList'}\n                selectedOptions={category}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <EmploymemtDetailModal\n        onChange={handleEmployDetailOnChange}\n        visible={showModal}\n        value={selectedItem}\n        setVisible={setShowModal}\n        isReadOnly={isReadOnly}\n        setIsReadOnly={setIsReadOnly}\n        getList={onLoadEmploymentList}\n        setSelectedItem={setSelectedItem}\n      />\n    </>\n  )\n}\n\nexport default Employment\n"],"names":["visible","setVisible","url","useState","alignment","size","onClose","className","align","fluid","src","antdImageFormat","alt","width","color","onClick","setStartDate","setEndDate","RangePicker","DatePicker","moment","PickerCCol","locale","direction","allowClear","onChange","date","_d","format","styled","CCol","items","columns","onDelete","selectedOptions","datePickerHidden","itemPerPageHidden","searchInputHidden","checkBoxInputHidden","func","listItems","setListItems","filterItems","setFilterItems","showModal","setShowModal","imgClick","setImgClick","startDate","endDate","searchOption","setSearchOption","allSelected","setAllSelected","allCheckBox","key","label","id","type","event","map","value","checked","_props","sorter","filter","getBadgeColor","status","getBadgeText","testOnClick","stopPropagation","useEffect","createdAt","xs","variant","split","handleSearchItemOnClick","console","log","CSmartTable","activePage","columnSorter","pagination","clickableRows","tableHeadProps","onRowClick","tableProps","hover","responsive","striped","scopedColumns","checkBox","item","_id","handleItemOnSelected","isAuthorized","reply","image","rounded","thumbnail","images","length","height","deleteBtn","handleDeleteOnClick","jobType","education","inquiryType","career","proceed","deliveryStatus","productImg","totalPrice","isPrice","startedAt","closedAt","deletedAt","updatedAt","noticeFiles","imageUrls","noItemsLabel","itemsPerPage","employmentColumns","setItems","isReadOnly","setIsReadOnly","recruitmentId","category","title","Date","location","duty","qualification","preference","hiringReason","departmentStatus","otherNote","selectedItem","setSelectedItem","onLoadEmploymentList","ApiConfig","data","query","path","method","HttpMethod","EndPoint","result","responses","alert","onLoadDetail","handleShowEmploymentDetailModal","PageHeader","ListTemplate","EmploymemtDetailModal","target","getList"],"sourceRoot":""}