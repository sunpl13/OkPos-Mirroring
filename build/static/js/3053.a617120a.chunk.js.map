{"version":3,"file":"static/js/3053.a617120a.chunk.js","mappings":"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","sources":["components/forms/inputForm/ModalSelect.js","components/forms/inputForm/ModalTextArrayInput.js","components/Modal/partnerCenter/DataRoom/DataRoomDetailModal.js","pages/partnerCenter/dataRoom/DataRoom.js"],"sourcesContent":["import {CCol, CFormSelect, CFormLabel} from '@coreui/react'\nimport * as PorpTypes from 'prop-types'\n\nconst ModalSelect = ({\n  onChange,\n  size,\n  placeholder,\n  label,\n  value,\n  readOnly,\n  id,\n  xs,\n  disabled = false,\n  isRequired,\n  options,\n}) => {\n  const newOptions = options.map(item => (\n    <option key={item.key} value={item.key}>\n      {item.value}\n    </option>\n  ))\n\n  return (\n    <>\n      <CFormLabel htmlFor='staticEmail' className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol xs={xs}>\n        <CFormSelect value={value} disabled={disabled} id={id} size={size} onChange={onChange} readOnly={readOnly}>\n          <option>{placeholder}</option>\n          {newOptions}\n        </CFormSelect>\n      </CCol>\n    </>\n  )\n}\n\nModalSelect.propTypes = {\n  onChange: PorpTypes.func,\n  size: PorpTypes.string,\n  placeholder: PorpTypes.string,\n  label: PorpTypes.string,\n  value: PorpTypes.any,\n  readOnly: PorpTypes.bool,\n  id: PorpTypes.string,\n  disabled: PorpTypes.bool,\n  isRequired: PorpTypes.bool,\n  options: PorpTypes.any,\n}\n\nexport default ModalSelect\n","import {CCol, CFormTextarea} from '@coreui/react'\nimport React from 'react'\n\nconst ModalTextArrayInput = ({id, value, rows, label, onChange, text, readOnly, disabled}) => {\n  return (\n    <CCol>\n      <CFormTextarea\n        id={id || ''}\n        label={label || ''}\n        rows={rows || 10}\n        value={value || ''}\n        onChange={onChange}\n        text={text || ''}\n        readOnly={readOnly}\n        disabled={disabled}\n      />\n    </CCol>\n  )\n}\n\nexport default ModalTextArrayInput\n","import React, {useEffect} from 'react'\nimport ModalInput from '../../../forms/inputForm/ModalInput'\nimport ModalTextArrayInput from '../../../forms/inputForm/ModalTextArrayInput'\nimport ModalFilesInput from '../../../forms/inputForm/ModalFilesInput'\nimport ModalSelect from '../../../forms/inputForm/ModalSelect'\nimport DetailModalEditModeTemplate from '../DetailModalEditModeTemplate'\nimport {CForm, CRow} from '@coreui/react'\nimport PropTypes from 'prop-types'\nimport ModalImageInput from '../../../forms/inputForm/ModalImageInput'\nimport ModalQuillEditor from '../../../forms/inputForm/ModalQuillEditor'\nimport MultiFileDownloadForm from '../../../forms/downloadForm/MultiFileDownloadForm'\n\nconst DataRoomDetailModal = ({\n  onChange,\n  value,\n  visible,\n  setVisible,\n  upDate,\n  onDelete,\n  editMode,\n  setEditMode,\n  editor,\n  setEditor,\n}) => {\n  const {id, title, category, dataRoomFiles, dataRoomImages, createdAt} = value\n  const dataOptions = [\n    {key: 'DRIVER', value: '드라이버'},\n    {key: 'MANUAL', value: '메뉴얼'},\n    {key: 'FIRMWARE', value: '펌웨어'},\n    {key: 'TECHNIC_ARTICLE', value: '기술자료'},\n    {key: 'OTHER', value: '기타'},\n  ]\n  return (\n    <DetailModalEditModeTemplate\n      title={id ? '자료 상세' : '자료 추가'}\n      visible={visible}\n      setVisible={setVisible}\n      upDate={upDate}\n      btnText={id ? '수정' : '추가'}\n      editMode={editMode}\n      setEditMode={setEditMode}\n      onDelete={id && onDelete}\n    >\n      <CRow className={'p-2'}>\n        {id ? (\n          <ModalInput\n            id={'createdAt'}\n            placeholder={'등록일'}\n            label={'등록일'}\n            value={createdAt}\n            onChange={onChange}\n            readOnly\n            disabled\n          />\n        ) : (\n          <ModalInput\n            id={'title'}\n            placeholder={'제목'}\n            label={'제목'}\n            value={title}\n            onChange={onChange}\n            readOnly={id && editMode}\n            disabled={id && editMode}\n          />\n        )}\n        <ModalSelect\n          id={'category'}\n          label={'카테고리'}\n          options={dataOptions || []}\n          value={category}\n          readOnly={editMode}\n          disabled={id && editMode}\n          onChange={onChange}\n          placeholder={'카테고리를 선택해주세요.'}\n          size={'sm'}\n        />\n      </CRow>\n      {id && (\n        <CRow className={'p-2'}>\n          <ModalInput\n            id={'title'}\n            placeholder={'제목'}\n            label={'제목'}\n            value={title}\n            onChange={onChange}\n            readOnly={id && editMode}\n            disabled={id && editMode}\n          />\n        </CRow>\n      )}\n      <CRow className={'p-2'}>\n        <ModalQuillEditor\n          id='content'\n          label={'본문'}\n          value={editor}\n          setValue={setEditor}\n          readOnly={id && editMode}\n          disabled={id && editMode}\n        />\n      </CRow>\n      <br />\n      <CRow className={'p-2'}>\n        <ModalImageInput label={'이미지'} value={dataRoomImages} readOnly={id && editMode} disabled={id && editMode} />\n      </CRow>\n      <CRow className={'p-2'}>\n        {id && editMode ? (\n          <MultiFileDownloadForm\n            id={'files'}\n            type={'file'}\n            placeholder={'첨부 파일'}\n            label={'첨부 파일'}\n            value={[]}\n            onChange={onChange}\n            readOnly={id && editMode}\n            disabled={id && editMode}\n          />\n        ) : (\n          <ModalFilesInput\n            id={'files'}\n            value={dataRoomFiles}\n            label={'첨부파일'}\n            readOnly={id && editMode}\n            disabled={id && editMode}\n          />\n        )}\n      </CRow>\n    </DetailModalEditModeTemplate>\n  )\n}\nDataRoomDetailModal.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.any,\n  visible: PropTypes.bool,\n  setVisible: PropTypes.func,\n  upDate: PropTypes.func,\n}\n\nexport default DataRoomDetailModal\n","import React, {useEffect, useState} from 'react'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {dataRoomList} from '../../../utils/columns/partnerCenter/Columns'\nimport MeterialDetailModal from '../../../components/Modal/partnerCenter/DataRoom/DataRoomDetailModal'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport {isEmpty} from '../../../utils/utility'\n\nconst DataRoom = () => {\n  const [items, setItems] = useState([])\n  const [selectedItem, setSelectedItem] = useState({})\n  const [editCheck, setEditCheck] = useState({})\n  const [showModal, setShowModal] = useState(false)\n  const [editMode, setEditMode] = useState(true)\n\n  const [editor, setEditor] = useState('')\n\n  // 자료실 API\n  const getList = async () => {\n    try {\n      const {\n        data: {isSuccess, result, code, message},\n      } = await ApiConfig.request({\n        method: HttpMethod.GET,\n        url: EndPoint.PARTNER_DATAROOMS,\n      })\n      console.log(result)\n      if (!isSuccess || isEmpty(result)) {\n        return\n      }\n      if (code === 1000) {\n        setItems(result?.adminDataRoomPartnerDTOs)\n      } else {\n        alert(message)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getList()\n  }, [])\n\n  /** Open Modal*/\n  const handleShowDataRoomDetailModal = async ({id}) => {\n    if (id) {\n      try {\n        const {\n          data: {isSuccess, result, code, message},\n        } = await ApiConfig.request({\n          method: HttpMethod.GET,\n          url: `${EndPoint.PARTNER_DATAROOMS}/${id}`,\n        })\n        console.log(result)\n        if (!isSuccess || isEmpty(result)) {\n          return\n        }\n        if (code === 1000) {\n          setSelectedItem({\n            id: id,\n            ...result,\n          })\n          setEditor(result?.content)\n          setEditCheck(result)\n        } else {\n          alert(message)\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    } else {\n      setSelectedItem({})\n      setEditCheck({})\n      setEditor('')\n    }\n    setShowModal(!showModal)\n  }\n\n  // Modal UpDate\n  const handleDetailModalUpDate = async () => {\n    const {id, title, content, dataRoomFiles, dataRoomImages, category} = selectedItem\n    const dataOptions = {\n      DRIVER: '드라이버',\n      MANUAL: '매뉴얼',\n      FIRMWARE: '펌웨어',\n      TECHNIC_ARTICLE: '기술자료',\n      OTHER: '기타',\n    }\n    const json = JSON.stringify({\n      title: title,\n      content: editor,\n      category: dataOptions[category],\n      files: {},\n      images: [],\n    })\n    if (id) {\n      if (window.confirm('수정하시겠습니까?')) {\n        if (!title) return alert('제목을 입력해 주세요.')\n        if (!category) return alert('카테고리를 선택해 주세요')\n        if (!editor) return alert('본문을 입력해 주세요.')\n        try {\n          const {\n            data: {isSuccess, result, code, message},\n          } = await ApiConfig.request({\n            method: HttpMethod.PUT,\n            url: `${EndPoint.PARTNER_DATAROOMS}/${id}`,\n            data: json,\n          })\n          console.log(message, result)\n          if (!isSuccess || isEmpty(result)) {\n            return alert(message)\n          }\n          if (code === 1000) {\n            getList()\n            setShowModal(false)\n            return alert(message)\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      }\n    } else {\n      if (window.confirm('등록하시겠습니까?')) {\n        if (!title) return alert('제목을 입력해 주세요.')\n        //if (!dataRoomFiles) return alert('파일을 등록해 주세요')\n        if (!category) return alert('카테고리를 선택해 주세요')\n        if (!editor) return alert('본문을 입력해 주세요.')\n        try {\n          const {\n            data: {isSuccess, result, code, message},\n          } = await ApiConfig.request({\n            method: HttpMethod.POST,\n            url: EndPoint.PARTNER_DATAROOMS,\n            data: json,\n          })\n          if (!isSuccess || isEmpty(result)) {\n            return alert(message)\n          }\n          if (code === 1000) {\n            getList()\n            setShowModal(false)\n            return alert(message)\n          }\n        } catch (error) {\n          console.log(error)\n        }\n        setShowModal(false)\n      }\n    }\n  }\n\n  const handleDataRoomModalOnChange = ({target: {id, value}}) => {\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n\n  const handleDataRoomModalOnDelete = async () => {\n    const {id} = selectedItem\n    if (window.confirm('정말로 삭제 하시겠습니까?')) {\n      try {\n        const {\n          data: {isSuccess, result, code, message},\n        } = await ApiConfig.request({\n          method: HttpMethod.PATCH,\n          url: `${EndPoint.PARTNER_DATAROOMS}/${id}`,\n        })\n        if (!isSuccess) {\n          return alert(message)\n        }\n        if (code === 1000) {\n          alert(message)\n          //window.location.reload()\n          getList()\n          setShowModal(false)\n        } else {\n          alert(message)\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  return (\n    <CRow>\n      <PageHeader title='자료 리스트' />\n      <CCol xs={12}>\n        <CCard className='mb-4'>\n          <CCardHeader>\n            <CForm className='row g-3'>\n              <CCol xs={1}>\n                <CButton color='primary' onClick={handleShowDataRoomDetailModal}>\n                  추가\n                </CButton>\n              </CCol>\n            </CForm>\n          </CCardHeader>\n          <CCardBody>\n            <ListTemplate\n              items={items}\n              onClick={handleShowDataRoomDetailModal}\n              columns={dataRoomList}\n              className={'userList'}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <MeterialDetailModal\n        value={selectedItem}\n        visible={showModal}\n        setVisible={setShowModal}\n        onChange={handleDataRoomModalOnChange}\n        upDate={handleDetailModalUpDate}\n        onDelete={handleDataRoomModalOnDelete}\n        editor={editor}\n        setEditor={setEditor}\n        editMode={editMode}\n        setEditMode={setEditMode}\n      />\n    </CRow>\n  )\n}\n\nexport default DataRoom\n"],"names":["onChange","size","placeholder","label","value","readOnly","id","xs","disabled","isRequired","newOptions","options","map","item","key","htmlFor","className","rows","text","visible","setVisible","upDate","onDelete","editMode","setEditMode","editor","setEditor","title","category","dataRoomFiles","dataRoomImages","createdAt","DetailModalEditModeTemplate","btnText","ModalInput","ModalSelect","ModalQuillEditor","setValue","ModalImageInput","MultiFileDownloadForm","type","ModalFilesInput","useState","items","setItems","selectedItem","setSelectedItem","setEditCheck","showModal","setShowModal","getList","ApiConfig","method","HttpMethod","url","EndPoint","data","isSuccess","result","code","message","console","log","isEmpty","adminDataRoomPartnerDTOs","alert","useEffect","handleShowDataRoomDetailModal","content","handleDetailModalUpDate","dataOptions","DRIVER","MANUAL","FIRMWARE","TECHNIC_ARTICLE","OTHER","json","JSON","stringify","files","images","window","confirm","handleDataRoomModalOnDelete","PageHeader","color","onClick","ListTemplate","columns","dataRoomList","target"],"sourceRoot":""}