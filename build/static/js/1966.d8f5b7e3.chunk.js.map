{"version":3,"file":"static/js/1966.d8f5b7e3.chunk.js","mappings":"sTAmBaA,GAAcC,EAAAA,EAAAA,aACzB,WAA8CC,GAAS,IAAD,EAApDC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAWC,EAAI,EAAJA,KAASC,GAAI,YACnCC,EAAaC,IACjB,cAAY,yCAEUL,GAAUA,IAAK,8BACpBE,GAASA,GAAI,GAE9BD,GAEF,OACE,gCAAKH,IAAKA,GAASK,GAAI,cACrB,eAAIF,UAAWG,EAAW,SAAEL,MAGlC,IAUFH,EAAYU,YAAc,c,sDCvBbC,GAAkBV,EAAAA,EAAAA,aAC7B,WAA4CC,GAAS,IAAnDC,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAAWO,EAAS,EAATA,UAAcL,GAAI,YACjCC,EAAaC,IACjB,YACA,CACEI,OAAQN,EAAKM,OACbC,SAAUP,EAAKO,UAEjBT,GAGIU,EAAYH,IAAwBL,EAAKM,OAAS,OAAS,KAEjE,OACE,+BAAIR,UAAWG,GAAiBD,EAAKM,QAAU,CAAC,eAAgB,SAAO,aACtD,MAAdE,GACC,SAAC,MAAK,gBAACV,UAAU,YAAYO,UAAWG,GAAeR,GAAI,IAAEL,IAAKA,EAAI,SACnEC,MAGH,SAACY,EAAS,CAACV,UAAU,YAAYH,IAAKA,EAAI,SACvCC,MAKX,IASFQ,EAAgBD,YAAc,kB,6KC8BjBM,GAAmBf,EAAAA,EAAAA,aAC9B,WAkBEC,GACI,IAjBFG,EAAS,EAATA,UAAU,EAAD,EACTY,WAAAA,OAAU,MAAG,EAAC,MACdb,MAAAA,OAAK,MAAG,QAAO,MACfc,OAAAA,OAAM,OAAO,MACbC,KAAAA,OAAI,OAAO,MACXC,aAAAA,OAAY,OAAO,MACnBC,YAAAA,OAAW,OAAG,SAAC,WAAc,mBAAyB,MACtDC,WAAAA,OAAU,OAAG,SAAC,WAAc,mBAAyB,MACrDC,MAAAA,OAAK,MAAG,EAAC,MACTC,WAAAA,OAAU,OAAG,SAAC,WAAc,qBAA0B,EACtDC,EAAkB,EAAlBA,mBACAC,EAAK,EAALA,MAAM,EAAD,EACLC,eAAAA,OAAc,OAAG,SAAC,WAAc,qBAA0B,EAC1DrB,EAAI,EAAJA,KACGC,GAAI,aAITqB,EAAAA,EAAAA,YAAU,WACRF,EAAQT,GAAcQ,EAAmBC,GAAO,EAClD,GAAG,CAACA,IAEJ,IAAMG,EAAcpB,IAAW,mBAAD,OAAoBL,GAASC,GAErDyB,EACGX,GAAQI,EAAQ,GAAKA,EAAQG,EAGhCK,EACGC,KAAKC,OAAOV,EAAQ,GAAK,GAG5BW,EACGF,KAAKG,MAAMZ,EAAQ,GAAK,GAG3Ba,EACGN,GAAYb,EAAac,EAAe,EAG3CM,EACGP,GAAYb,EAAaS,EAAQQ,EAGpCI,EACGf,GAASc,EAAY,EAAI,IAAMD,EAAa,EAAI,GAGnDG,EACGtB,EAAaiB,EAGhBM,EACGD,GAASb,EAAQA,EAAQa,GAASF,EAAY,EAAI,GAGrDI,EACGf,EAAQY,EAAgBZ,EAAQY,EAGnCI,EACAzB,EAAac,GAAgB,EACxBY,MAAMC,KACX,CACEC,OAAQJ,IAEV,SAACK,EAAIC,GAAC,OAAKA,EAAI,CAAC,IAGXJ,MAAMC,KACX,CACEC,OAAQJ,IAEV,SAACK,EAAIC,GACH,OAAOP,EAAWO,CACpB,IACAC,UAIAC,EAAU,SAACC,GACXA,IAAWjC,GACbQ,EAAmByB,EAEvB,EAEA,OACE,UAAClD,GAAW,gBAACK,UAAWwB,EAAa,aAAW,aAAavB,KAAMA,GAAUC,GAAI,IAAEL,IAAKA,EAAI,UACzFkB,IACC,SAACT,EAAe,CACdwC,QAAS,kBAAMF,EAAQ,EAAE,EACzB,aAAW,mBACX,gBAA8B,IAAfhC,EACfH,SAAyB,IAAfG,EAAiB,SAE1BI,IAGJH,IACC,SAACP,EAAe,CACdwC,QAAS,kBAAMF,EAAQhC,EAAa,EAAE,EACtC,aAAW,sBACX,gBAA8B,IAAfA,EACfH,SAAyB,IAAfG,EAAiB,SAE1BU,IAGJS,IACC,SAACzB,EAAe,CAACyC,KAAK,YAAYtC,UAAQ,sBAI3C4B,EAAMW,KAAI,SAAAN,GACT,OACE,SAACpC,EAAe,CACdwC,QAAS,kBAAMF,EAAQF,EAAE,EACzB,aAAY9B,IAAe8B,EAAC,uBAAmBA,GAAC,qBAAmBA,GACnElC,OAAQI,IAAe8B,EAAE,SAGxBA,GAFIA,EAKX,IACCV,IACC,SAAC1B,EAAe,CAACyC,KAAK,YAAYtC,UAAQ,sBAI3CI,IACC,SAACP,EAAe,CACdwC,QAAS,kBAAMF,EAAQhC,EAAa,EAAE,EACtC,aAAW,kBACX,gBAAeA,IAAeS,EAC9BZ,SAAUG,IAAeS,EAAM,SAE9BF,IAGJJ,IACC,SAACT,EAAe,CACdwC,QAAS,kBAAMF,EAAQvB,EAAM,EAC7B,aAAW,kBACX,gBAAeT,IAAeS,EAC9BZ,SAAUG,IAAeS,EAAM,SAE9BJ,OAKX,IAoBFN,EAAiBN,YAAc,kB,0LChPxB,SAAS4C,EAA8BpD,EAAqDqD,GACjG,GAAW,MAAPrD,EACJ,GAWK,SAAoBqD,GACzB,SAAUA,GAAoC,qBAA3B,CAAC,EAAEC,SAASC,KAAKF,GACtC,CAbMG,CAAWxD,GACbA,EAAIqD,QAEJ,IACErD,EAAIyD,QAAUJ,CAGhB,CAFE,MAAOK,GACP,MAAM,IAAIC,MAAM,wBAAD,OAAyBN,EAAK,qBAAarD,EAAG,KAC/D,CAEJ,CC9BO,I,sFCiCM4D,GAAW7D,EAAAA,EAAAA,aACtB,WAUEC,GACI,IATFG,EAAS,EAATA,UACA0D,EAAK,EAALA,MAAM,EAAD,EACLnD,UAAWG,OAAS,MAAG,MAAK,EAC5BT,EAAI,EAAJA,KAAK,EAAD,EACJ0D,QAAAA,OAAO,MAAG,SAAQ,MAClBC,oBAAAA,OAAmB,MAAG,aAAY,EAC/B1D,GAAI,YAIHC,EAAaC,IAAW,WAAD,OAChBuD,GAAO,eACVD,GACRzD,GAAI,kBAAe0D,EAAO,YAAI1D,GAC9BD,GAGF,OACE,SAACU,GAAS,gBAACV,UAAWG,EAAY4C,KAAK,UAAa7C,GAAI,IAAEL,IAAKA,EAAI,UACjE,iBAAMG,UAAU,kBAAiB,SAAE4D,MAGzC,IAYFH,EAASpD,YAAc,W,sDC7CVwD,GAAgBjE,EAAAA,EAAAA,aAC3B,WAA4DC,GAAS,IAAnEC,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAAW8D,EAAU,EAAVA,WAAW,EAAD,EAAEC,QAAAA,OAAO,MAAG,GAAG,EAAK7D,GAAI,YACjD8D,GAAkBC,EAAAA,EAAAA,QAAuB,MACzCC,EHtBH,WAAwG,IAAD,uBAA1DC,EAAI,yBAAJA,EAAI,gBACtD,OAAOC,EAAAA,EAAAA,UAAQ,WACb,OAAID,EAAKE,OAAM,SAAAxE,GAAG,OAAW,MAAPA,CAAW,IACxB,KAEF,SAACyE,GACNH,EAAKI,SAAQ,SAAA1E,GACXoD,EAAUpD,EAAKyE,EACjB,GACF,CACF,GAAGH,EACL,CGWsBK,CAAa3E,EAAKmE,GAEpC,GAAgDS,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAArDC,EAAgB,KAAEC,EAAmB,KAEtCC,EAAsB,WAC1B,IAAKZ,IAAoBA,EAAgBV,UAAYQ,EACnD,MAAO,CAAC,EAEV,IAAMe,EAASb,EAAgBV,QAAQwB,cACvC,IAAKD,EACH,MAAO,CAAC,EAEV,IAAME,EAAeF,EAAOG,wBACtBN,EAAmB,CAAC,EAc1B,OAbAZ,EAAWS,SAAQ,YAAqB,IAAnBU,EAAK,EAALA,MAAOC,EAAK,EAALA,MACpBC,EAAUN,EAAOO,cAAcF,GACrC,GAAKC,GAAYF,EAAjB,CAGA,IAAMI,EAASF,EAAQH,wBACvBC,EAAMV,SAAQ,SAAAe,GAEZ,IAAMC,EAAa5D,KAAK6D,IAAIH,EAAOC,GAAQP,EAAaO,IAExDZ,EAAiBY,GAAK,UAAMC,EAAU,KACxC,GAPA,CAQF,IACOb,CACT,GAEAnD,EAAAA,EAAAA,YAAU,WACRoD,EAAoBC,IACtB,GAAG,CAACa,KAAKC,UAAUd,OAInB,IAAMe,EAAUvF,IAAWJ,GAErB4F,GAAe,QACnBC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,GACLtB,GAGCuB,GAA0B,kBAC3BL,GAAe,IAClBM,SAAU,WACVC,gBAAgB,mBAAD,OAAqBpC,EAAO,OAG7C,OACE,gCAAK/D,UAAW2F,EAASS,MAAOH,GAAiB/F,GAAI,IAAEL,IAAKqE,EAAU,SACnEpE,IACC,gBACEsG,MAAO,CACLF,SAAU,WACVL,IAAK,MACLC,KAAM,MACNO,UAAW,qCACX,UAEF,SAAC5C,EAAQ,CAACE,QAAQ,OAAOD,MAAM,gBAKzC,IAUFG,EAAcxD,YAAc,gB,sICjDfiG,GAAS1G,EAAAA,EAAAA,aACpB,WAgBEC,GACI,IAAD,EAfDC,EAAQ,EAARA,SACAC,EAAK,EAALA,MACAwG,EAAW,EAAXA,YACAC,EAAQ,EAARA,SACAC,EAAU,EAAVA,WACAC,EAAO,EAAPA,QACA1G,EAAS,EAATA,UACA0D,EAAK,EAALA,MACAiD,EAAK,EAALA,MACAC,EAAU,EAAVA,WACAC,EAAK,EAALA,MACAC,EAAO,EAAPA,QACG5G,GAAI,YAIHC,EAAaC,IACjB,SAAO,+BAEKL,GAAUA,IAAK,2BACb2G,GAAYA,IAAO,0BACpBH,GAAgBA,IAAW,SACtC,iBAAkBC,IAAQ,SAC1B,mBAAoBC,IAAU,yBACpB/C,GAAUA,IAAK,SACzB,cAAeiD,IAAK,SACpB,WAAYE,IAAK,SACjB,gBAAiBC,GAAO,GAE1B9G,GAGF,OAAO4G,GACL,gBAAK5G,UAAiC,mBAAf4G,EAA2B,mBAAkB,2BAAuBA,GAAa,UACtG,kCAAO5G,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACvEC,QAIL,kCAAOE,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACvEC,IAGP,IAqBFwG,EAAOjG,YAAc,S,uCC3GR2G,GAAapH,EAAAA,EAAAA,aACxB,WAAwCC,GAAS,IAA/CC,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAAW0D,EAAK,EAALA,MAAUxD,GAAI,YAC7BC,EAAaC,KAAW,0BAEhBsD,GAAUA,GAEtB1D,GAGF,OACE,kCAAOA,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACvEC,IAGP,IASFkH,EAAW3G,YAAc,a,uCCvBZ4G,GAAarH,EAAAA,EAAAA,aACxB,WAAwCC,GAAS,IAA/CC,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAAW0D,EAAK,EAALA,MAAUxD,GAAI,YAC7BC,EAAaC,KAAW,0BAEhBsD,GAAUA,GAEtB1D,GAGF,OACE,kCAAOA,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACvEC,IAGP,IASFmH,EAAW5G,YAAc,a,wDCfZ6G,GAAYtH,EAAAA,EAAAA,aACvB,WAAuDC,GAAS,IAAD,EAA7DC,EAAQ,EAARA,SAAUU,EAAM,EAANA,OAAQT,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAW0D,EAAK,EAALA,MAAUxD,GAAI,YAC5CC,EAAaC,KAAU,+BAEfL,GAAUA,IAAK,SACzB,eAAgBS,IAAM,yBACZkD,GAAUA,GAAK,GAE3B1D,GAGF,OACE,+BAAIA,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACpEC,IAGP,IAWFoH,EAAU7G,YAAc,Y,wDCvBX8G,GAAiBvH,EAAAA,EAAAA,aAC5B,WAAuDC,GAAS,IAAD,EAA7DC,EAAQ,EAARA,SAAUU,EAAM,EAANA,OAAQT,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAW0D,EAAK,EAALA,MAAUxD,GAAI,YAC5CC,EAAaC,KAAU,+BAEfL,GAAUA,IAAK,SACzB,eAAgBS,IAAM,yBACZkD,GAAUA,GAAK,GAE3B1D,GAGF,OACE,+BAAIA,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACpEC,IAGP,IAWFqH,EAAe9G,YAAc,iB,wKCnChB+G,GAAkBxH,EAAAA,EAAAA,aAC7B,WAaEC,GACI,IAZFwH,EAAa,EAAbA,cACAC,EAAY,EAAZA,aACAC,EAA0B,EAA1BA,2BACAC,EAAY,EAAZA,aACAC,EAAY,EAAZA,aACAC,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAa,EAAbA,cACAC,EAAU,EAAVA,WACG3H,GAAI,YAaH4H,EAAgB,SAACC,GACrB,IAAMC,EAASD,EAAMC,OACfC,EAAUD,EAAOC,QAAQ,MACzBnI,EAAWmI,EAAU3F,MAAMC,KAAK0F,EAAQnI,UAAY,GACpDoI,EAAcpI,EAASqI,QAAO,SAAAC,GAAK,OAAIA,EAAMC,SAASL,EAAO,IAAE,GACrE,OAAOL,EAAe7H,EAASwI,QAAQJ,GACzC,EAEMK,EAAkBV,EAAaF,EAAenF,OAAS,EAAImF,EAAenF,OAEhF,OACE,UAACyE,GAAU,0BACJI,GAAiB,CACpBjB,MAAO,CAACoC,OAAQ,aAEdtI,GAAI,IACRL,IAAKA,EAAI,UAERyH,EAAatE,KAAI,SAACyF,EAAoBC,GACrC,OACE,UAAC,WAAc,YACb,UAACxB,GAAS,0BACHuB,EAAKE,SAAM,UAAQF,EAAKE,SACxBtB,GAAiB,CAACuB,SAAU,IAAE,IACnC9F,QAAS,SAAAiF,GAAK,OACZL,GAAcA,EAAWe,EAAMC,EAAUnB,EAA4BO,EAAcC,GAAQA,EAAM,EAClG,UAEAF,IACC,SAACV,EAAc,WACb,SAAC,KAAU,CACT0B,UAASJ,EAAKK,WAAYL,EAAKK,UAC/BC,SAAU,SAAAhB,GAAK,OAAIN,GAAgBA,EAAagB,EAAKO,IAAKjB,EAAMC,OAAOa,QAAQ,MAIpFlB,EAAe3E,KAAI,SAACiG,EAASC,GAC5B,OACGtB,GACCA,EAAcqB,IACdE,EAAAA,aAAmBvB,EAAcqB,GAASR,EAAMC,EAAUnB,GAA6B,CACrF6B,IAAKF,MAEP,mBAAC/B,GAAc,kBApDN,SAACsB,EAAYQ,GAMtC,OALcR,EAAKY,aAAU,kBACvBZ,EAAKY,WAAgB,MAAC,UAAQZ,EAAKY,WAAgB,MACnDZ,EAAKY,WAAWJ,KAAQ,UAAQR,EAAKY,WAAWJ,IAIxD,CA6CsCK,CAAmBb,EAAMQ,IAAQ,IAAEG,IAAKF,IACzDK,OAAOd,EAAKQ,IAIrB,QAEDrB,GAAiBA,EAAc4B,UAC9B,iCACE,SAACtC,EAAS,WACR,SAACC,EAAc,CACbsC,QAASlB,EACTvI,UAAU,MACVoG,MAAO,CAACsD,kBAAmB,GAC3Bd,UAAW,OAGf,SAAC1B,EAAS,CACRpE,QAAS,SAAAiF,GAAK,OACZL,GAAcA,EAAWe,EAAMC,EAAUnB,EAA4BO,EAAcC,IAAQ,EAAK,EAElG/H,UAAU,MAAK,UAGf,SAACmH,EAAc,CAACsC,QAASlB,EAASvI,UAAU,MAAMoG,MAAO,CAACuD,OAAQ,GAAG,SAClE/B,EAAc4B,QAAQf,EAAMC,EAAUnB,MACxB,iBAJFmB,SA7CFA,EAuDzB,KACEpB,EAAa9E,SACb,SAAC0E,EAAS,WACR,SAACC,EAAc,CAACsC,QAASlB,EAAQ,SAAEf,SAK7C,IAeFJ,EAAgB/G,YAAc,kB,qDCxIjBuJ,GAAqBhK,EAAAA,EAAAA,aAChC,WAA0EC,GAAS,IAAD,IAAhFgK,QAAAA,OAAO,OAAG,SAAC,IAAK,CAACC,MAAO,GAAIC,KAAMC,EAAAA,IAAc,EAAEC,EAAU,EAAVA,WAAe/J,GAAI,YACrE,OACE,2CACEgK,KAAK,SACLlK,UAAU,wBACJiK,GAAc,CAClBxJ,UAAU,EACVmI,UAAW,IAET1I,GAAI,IACRL,IAAKA,EAAI,SAERgK,IAGP,IAQFD,EAAmBvJ,YAAc,qB,kDCrBpB8J,GAAoBvK,EAAAA,EAAAA,aAC/B,WAAmDC,GAAS,IAA1DuK,EAAW,EAAXA,YAAaC,EAAiB,EAAjBA,kBAAmBnH,EAAK,EAALA,MAAUhD,GAAI,YAC9C,OACE,iBAAKF,UAAU,WAAU,WACvB,SAAC,KAAU,CAACA,UAAU,6BAA4B,SAAEoK,KACpD,gBAAKpK,UAAU,cAAa,UAC1B,SAAC,MAAU,gBAACsK,YAAaD,EAAmBnH,MAAOA,GAAWhD,GAAI,IAAEL,IAAKA,SAIjF,IASFsK,EAAkB9J,YAAc,oB,uCCbnBkK,GAAa3K,EAAAA,EAAAA,aACxB,WAAwCC,GAAS,IAA/CC,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAAW0D,EAAK,EAALA,MAAUxD,GAAI,YAC7BC,EAAaC,KAAW,0BAEhBsD,GAAUA,GAEtB1D,GAGF,OACE,kCAAOA,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACvEC,IAGP,IASFyK,EAAWlK,YAAc,a,uCCvBZmK,GAAmB5K,EAAAA,EAAAA,aAC9B,WAAwCC,GAAS,IAA/CC,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAAW0D,EAAK,EAALA,MAAUxD,GAAI,YAC7BC,EAAaC,KAAW,0BAEhBsD,GAAUA,GAEtB1D,GAGF,OACE,+BAAIA,UAAWG,QAA0B4G,GAAe7G,GAAI,IAAEL,IAAKA,EAAI,SACpEC,IAGP,IASF0K,EAAiBnK,YAAc,mB,uQCblBoK,GAAkB7K,EAAAA,EAAAA,aAC7B,WAmBEC,GACI,IAlBF6K,EAAY,EAAZA,aACAC,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aAAa,EAAD,EACZrK,UAAWG,OAAS,MAAG6J,EAAU,EACjCM,EAAO,EAAPA,QACAC,EAAoB,EAApBA,qBACAC,EAAmB,EAAnBA,oBACAC,EAAsB,EAAtBA,uBACAC,EAAU,EAAVA,WACApD,EAAU,EAAVA,WACAqD,EAAS,EAATA,UACAC,EAAW,EAAXA,YACAC,EAAW,EAAXA,YACAC,EAAoB,EAApBA,qBACAC,EAAqB,EAArBA,sBACGpL,GAAI,YAIHqL,EAAuB,SAACC,GAC5B,MAAsB,kBAAXA,GAAuBA,EAAO7C,OAChC6C,EAAO7C,OAET,CAAC,CACV,EAEM8C,EAAwB,SAACD,GAC7B,IAAMpF,EAAQ,CAACsF,cAAe,SAAUC,SAAU,SAAUnD,OAAQ,IAUpE,OAPEoC,IACmB,kBAAXY,GACa,kBAAXA,IAAiD,qBAAlBA,EAAOI,QAA0BJ,EAAOI,WAEjFxF,EAAMoC,OAAS,WAGK,kBAAXgD,GAAuBA,EAAO7C,QAChC,kBAAIvC,GAAUoF,EAAOK,QAEvBzF,CACT,EAEM0F,EAAc,SAACC,GACnB,OAAOA,EACJC,QAAQ,SAAU,KAClBA,QAAQ,MAAO,KACfA,QAAQ,qBAAsB,SAC9BC,MAAM,KACNjJ,KAAI,SAAAkJ,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,EAAE,IACxDC,KAAK,IACV,EAEMC,EAAQ,SAACf,GAAuB,MAClB,kBAAXA,OACczE,IAAjByE,EAAOe,MACLf,EAAOe,MACPT,EAAYN,EAAOpC,KACrB0C,EAAYN,EAAO,EAEnBpC,EAAM,SAACoC,GAAuB,MAAwB,kBAAXA,EAAsBA,EAAOpC,IAAMoC,CAAM,EAEpFgB,EAAuB,SAACpD,GAC5B,OAAI+B,GAAeA,EAAYK,SAAWpC,GACpC+B,EAAYsB,MACPtB,EAAYsB,MAKhB,CACT,EAgBMC,GAAczI,EAAAA,EAAAA,QAAyB,MAU7C,OARA1C,EAAAA,EAAAA,YAAU,WACU,kBAAd2J,EACEwB,EAAYpJ,UAASoJ,EAAYpJ,QAAQqJ,eAAgB,GAEzDD,EAAYpJ,UAASoJ,EAAYpJ,QAAQqJ,eAAgB,EAEjE,GAAG,CAACzB,KAGF,UAACxK,GAAS,kBAAKR,GAAI,IAAEL,IAAKA,EAAI,WAC5B,UAACqH,EAAS,WACPW,IACC,SAAC2C,EAAgB,WACf,SAAC,KAAU,CACT3B,QAA8B,mBAAdqC,GAA0BA,EAC1CnC,SAAU,kBAAMiC,GAA0BA,GAAwB,EAClEnL,IAAK6M,MAIV7B,EAAQ7H,KAAI,SAACwI,EAAyBtC,GACrC,OACE,mBAACsB,GAAgB,kBACXe,EAAqBC,IAAO,IAChC1I,QAAS,kBAAMmI,GAAcA,EAAW7B,EAAIoC,GAAStC,EAAM,EAC3D9C,MAAOqF,EAAsBD,GAC7BpC,IAAKF,KAEL,gBAAKlJ,UAAU,WAAU,SAAEuM,EAAMf,KAChCZ,IACoB,kBAAXY,IAAsD,qBAAlBA,EAAOI,QAAgCJ,EAAOI,UA5C/E,SAACJ,GACxB,OAA0C,IAAtCgB,EAAqBpD,EAAIoC,KACpB,iBAAMxL,UAAU,4BAA2B,SAAEoL,IAEZ,QAAtCoB,EAAqBpD,EAAIoC,KACpB,iBAAMxL,UAAU,iBAAgB,SAAEqL,IAED,SAAtCmB,EAAqBpD,EAAIoC,KACpB,iBAAMxL,UAAU,iBAAgB,SAAEsL,SAD3C,CAGF,CAmCcsB,CAAiBpB,GAGzB,OAEDd,IACC,UAACxD,EAAS,WACPW,IAAc,SAAC2C,EAAgB,IAC/BK,EAAQ7H,KAAI,SAACwI,EAAyBtC,GACrC,OACE,mBAACsB,GAAgB,kBAAKe,EAAqBC,IAAO,IAAEpC,IAAKF,KACnC,kBAAXsC,IAEoB,qBAAlBA,EAAOrD,QAEdqD,EAAOrD,WACT,SAAC,KAAU,CACTlI,KAAK,KACL4M,QAAS,SAAA9E,GAAK,OACZgD,GACAA,EAAoB3B,EAAIoC,GAAUzD,EAAMC,OAA4B9E,MAAM,EAE5E6F,SAAU,SAAAhB,GAAK,OACb+C,GACAA,EAAqB1B,EAAIoC,GAAUzD,EAAMC,OAA4B9E,MAAM,EAE7EA,MAAOyH,GAAqBA,EAAkBvB,EAAIoC,IAAWb,EAAkBvB,EAAIoC,IAAW,GAC9F,qCAA6Be,EAAMf,GAAO,oBAKpD,UAKV,IAsBFf,EAAgBpK,YAAc,kB,iECxMjByM,GAAkClN,EAAAA,EAAAA,aAC7C,WAAkEC,GAAS,IAAzEkN,EAAY,EAAZA,aAAcC,EAAiB,EAAjBA,kBAAmBC,EAAmB,EAAnBA,oBAAwB/M,GAAI,YAC7D,OACE,iBAAKF,UAAU,MAAK,WAClB,SAAC,KAAU,CAACA,UAAU,0BAAyB,SAAEgN,KACjD,gBAAKhN,UAAU,WAAU,UACvB,SAAC,MAAW,gBAACkN,aAAcH,GAAkB7M,GAAI,IAAEL,IAAKA,EAAI,SACzDoN,GACCA,EAAoBjK,KAAI,SAACH,EAAQqG,GAC/B,OACE,mBAAQhG,MAAOL,EAAO,SACnBA,GADyBqG,EAIhC,WAKZ,IASF4D,EAAgCzM,YAAc,kC,uqBClBjC8M,GAAcvN,EAAAA,EAAAA,aACzB,WA4CEC,GACI,IAAD,IA3CDe,WAAAA,OAAU,MAAG,EAAC,EACdwM,EAAO,EAAPA,QACA/F,EAAa,EAAbA,cACAqD,EAAY,EAAZA,aACA2C,EAAiB,EAAjBA,kBACAxC,EAAO,EAAPA,QACAD,EAAY,EAAZA,aACA0C,EAAM,EAANA,OAAO,EAAD,EACNC,OAAAA,OAAM,OAAO,EACblL,EAAK,EAALA,MAAM,EAAD,EACL0K,aAAAA,OAAY,MAAG,GAAE,MACjBC,kBAAAA,OAAiB,MAAG,kBAAiB,MACrCC,oBAAAA,OAAmB,MAAG,CAAC,EAAG,GAAI,GAAI,IAAG,EACrCO,EAAkB,EAAlBA,mBACAC,EAAO,EAAPA,QAAQ,EAAD,EACPjG,aAAAA,OAAY,MAAG,iBAAgB,EAC/BpG,EAAkB,EAAlBA,mBACAsM,EAAoB,EAApBA,qBACAC,EAAqB,EAArBA,sBACAC,EAAoB,EAApBA,qBACAlG,EAAU,EAAVA,WACAmG,EAAqB,EAArBA,sBACAC,EAAc,EAAdA,eACAC,EAAmB,EAAnBA,oBACAC,EAAU,EAAVA,WACAC,GAAe,EAAfA,gBACArG,GAAa,EAAbA,cACAC,GAAU,EAAVA,WACAqG,GAAW,EAAXA,YAAY,GAAD,EACX9C,YAAAA,QAAW,QAAG,SAAC,IAAK,CAACtB,MAAO,GAAIC,KAAMoE,EAAAA,GAAqB,OAAQ,QACnE9C,qBAAAA,QAAoB,QAAG,SAAC,IAAK,CAACvB,MAAO,GAAIC,KAAMqE,EAAAA,GAAiB,OAAQ,QACxE9C,sBAAAA,QAAqB,QAAG,SAAC,IAAK,CAACxB,MAAO,GAAIC,KAAMsE,EAAAA,GAAoB,OAAQ,GAC5EC,GAAc,EAAdA,eACAC,GAAc,EAAdA,eACAC,GAAW,EAAXA,YAAY,GAAD,EACXC,iBAAAA,QAAgB,OAAG,UAAS,QAC5BC,uBAAAA,QAAsB,OAAG,iBAAgB,GACzCC,GAAgB,EAAhBA,iBACAC,GAAc,EAAdA,eACAC,GAAU,EAAVA,WACG3O,IAAI,YAKT,IAAqCuE,EAAAA,EAAAA,UAAiB7D,GAAW,iBAA1DkO,GAAW,MAAEC,GAAa,MACjC,IAA2BtK,EAAAA,EAAAA,UAAyB,IAAG,iBAAhDuK,GAAM,MAAEC,GAAQ,MACvB,IAAyCxK,EAAAA,EAAAA,UAASsI,GAAa,iBAAxDmC,GAAa,MAAEC,GAAe,MACrC,IAAkD1K,EAAAA,EAAAA,UAA4B,CAAC,GAAE,iBAA1EkG,GAAiB,MAAEyE,GAAoB,MAC9C,IAAsC3K,EAAAA,EAAAA,YAA4B,iBAA3D4K,GAAW,MAAEC,GAAc,MAClC,IAAsC7K,EAAAA,EAAAA,UAAsB,CAAC,GAAE,iBAAxD0G,GAAW,MAAEoE,GAAc,MAClC,IAAgD9K,EAAAA,EAAAA,UAAiBkK,IAAsC,IAAG,iBAAnGa,GAAgB,MAAEC,GAAmB,OAG5CrL,EAAAA,EAAAA,UAAQ,WACF/B,GAASA,EAAMG,OAAS0M,GAAgBJ,GAAcI,IACxDH,GAAc,GAIhBzM,MAAMoN,QAAQrN,IACZ4M,GACO,OAAL5M,QAAK,IAALA,OAAK,EAALA,EAAOW,KAAI,SAACyF,EAAYS,GACtB,OAAO,kBAAIT,GAAI,IAAEO,IAAKE,GACxB,IAEN,GAAG,CAACzD,KAAKC,UAAUrD,MAEnB+B,EAAAA,EAAAA,UAAQ,WACNiJ,GAAqB+B,GAAqB/B,EAC5C,GAAG,CAAC5H,KAAKC,UAAU2H,MAEnBjJ,EAAAA,EAAAA,UAAQ,WACNmL,IAAe,UAAIrB,IACrB,GAAG,CAACzI,KAAKC,UAAUwI,OAEnB9J,EAAAA,EAAAA,UAAQ,kBAAM+K,GAAgBpC,EAAa,GAAE,CAACA,IAI9C,IAaM4C,GAAe,SAACnE,EAAgBtC,GACpC,GAdiB,SAACxG,GAClB,IACI8I,EADEoE,EAAeC,GAAiBC,SAASnI,GAAejF,IAG9D,OADImI,IAASW,EAASX,EAAQnI,IAE5BkI,KACEC,GACkB,kBAAXW,GACY,kBAAXA,IAAiD,qBAAlBA,EAAOI,QAA0BJ,EAAOI,UACjFgE,CAEJ,CAGOG,CAAW7G,GAAhB,CAIA,IAAMuD,EAAQtB,IAA4B,CAACK,OAAQ,GAAIiB,MAAO,IAE1DA,EAAMjB,SAAWA,EACC,IAAhBiB,EAAMA,MACRA,EAAMA,MAAQ,MACW,QAAhBA,EAAMA,MACfA,EAAMA,MAAQ,OAEc,kBAAjB7B,GAA8BA,EAAaoF,UAGpDvD,EAAMA,MAAQ,EAFdA,EAAMA,MAAQ,OAMlBA,EAAMjB,OAASA,EACfiB,EAAMA,MAAQ,OAEhB8C,IAAe,UAAI9C,GApBnB,CAqBF,EAUMwD,GAAqB,SAAChH,EAAiB/F,EAAegH,GAC1D,IAAMgG,EAASxF,GAAwC,kBAAjBA,IAAmD,IAAtBA,EAAayF,KAChF,KAAKD,GAAmB,UAAThG,IAAuBgG,GAAmB,WAAThG,GAAhD,CAGA,IAAMkG,GAAQ,kBAAOzF,IAAiB,wBAAM1B,GAAY/F,IACxD6L,GAAc,GACdK,GAAqBgB,EAHrB,CAIF,EAEMC,GAAoB,SAACnN,EAAegH,GACxC,IAAMgG,EAAS1B,IAAsC,kBAAhBA,KAAiD,IAArBA,GAAY2B,KACxED,GAAmB,UAAThG,IAAuBgG,GAAmB,WAAThG,IAGhD6E,GAAc,GACdU,GAAoBvM,GACtB,EAEMoN,GAAQ,WACZb,GAAoB,IACpBL,GAAqB,CAAC,GACtBG,GAAe,CAAC,EAClB,EAIMgB,GAAUC,OAAOC,KAAKzB,GAAO,IAAM,CAAC,GAAG7G,QAAO,SAAAuI,GAAE,MAAqB,MAAjBA,EAAGvE,OAAO,EAAU,IACxExE,GAAiBkD,EACnBA,EAAQ7H,KAAI,SAACwI,GACX,MAAsB,kBAAXA,EAA4BA,EAAOpC,IAClCoC,CACd,IACA+E,GACEV,GAAmBlI,GAAeQ,QAAO,SAAA4D,GAAI,OAAIwE,GAAQT,SAAS/D,EAAK,IAGvE4E,IAAkCvM,EAAAA,EAAAA,UAAQ,WAC9C,IAAI/B,EAAQ2M,GACZ,OAAItE,GAAwC,kBAAjBA,GAA6BA,EAAakG,UAGrEJ,OAAOK,QAAQlG,IAAmBpG,SAAQ,YAAmB,IAAD,eAAhB6E,EAAG,KAAElG,EAAK,KAC9CwH,EAAenB,OAAOrG,GAAO4N,cAC/BpG,GAAgBmF,GAAiBC,SAAS1G,KAC5C/G,EAAQA,EAAM8F,QAAO,SAAAM,GACnB,OAAOc,OAAOd,EAAKW,IAAM0H,cAAchB,SAASpF,EAClD,IAEJ,IATSrI,CAWX,GAAG,CAACoD,KAAKC,UAAUiF,IAAoBlF,KAAKC,UAAUsJ,MAEhD+B,IAAgC3M,EAAAA,EAAAA,UAAQ,WAC5C,IAAI/B,EAAQsO,GACZ,IAAKnB,IAAqBhB,IAAsC,kBAAhBA,IAA4BA,GAAYoC,SACtF,OAAOvO,EAET,IAAM8F,EAASqH,GAAiBsB,cAKhC,OAHAzO,EAAQA,EAAM8F,QAAO,SAAAM,GACnB,QAASoH,GAAiBmB,MAAK,SAAA5H,GAAG,OAFR6H,EAE+BxI,EAAKW,GAFvBG,OAAO0H,GAAKH,cAAchB,SAAS3H,GAAjD,IAAC8I,CAEyC,GACrE,GAEF,GAAG,CAACzB,GAAkB/J,KAAKC,UAAUiJ,IAAmBlJ,KAAKC,UAAUiL,MAEjEO,IAA8B9M,EAAAA,EAAAA,UAAQ,WAC1C,IAAM+M,EAAiB,OAAXhG,SAAW,IAAXA,QAAW,EAAXA,GAAaK,OACzB,IACG2F,IACAtB,GAAiBC,SAASqB,IAC1BvG,GAAwC,kBAAjBA,GAA6BA,EAAagG,SAElE,OAAOG,GAGT,IAAMK,EAA6B,QAAtBjG,GAAYsB,MAAkB,EAA0B,SAAtBtB,GAAYsB,OAAoB,EAAI,EAQnF,OAPesE,GAAc1E,QAAQgF,MAAK,SAAC5I,EAAM6I,GAC/C,IAAMpO,EAAQuF,EAAK0I,GACbI,EAASD,EAAMH,GACfK,EAAqB,kBAAVtO,EAAqBA,EAAQqG,OAAOrG,GAAO4N,cACtDW,EAAsB,kBAAXF,EAAsBA,EAAShI,OAAOgI,GAAQT,cAC/D,OAAOU,EAAIC,EAAI,EAAIL,EAAOK,EAAID,GAAK,EAAIJ,EAAO,CAChD,GAEF,GAAG,CACD3L,KAAKC,UAAUqL,IACftL,KAAKC,UAAUyF,IACf1F,KAAKC,UAAUkF,GACfnF,KAAKC,UAAUiL,IACflL,KAAKC,UAAUsJ,MAGX0C,GAAwBxC,GAAgBvN,KAAKG,KAAKoP,GAAY1O,OAAS0M,IAAiB,EAExF3H,GAAqCuH,IAAeA,GAAc,GAAKI,GAAgB,EAEvFyC,GAAoCT,GAAY7E,MACpD9E,GACAA,GAA6B2H,IAGzB5H,GAA+BwH,GAAc6C,GAAoBT,GAEjEjH,GAAqBuF,KAA+B,OAAXrE,SAAW,IAAXA,QAAW,EAAXA,GAAaK,SAAUgF,OAAOoB,OAAOjH,IAAmB2B,KAAK,KAI5G/K,EAAAA,EAAAA,YAAU,WACRH,GAAsBA,EAAmB0N,GAC3C,GAAG,CAACA,MAEJvN,EAAAA,EAAAA,YAAU,WACRqM,GAAwBA,EAAqBsB,IAC7CnC,IAAiBmC,IAAiBH,GAAc,EAClD,GAAG,CAACG,MAEJ3N,EAAAA,EAAAA,YAAU,WACR4J,IAAe2C,GAAkBA,EAAe3C,GAClD,GAAG,CAAC1F,KAAKC,UAAUyF,OAEnB5J,EAAAA,EAAAA,YAAU,WACRmM,GAAwBA,EAAqB/C,GAC/C,GAAG,CAAClF,KAAKC,UAAUiF,OAEnBpJ,EAAAA,EAAAA,YAAU,WACRwM,GAAuBA,EAAoByB,GAC7C,GAAG,CAACA,MAEJjO,EAAAA,EAAAA,YAAU,WACRoM,GAAyBA,EAAsBuD,GACjD,GAAG,CAACzL,KAAKC,UAAUwL,MAEnB,IAMMlG,GAAyB,WAU7BiE,IAToB,IAAhBI,GAUFL,GAAOhM,KAAI,SAACyF,GACV,OAAO,kBAAIA,GAAI,IAAEK,WAAW,GAC9B,IAVEkG,GAAOhM,KAAI,SAACyF,GACV,OAAO,kBAAIA,GAAI,IAAEK,WAAW,GAC9B,IAUN,EAuBA,OArBAvH,EAAAA,EAAAA,YAAU,WACR,GAAIsG,GAAY,CACd,IAAMgK,EAAW7C,GAAO7G,QAAO,SAAAM,GAAI,OAAuB,IAAnBA,EAAKK,SAAkB,IAG9D,GAFA+E,GAAyBA,EAAsBgE,GAE3CA,EAASrP,SAAWwM,GAAOxM,OAE7B,YADA8M,IAAe,GAIjB,GAAwB,IAApBuC,EAASrP,OAEX,YADA8M,IAAe,GAIO,IAApBuC,EAASrP,QAAgBqP,EAASrP,SAAWwM,GAAOxM,QACtD8M,GAAe,gBAEnB,CACF,GAAG,CAACN,MAGF,UAAC,WAAc,YACb,kCAAS9O,IAAI,IAAEL,IAAKA,EAAI,UACpB2N,GAAsBgB,IAAepB,KACrC,gBAAKpN,UAAU,gBAAe,UAC1BwO,IAAepB,KACf,iCACE,gBAAKpN,UAAU,eAAc,SAC1BwO,KACC,SAACrE,EAAiB,CAChBC,YAAaqE,GACbpE,kBAAmBqE,GACnB7B,QAAS,SAAAiF,GACPzB,GAAmByB,EAAE9J,OAA4B9E,MAAO,QAC1D,EACA6F,SAAU,SAAA+I,GACRzB,GAAmByB,EAAE9J,OAA4B9E,MAAO,SAC1D,EACAA,MAAOsM,IAAoB,QAIjC,gBAAKxP,UAAU,eAAc,SAC1BoN,IACC,SAACxD,EAAkB,CACjBK,WAAYA,GACZnH,QAAS,kBAAMwN,IAAO,EACtByB,QAAS,SAAAhK,GACW,UAAdA,EAAMqB,KAAiBkH,IAC7B,eAShB,iBAAKtQ,UAAU,oBAAmB,WAChC,UAACsG,GAAM,kBAAKuI,IAAU,cACnBtB,IACC,SAAC9C,GAAe,kBACVmE,IAAc,IAClBlE,aAAcA,EACdC,kBAAmBA,GACnBE,QAASA,GAAoBlD,GAC7BiD,aAAcA,EACd/C,WAAYA,GACZqD,UAAWmE,GACXlE,YAAaA,GACbC,YAAaA,GACbC,qBAAsBA,GACtBC,sBAAuBA,GACvBL,WAAY,SAAC7B,EAAKF,GAAK,OAAKyG,GAAavG,EAAKF,EAAM,EACpD4B,qBAAsB,SAAC1B,EAAKrB,GAAK,OAAKkI,GAAmB7G,EAAKrB,EAAO,SAAS,EAC9EgD,oBAAqB,SAAC3B,EAAKrB,GAAK,OAAKkI,GAAmB7G,EAAKrB,EAAO,QAAQ,EAC5EiD,uBAAwB,kBAAMA,IAAwB,MAG1D,SAAC5D,GAAe,QACdE,aAAcA,GACdC,2BAA4BA,GAC5BC,aAAcA,EACdE,WAAY,SAACe,EAAMS,EAAO8I,EAAYjK,GAAK,OACzCV,GAAiBK,GAAcA,EAAWe,EAAMS,EAAO8I,EAAYjK,EAAM,EAE3EN,aAAc,SAACwK,EAAI/O,GAAK,OA9GT,SAAC+O,EAAY/O,GACpC,IAAMgP,GAAM,OAAOlD,IACnBkD,EAAOD,GAAInJ,UAAY5F,EACvB+L,GAASiD,EACX,CA0GuCC,CAAiBF,EAAI/O,EAAM,EACxDyE,eAAgBA,GAChBC,cAAeA,GACfC,WAAYA,IACRyG,KAELhB,IACC,SAAC7C,GAAe,gBACdlK,UAAWyG,GACPuH,IAAc,IAClB7D,cAAc,EACdE,cAAc,EACdC,QAASA,GAAoBlD,GAC7BqD,uBAAwB,kBAAMA,IAAwB,EACtDnD,WAAYA,GACZqD,UAAWmE,UAIhB5B,IACC,SAAC5J,EAAa,CACZC,WAAY,CACV,CAACmB,MAAO,CAAC,OAAQC,MAAO,MACxB,CAACD,MAAO,CAAC,UAAWC,MAAO,gBAMjC8I,GAAcR,KACd,iBAAKxN,UAAU,MAAK,WAClB,gBAAKA,UAAU,MAAK,SACjBgO,GAAc0D,GAAgB,IAC7B,SAAC/Q,EAAA,GAAgB,kBACXsN,IAAe,IACnB7M,mBAAoB,SAAAgR,GAClBrD,GAAcqD,EAChB,EACA/Q,MAAOqQ,GACP9Q,WAAYkO,SAIlB,gBAAK9O,UAAU,mBAAkB,SAC9BwN,IACC,SAACV,EAA+B,CAC9BC,aAAcmC,GACdlC,kBAAmBA,EACnBC,oBAAqBA,EACrBlE,SAAU,SAAChB,GAAqC,OA5SnC,SAACA,IAEM,kBAAvByF,GACwB,kBAAvBA,IAAoCA,EAAmBoD,WAE/DzB,GAAgBkD,OAAQtK,EAAMC,OAA6B9E,OAC/D,CAsSmEoP,CAAmBvK,EAAM,WAQ9F,IA8CFoF,EAAY9M,YAAc,a","sources":["components/custom/pagination/CPagination.tsx","components/custom/pagination/CPaginationItem.tsx","components/custom/pagination/CSmartPagination.tsx","components/custom/hooks/useForkedRef.ts","components/custom/hooks/useStateWithCallback.ts","components/custom/spinner/CSpinner.tsx","components/custom/element-cover/CElementCover.tsx","components/custom/table/CTable.tsx","components/custom/table/CTableFoot.tsx","components/custom/table/CTableBody.tsx","components/custom/table/CTableRow.tsx","components/custom/table/CTableDataCell.tsx","components/custom/smart-table/CSmartTableBody.tsx","components/custom/smart-table/CSmartTableCleaner.tsx","components/custom/smart-table/CSmartTableFilter.tsx","components/custom/table/CTableHead.tsx","components/custom/table/CTableHeaderCell.tsx","components/custom/smart-table/CSmartTableHead.tsx","components/custom/smart-table/CSmartTableItemsPerPageSelector.tsx","components/custom/smart-table/CSmartTable.tsx"],"sourcesContent":["import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CPaginationProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Set the alignment of pagination components.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CPagination = forwardRef<HTMLUListElement, CPaginationProps>(\n  ({children, align, className, size, ...rest}, ref) => {\n    const _className = classNames(\n      'pagination',\n      {\n        [`justify-content-${align}`]: align,\n        [`pagination-${size}`]: size,\n      },\n      className,\n    )\n    return (\n      <nav ref={ref} {...rest}>\n        <ul className={_className}>{children}</ul>\n      </nav>\n    )\n  },\n)\n\nCPagination.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCPagination.displayName = 'CPagination'\n","import {ElementType, forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {CLink} from '@coreui/react'\n\nexport interface CPaginationItemProps extends HTMLAttributes<HTMLAnchorElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n}\n\nexport const CPaginationItem = forwardRef<HTMLAnchorElement, CPaginationItemProps>(\n  ({children, className, component, ...rest}, ref) => {\n    const _className = classNames(\n      'page-item',\n      {\n        active: rest.active,\n        disabled: rest.disabled,\n      },\n      className,\n    )\n\n    const Component = component ? component : rest.active ? 'span' : 'a'\n\n    return (\n      <li className={_className} {...(rest.active && {'aria-current': 'page'})}>\n        {Component === 'a' ? (\n          <CLink className='page-link' component={Component} {...rest} ref={ref}>\n            {children}\n          </CLink>\n        ) : (\n          <Component className='page-link' ref={ref}>\n            {children}\n          </Component>\n        )}\n      </li>\n    )\n  },\n)\n\nCPaginationItem.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCPaginationItem.displayName = 'CPaginationItem'\n","import React, {forwardRef, ReactNode, HTMLAttributes, useEffect} from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport {CPagination} from './CPagination'\nimport {CPaginationItem} from './CPaginationItem'\n\nexport interface CSmartPaginationProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * A string of all className you want applied to the base component. [docs]\n   */\n  className?: string\n  /**\n   * Current page number. [docs]\n   *\n   * @default 1\n   */\n  activePage?: number\n  /**\n   * Show/hide dots. [docs]\n   *\n   * @default true\n   */\n  dots?: boolean\n  /**\n   * Show/hide arrows. [docs]\n   *\n   * @default true\n   */\n  arrows?: boolean\n  /**\n   * Show double arrows buttons. [docs]\n   *\n   * @default doubleArrows\n   */\n  doubleArrows?: boolean\n  /**\n   * The content of 'firstButton' button. [docs]\n   *\n   * @default '<React.Fragment>&laquo;</React.Fragment>''\n   */\n  firstButton?: ReactNode | string\n  /**\n   * The content of 'previousButton' button. [docs]\n   *\n   * @default '<React.Fragment>&lsaquo;</React.Fragment>'\n   */\n  previousButton?: ReactNode | string\n  /**\n   * The content of 'nextButton' button. [docs]\n   *\n   * @default '<React.Fragment>&rsaquo;</React.Fragment>''\n   */\n  nextButton?: ReactNode | string\n  /**\n   * The content of 'lastButton' button. [docs]\n   *\n   * @default '<React.Fragment>&raquo;</React.Fragment>'\n   */\n  lastButton?: ReactNode | string\n  /**\n   * Size of pagination, valid values: 'sm', 'lg'. [docs]\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Horizontall align. [docs]\n   *\n   * @default 'start'\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * Maximum items number. [docs]\n   *\n   * @default 5\n   */\n  limit?: number\n  /**\n   * Number of pages. [docs]\n   */\n  pages: number\n  /**\n   * On active page change callback. [docs]\n   */\n  onActivePageChange: (a: number, b?: boolean) => void // TODO: change a, b to descriptive names\n}\n\nexport const CSmartPagination = forwardRef<HTMLUListElement, CSmartPaginationProps>(\n  (\n    {\n      className,\n      activePage = 1,\n      align = 'start',\n      arrows = true,\n      dots = true,\n      doubleArrows = true,\n      firstButton = <React.Fragment>&laquo;</React.Fragment>,\n      lastButton = <React.Fragment>&raquo;</React.Fragment>,\n      limit = 5,\n      nextButton = <React.Fragment>&rsaquo;</React.Fragment>,\n      onActivePageChange,\n      pages,\n      previousButton = <React.Fragment>&lsaquo;</React.Fragment>,\n      size,\n      ...rest\n    },\n    ref,\n  ) => {\n    useEffect(() => {\n      pages < activePage && onActivePageChange(pages, true)\n    }, [pages])\n\n    const _classNames = classNames(`justify-content-${align}`, className)\n\n    const showDots: boolean = (() => {\n      return dots && limit > 4 && limit < pages\n    })()\n\n    const maxPrevItems: number = (() => {\n      return Math.floor((limit - 1) / 2)\n    })()\n\n    const maxNextItems: number = (() => {\n      return Math.ceil((limit - 1) / 2)\n    })()\n\n    const beforeDots: boolean = (() => {\n      return showDots && activePage > maxPrevItems + 1\n    })()\n\n    const afterDots: boolean = (() => {\n      return showDots && activePage < pages - maxNextItems\n    })()\n\n    const computedLimit: number = (() => {\n      return limit - (afterDots ? 1 : 0) - (beforeDots ? 1 : 0)\n    })()\n\n    const range: number = (() => {\n      return activePage + maxNextItems\n    })()\n\n    const lastItem: number = (() => {\n      return range >= pages ? pages : range - (afterDots ? 1 : 0)\n    })()\n\n    const itemsAmount: number = (() => {\n      return pages < computedLimit ? pages : computedLimit\n    })()\n\n    const items: number[] = (() => {\n      if (activePage - maxPrevItems <= 1) {\n        return Array.from(\n          {\n            length: itemsAmount,\n          },\n          (_v, i) => i + 1,\n        )\n      } else {\n        return Array.from(\n          {\n            length: itemsAmount,\n          },\n          (_v, i) => {\n            return lastItem - i\n          },\n        ).reverse()\n      }\n    })()\n\n    const setPage = (number: number): void => {\n      if (number !== activePage) {\n        onActivePageChange(number)\n      }\n    }\n\n    return (\n      <CPagination className={_classNames} aria-label='pagination' size={size} {...rest} ref={ref}>\n        {doubleArrows && (\n          <CPaginationItem\n            onClick={() => setPage(1)}\n            aria-label='Go to first page'\n            aria-disabled={activePage === 1}\n            disabled={activePage === 1}\n          >\n            {firstButton}\n          </CPaginationItem>\n        )}\n        {arrows && (\n          <CPaginationItem\n            onClick={() => setPage(activePage - 1)}\n            aria-label='Go to previous page'\n            aria-disabled={activePage === 1}\n            disabled={activePage === 1}\n          >\n            {previousButton}\n          </CPaginationItem>\n        )}\n        {beforeDots && (\n          <CPaginationItem role='separator' disabled>\n            …\n          </CPaginationItem>\n        )}\n        {items.map(i => {\n          return (\n            <CPaginationItem\n              onClick={() => setPage(i)}\n              aria-label={activePage === i ? `Current page ${i}` : `Go to page ${i}`}\n              active={activePage === i}\n              key={i}\n            >\n              {i}\n            </CPaginationItem>\n          )\n        })}\n        {afterDots && (\n          <CPaginationItem role='separator' disabled>\n            …\n          </CPaginationItem>\n        )}\n        {arrows && (\n          <CPaginationItem\n            onClick={() => setPage(activePage + 1)}\n            aria-label='Go to next page'\n            aria-disabled={activePage === pages}\n            disabled={activePage === pages}\n          >\n            {nextButton}\n          </CPaginationItem>\n        )}\n        {doubleArrows && (\n          <CPaginationItem\n            onClick={() => setPage(pages)}\n            aria-label='Go to last page'\n            aria-disabled={activePage === pages}\n            disabled={activePage === pages}\n          >\n            {lastButton}\n          </CPaginationItem>\n        )}\n      </CPagination>\n    )\n  },\n)\n\nCSmartPagination.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string]),\n  activePage: PropTypes.number,\n  dots: PropTypes.bool,\n  arrows: PropTypes.bool,\n  doubleArrows: PropTypes.bool,\n  firstButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  previousButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  nextButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  lastButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  size: PropTypes.oneOf(['sm', 'lg']),\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  limit: PropTypes.number,\n  pages: PropTypes.number.isRequired,\n  onActivePageChange: PropTypes.func.isRequired,\n}\n\nCSmartPagination.displayName = 'CSmartPagination'\n","import {useMemo} from 'react'\n\nexport type AssignableRef<ValueType> =\n  | {\n      bivarianceHack(instance: ValueType | null): void\n    }['bivarianceHack']\n  | React.MutableRefObject<ValueType | null>\n\nexport function useForkedRef<RefValueType = any>(...refs: (AssignableRef<RefValueType> | null | undefined)[]) {\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null\n    }\n    return (node: any) => {\n      refs.forEach(ref => {\n        assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n\nexport function assignRef<RefValueType = any>(ref: AssignableRef<RefValueType> | null | undefined, value: any) {\n  if (ref == null) return\n  if (isFunction(ref)) {\n    ref(value)\n  } else {\n    try {\n      ref.current = value\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`)\n    }\n  }\n}\n\nexport function isFunction(value: any): value is Function {\n  return !!(value && {}.toString.call(value) == '[object Function]')\n}\n","import {useEffect, useState} from 'react'\n\nexport const useStateWithCallback = (initialState: any, callback: any) => {\n  const [state, setState] = useState(initialState)\n  useEffect(() => callback(state), [state, callback])\n  return [state, setState]\n}\n","import {ElementType, forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CSpinnerProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Size the component small.\n   */\n  size?: 'sm'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'border' | 'grow'\n  /**\n   * Set visually hidden label for accessibility purposes.\n   */\n  visuallyHiddenLabel?: string\n}\n\nexport const CSpinner = forwardRef<HTMLDivElement | HTMLSpanElement, CSpinnerProps>(\n  (\n    {\n      className,\n      color,\n      component: Component = 'div',\n      size,\n      variant = 'border',\n      visuallyHiddenLabel = 'Loading...',\n      ...rest\n    },\n    ref,\n  ) => {\n    const _className = classNames(\n      `spinner-${variant}`,\n      `text-${color}`,\n      size && `spinner-${variant}-${size}`,\n      className,\n    )\n\n    return (\n      <Component className={_className} role='status' {...rest} ref={ref}>\n        <span className='visually-hidden'>{visuallyHiddenLabel}</span>\n      </Component>\n    )\n  },\n)\n\nCSpinner.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  component: PropTypes.string,\n  size: PropTypes.oneOf(['sm']),\n  variant: PropTypes.oneOf(['border', 'grow']),\n  visuallyHiddenLabel: PropTypes.string,\n}\n\nCSpinner.displayName = 'CSpinner'\n","import PropTypes from 'prop-types'\nimport {CSSProperties, forwardRef, HTMLAttributes, useEffect, useRef, useState} from 'react'\nimport classNames from 'classnames'\n\nimport {useForkedRef} from '../hooks'\nimport {CSpinner} from '../spinner/CSpinner'\n\ninterface CElementCoverProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component. [docs]\n   */\n  className?: string\n  /**\n   * Array of custom boundaries. Use to create custom cover area (instead of parent element area). Area is defined by four sides: 'top', 'bottom', 'right', 'left'. If side is not defined by any custom boundary it is equal to parent element boundary. Each custom boundary is object with keys:\n   * - sides (array) - select boundaries of element to define boundaries. Sides names: 'top', 'bottom', 'right', 'left'.\n   * - query (string) - query used to get element which define boundaries. Search will be done only inside parent element, by parent.querySelector(query) function. [docs]\n   *\n   * @type {sides: string[], query: string}[]\n   */\n  boundaries?: {sides: string[]; query: string}[] // TODO: check if this is correct, TJ\n  /**\n   * Opacity of the cover. [docs]\n   *\n   * @type number\n   */\n  opacity?: number\n}\nexport const CElementCover = forwardRef<HTMLDivElement, CElementCoverProps>(\n  ({children, className, boundaries, opacity = 0.4, ...rest}, ref) => {\n    const elementCoverRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, elementCoverRef)\n\n    const [customBoundaries, setCustomBoundaries] = useState({})\n\n    const getCustomBoundaries = () => {\n      if (!elementCoverRef || !elementCoverRef.current || !boundaries) {\n        return {}\n      }\n      const parent = elementCoverRef.current.parentElement\n      if (!parent) {\n        return {}\n      }\n      const parentCoords = parent.getBoundingClientRect()\n      const customBoundaries = {}\n      boundaries.forEach(({sides, query}) => {\n        const element = parent.querySelector(query)\n        if (!element || !sides) {\n          return\n        }\n        const coords = element.getBoundingClientRect()\n        sides.forEach(side => {\n          // @ts-ignore\n          const sideMargin = Math.abs(coords[side] - parentCoords[side])\n          // @ts-ignore\n          customBoundaries[side] = `${sideMargin}px`\n        })\n      })\n      return customBoundaries\n    }\n\n    useEffect(() => {\n      setCustomBoundaries(getCustomBoundaries())\n    }, [JSON.stringify(getCustomBoundaries())])\n\n    //render\n\n    const classes = classNames(className)\n\n    const containerCoords = {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      ...customBoundaries,\n    }\n\n    const coverStyles: CSSProperties = {\n      ...containerCoords,\n      position: 'absolute',\n      backgroundColor: `rgb(255,255,255,${opacity})`,\n    }\n\n    return (\n      <div className={classes} style={coverStyles} {...rest} ref={forkedRef}>\n        {children || (\n          <div\n            style={{\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translateX(-50%) translateY(-50%)',\n            }}\n          >\n            <CSpinner variant='grow' color='primary' />\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nCElementCover.propTypes = {\n  boundaries: PropTypes.array,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  opacity: PropTypes.number,\n}\n\nCElementCover.displayName = 'CElementCover'\n","import {forwardRef, TableHTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\n\n\nimport {Colors, colorPropType} from '../Types'\nimport classNames from \"classnames\";\n\n// @ts-ignore\nexport interface CTableProps extends TableHTMLAttributes<HTMLTableElement> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top'\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the `<caption>` on the top of the table.\n   */\n  caption?: 'top'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      className,\n      color,\n      hover,\n      responsive,\n      small,\n      striped,\n      ...rest\n    },\n    ref,\n  ) => {\n    const _className = classNames(\n      'table',\n      {\n        [`align-${align}`]: align,\n        [`caption-${caption}`]: caption,\n        [`border-${borderColor}`]: borderColor,\n        'table-bordered': bordered,\n        'table-borderless': borderless,\n        [`table-${color}`]: color,\n        'table-hover': hover,\n        'table-sm': small,\n        'table-striped': striped,\n      },\n      className,\n    )\n\n    return responsive ? (\n      <div className={typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`}>\n        <table className={_className ? _className : undefined} {...rest} ref={ref}>\n          {children}\n        </table>\n      </div>\n    ) : (\n      <table className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </table>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOf(['top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n}\n\nCTable.displayName = 'CTable'\n","import PropTypes from 'prop-types'\nimport {forwardRef, HTMLAttributes} from 'react'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <tfoot className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <tbody className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({children, active, align, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`align-${align}`]: align,\n        'table-active': active,\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <tr className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n","import {forwardRef, TdHTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableDataCellProps extends Omit<TdHTMLAttributes<HTMLTableDataCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableDataCellElement, CTableDataCellProps>(\n  ({children, active, align, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`align-${align}`]: align,\n        'table-active': active,\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <td className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </td>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import React, {forwardRef, MouseEvent, ReactNode} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {CTableBody, CTableBodyProps} from '../table/CTableBody'\nimport {CTableRow} from '../table/CTableRow'\nimport {CTableDataCell} from '../table/CTableDataCell'\n\nimport {CFormCheck} from '@coreui/react'\n\nimport {Item, ItemInternal, ScopedColumns} from './CSmartTableInterface'\n\nexport interface CSmartTableBodyProps extends CTableBodyProps {\n  clickableRows?: boolean\n  currentItems: ItemInternal[]\n  firstItemOnActivePageIndex: number\n  noItemsLabel?: string | ReactNode\n  onRowChecked?: (id: number, value: boolean) => void\n  onRowClick?: (item: ItemInternal, index: number, columnName: string, event: MouseEvent | boolean) => void\n  rawColumnNames: string[]\n  scopedColumns?: ScopedColumns\n  selectable?: boolean\n}\n\nexport const CSmartTableBody = forwardRef<HTMLTableSectionElement, CSmartTableBodyProps>(\n  (\n    {\n      clickableRows,\n      currentItems,\n      firstItemOnActivePageIndex,\n      noItemsLabel,\n      onRowChecked,\n      onRowClick,\n      rawColumnNames,\n      scopedColumns,\n      selectable,\n      ...rest\n    },\n    ref,\n  ) => {\n    const tableDataCellProps = (item: Item, colName: string) => {\n      const props = item._cellProps && {\n        ...(item._cellProps['all'] && {...item._cellProps['all']}),\n        ...(item._cellProps[colName] && {...item._cellProps[colName]}),\n      }\n\n      return props\n    }\n\n    const getColumnName = (event: MouseEvent): string => {\n      const target = event.target as HTMLTextAreaElement\n      const closest = target.closest('tr')\n      const children = closest ? Array.from(closest.children) : []\n      const clickedCell = children.filter(child => child.contains(target))[0]\n      return rawColumnNames[children.indexOf(clickedCell)]\n    }\n\n    const colspan: number = selectable ? rawColumnNames.length + 1 : rawColumnNames.length\n\n    return (\n      <CTableBody\n        {...(clickableRows && {\n          style: {cursor: 'pointer'},\n        })}\n        {...rest}\n        ref={ref}\n      >\n        {currentItems.map((item: ItemInternal, trIndex) => {\n          return (\n            <React.Fragment key={trIndex}>\n              <CTableRow\n                {...(item._props && {...item._props})}\n                {...(clickableRows && {tabIndex: 0})}\n                onClick={event =>\n                  onRowClick && onRowClick(item, trIndex + firstItemOnActivePageIndex, getColumnName(event), event)\n                }\n              >\n                {selectable && (\n                  <CTableDataCell>\n                    <CFormCheck\n                      checked={item._selected ? item._selected : false}\n                      onChange={event => onRowChecked && onRowChecked(item._id, event.target.checked)}\n                    />\n                  </CTableDataCell>\n                )}\n                {rawColumnNames.map((colName, index) => {\n                  return (\n                    (scopedColumns &&\n                      scopedColumns[colName] &&\n                      React.cloneElement(scopedColumns[colName](item, trIndex + firstItemOnActivePageIndex), {\n                        key: index,\n                      })) || (\n                      <CTableDataCell {...tableDataCellProps(item, colName)} key={index}>\n                        {String(item[colName])}\n                      </CTableDataCell>\n                    )\n                  )\n                })}\n              </CTableRow>\n              {scopedColumns && scopedColumns.details && (\n                <>\n                  <CTableRow>\n                    <CTableDataCell\n                      colSpan={colspan}\n                      className='p-0'\n                      style={{borderBottomWidth: 0}}\n                      tabIndex={-1}\n                    ></CTableDataCell>\n                  </CTableRow>\n                  <CTableRow\n                    onClick={event =>\n                      onRowClick && onRowClick(item, trIndex + firstItemOnActivePageIndex, getColumnName(event), true)\n                    }\n                    className='p-0'\n                    key={`details${trIndex}`}\n                  >\n                    <CTableDataCell colSpan={colspan} className='p-0' style={{border: 0}}>\n                      {scopedColumns.details(item, trIndex + firstItemOnActivePageIndex)}\n                    </CTableDataCell>\n                  </CTableRow>\n                </>\n              )}\n            </React.Fragment>\n          )\n        })}\n        {!currentItems.length && (\n          <CTableRow>\n            <CTableDataCell colSpan={colspan}>{noItemsLabel}</CTableDataCell>\n          </CTableRow>\n        )}\n      </CTableBody>\n    )\n  },\n)\n\nCSmartTableBody.propTypes = {\n  clickableRows: PropTypes.bool,\n  currentItems: PropTypes.array.isRequired,\n  firstItemOnActivePageIndex: PropTypes.number.isRequired,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onRowChecked: PropTypes.func,\n  onRowClick: PropTypes.func,\n  rawColumnNames: PropTypes.array.isRequired,\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n}\n\nCSmartTableBody.displayName = 'CSmartTableBody'\n","import PropTypes from 'prop-types'\nimport {forwardRef, HTMLAttributes, ReactNode} from 'react'\nimport {cilFilterX} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\n\ninterface CSmartTableCleanerProps extends HTMLAttributes<HTMLButtonElement> {\n  content?: string | ReactNode\n  isFiltered?: string\n}\n\nexport const CSmartTableCleaner = forwardRef<HTMLButtonElement, CSmartTableCleanerProps>(\n  ({content = <CIcon width={18} icon={cilFilterX} />, isFiltered, ...rest}, ref) => {\n    return (\n      <button\n        type='button'\n        className='btn btn-transparent'\n        {...(!isFiltered && {\n          disabled: true,\n          tabIndex: -1,\n        })}\n        {...rest}\n        ref={ref}\n      >\n        {content}\n      </button>\n    )\n  },\n)\n\nCSmartTableCleaner.propTypes = {\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  isFiltered: PropTypes.string,\n}\n\nCSmartTableCleaner.displayName = 'CSmartTableCleaner'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {CFormLabel} from '@coreui/react'\nimport {CFormInput} from '@coreui/react'\n\ninterface CSmartTableFilterProps extends HTMLAttributes<HTMLInputElement> {\n  // TODO: consider to simplify ex. filterLabel --> label\n  filterLabel?: string\n  filterPlaceholder?: string\n  value?: string | number\n}\n\nexport const CSmartTableFilter = forwardRef<HTMLInputElement, CSmartTableFilterProps>(\n  ({filterLabel, filterPlaceholder, value, ...rest}, ref) => {\n    return (\n      <div className='row mb-2'>\n        <CFormLabel className='col-sm-auto col-form-label'>{filterLabel}</CFormLabel>\n        <div className='col-sm-auto'>\n          <CFormInput placeholder={filterPlaceholder} value={value} {...rest} ref={ref} />\n        </div>\n      </div>\n    )\n  },\n)\n\nCSmartTableFilter.propTypes = {\n  filterLabel: PropTypes.string,\n  filterPlaceholder: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}\n\nCSmartTableFilter.displayName = 'CSmartTableFilter'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <thead className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import {forwardRef, ThHTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {Colors, colorPropType} from '../Types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableHeaderCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableHeaderCellElement, CTableHeaderCellProps>(\n  ({children, className, color, ...rest}, ref) => {\n    const _className = classNames(\n      {\n        [`table-${color}`]: color,\n      },\n      className,\n    )\n\n    return (\n      <th className={_className ? _className : undefined} {...rest} ref={ref}>\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import {ElementType, forwardRef, ReactNode, useEffect, useRef} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {ColumnFilter, ColumnFilterValue, Column, Sorter, SorterValue} from './CSmartTableInterface'\n\nimport {CFormInput} from '@coreui/react'\nimport {CFormCheck} from '@coreui/react'\nimport {CTableHead, CTableHeadProps} from '../table/CTableHead'\nimport {CTableHeaderCell} from '../table/CTableHeaderCell'\nimport {CTableRow} from '../table/CTableRow'\n\nexport interface CSmartTableHeadProps extends CTableHeadProps {\n  columnFilter?: boolean | ColumnFilter\n  columnFilterState?: ColumnFilterValue\n  columnSorter?: boolean | Sorter\n  component?: string | ElementType\n  columns: (Column | string)[]\n  handleFilterOnChange?: (key: string, value: string) => void\n  handleFilterOnInput?: (key: string, value: string) => void\n  handleSelectAllChecked?: () => void\n  handleSort?: (key: string, index: number) => void\n  selectable?: boolean\n  selectAll?: boolean | string\n  sorterState?: SorterValue\n  sortingIcon?: ReactNode\n  sortingIconAscending?: ReactNode\n  sortingIconDescending?: ReactNode\n}\n\nexport const CSmartTableHead = forwardRef<HTMLTableSectionElement, CSmartTableHeadProps>(\n  (\n    {\n      columnFilter,\n      columnFilterState,\n      columnSorter,\n      component: Component = CTableHead,\n      columns,\n      handleFilterOnChange,\n      handleFilterOnInput,\n      handleSelectAllChecked,\n      handleSort,\n      selectable,\n      selectAll,\n      sorterState,\n      sortingIcon,\n      sortingIconAscending,\n      sortingIconDescending,\n      ...rest\n    },\n    ref,\n  ) => {\n    const tableHeaderCellProps = (column: Column | string) => {\n      if (typeof column === 'object' && column._props) {\n        return column._props\n      }\n      return {}\n    }\n\n    const tableHeaderCellStyles = (column: Column | string) => {\n      const style = {verticalAlign: 'middle', overflow: 'hidden', cursor: ''}\n\n      if (\n        columnSorter &&\n        (typeof column !== 'object' ||\n          (typeof column === 'object' && (typeof column.sorter === 'undefined' || column.sorter)))\n      ) {\n        style.cursor = 'pointer'\n      }\n\n      if (typeof column === 'object' && column._props) {\n        return {...style, ...column._style}\n      }\n      return style\n    }\n\n    const pretifyName = (name: string) => {\n      return name\n        .replace(/[-_.]/g, ' ')\n        .replace(/ +/g, ' ')\n        .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ')\n    }\n\n    const label = (column: Column | string) =>\n      typeof column === 'object'\n        ? column.label !== undefined\n          ? column.label\n          : pretifyName(column.key)\n        : pretifyName(column)\n\n    const key = (column: Column | string) => (typeof column === 'object' ? column.key : column)\n\n    const getColumnSorterState = (key: string): string | number => {\n      if (sorterState && sorterState.column === key) {\n        if (sorterState.state) {\n          return sorterState.state\n        }\n        return 0\n      }\n\n      return 0\n    }\n\n\n    // @ts-ignore\n    const columnSorterIcon = (column : Column | string) => {\n      if (getColumnSorterState(key(column)) === 0) {\n        return <span className='opacity-25 float-end me-1'>{sortingIcon}</span>\n      }\n      if (getColumnSorterState(key(column)) === 'asc') {\n        return <span className='float-end me-1'>{sortingIconAscending}</span>\n      }\n      if (getColumnSorterState(key(column)) === 'desc') {\n        return <span className='float-end me-1'>{sortingIconDescending}</span>\n      }\n    }\n\n    const checkboxRef = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n      if (selectAll === 'indeterminate') {\n        if (checkboxRef.current) checkboxRef.current.indeterminate = true\n      } else {\n        if (checkboxRef.current) checkboxRef.current.indeterminate = false\n      }\n    }, [selectAll])\n\n    return (\n      <Component {...rest} ref={ref}>\n        <CTableRow>\n          {selectable && (\n            <CTableHeaderCell>\n              <CFormCheck\n                checked={typeof selectAll === 'boolean' ? selectAll : false}\n                onChange={() => handleSelectAllChecked && handleSelectAllChecked()}\n                ref={checkboxRef}\n              />\n            </CTableHeaderCell>\n          )}\n          {columns.map((column: Column | string, index: number) => {\n            return (\n              <CTableHeaderCell\n                {...tableHeaderCellProps(column)}\n                onClick={() => handleSort && handleSort(key(column), index)}\n                style={tableHeaderCellStyles(column)}\n                key={index}\n              >\n                <div className='d-inline'>{label(column)}</div>\n                {columnSorter &&\n                  (typeof column !== 'object' ? true : typeof column.sorter === 'undefined' ? true : column.sorter) &&\n                  columnSorterIcon(column)}\n              </CTableHeaderCell>\n            )\n          })}\n        </CTableRow>\n        {columnFilter && (\n          <CTableRow>\n            {selectable && <CTableHeaderCell></CTableHeaderCell>}\n            {columns.map((column: Column | string, index: number) => {\n              return (\n                <CTableHeaderCell {...tableHeaderCellProps(column)} key={index}>\n                  {(typeof column !== 'object'\n                    ? true\n                    : typeof column.filter === 'undefined'\n                    ? true\n                    : column.filter) && (\n                    <CFormInput\n                      size='sm'\n                      onInput={event =>\n                        handleFilterOnInput &&\n                        handleFilterOnInput(key(column), (event.target as HTMLInputElement).value)\n                      }\n                      onChange={event =>\n                        handleFilterOnChange &&\n                        handleFilterOnChange(key(column), (event.target as HTMLInputElement).value)\n                      }\n                      value={columnFilterState && columnFilterState[key(column)] ? columnFilterState[key(column)] : ''}\n                      aria-label={`column name: '${label(column)}' filter input`}\n                    />\n                  )}\n                </CTableHeaderCell>\n              )\n            })}\n          </CTableRow>\n        )}\n      </Component>\n    )\n  },\n)\n\nCSmartTableHead.propTypes = {\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  columnFilterState: PropTypes.object,\n  columnSorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  component: PropTypes.elementType,\n  children: PropTypes.node,\n  columns: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.string])).isRequired, // TODO: improve this Prop Type,\n  handleFilterOnChange: PropTypes.func,\n  handleFilterOnInput: PropTypes.func,\n  handleSelectAllChecked: PropTypes.func,\n  handleSort: PropTypes.func,\n  selectable: PropTypes.bool,\n  selectAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  sorterState: PropTypes.object,\n  sortingIcon: PropTypes.node,\n  sortingIconAscending: PropTypes.node,\n  sortingIconDescending: PropTypes.node,\n}\n\nCSmartTableHead.displayName = 'CSmartTableHead'\n","import {forwardRef, HTMLAttributes} from 'react'\nimport PropTypes from 'prop-types'\nimport {CFormLabel} from '@coreui/react'\nimport {CFormSelect} from '@coreui/react'\n\ninterface CSmartTableItemsPerPageSelectorProps extends HTMLAttributes<HTMLSelectElement> {\n  itemsPerPage?: number\n  itemsPerPageLabel?: string\n  itemsPerPageOptions?: number[]\n}\n\nexport const CSmartTableItemsPerPageSelector = forwardRef<HTMLSelectElement, CSmartTableItemsPerPageSelectorProps>(\n  ({itemsPerPage, itemsPerPageLabel, itemsPerPageOptions, ...rest}, ref) => {\n    return (\n      <div className='row'>\n        <CFormLabel className='col-auto col-form-label'>{itemsPerPageLabel}</CFormLabel>\n        <div className='col-auto'>\n          <CFormSelect defaultValue={itemsPerPage} {...rest} ref={ref}>\n            {itemsPerPageOptions &&\n              itemsPerPageOptions.map((number, index) => {\n                return (\n                  <option value={number} key={index}>\n                    {number}\n                  </option>\n                )\n              })}\n          </CFormSelect>\n        </div>\n      </div>\n    )\n  },\n)\n\nCSmartTableItemsPerPageSelector.propTypes = {\n  itemsPerPage: PropTypes.number,\n  itemsPerPageLabel: PropTypes.string,\n  itemsPerPageOptions: PropTypes.array,\n}\n\nCSmartTableItemsPerPageSelector.displayName = 'CSmartTableItemsPerPageSelector'\n","import React, {ChangeEvent, forwardRef, useEffect, useMemo, useState} from 'react'\nimport PropTypes from 'prop-types'\n\nimport {cilArrowBottom, cilArrowTop, cilSwapVertical} from '@coreui/icons'\n\nimport {ColumnFilterValue, CSmartTableProps, Item, ItemInternal, SorterValue} from './CSmartTableInterface'\n\nimport {CSmartPagination} from '../pagination/CSmartPagination'\nimport {CElementCover} from '../element-cover/CElementCover'\n\nimport {CTable} from '../table/CTable'\nimport {CTableFoot} from '../table/CTableFoot'\n\nimport {CSmartTableBody} from './CSmartTableBody'\nimport {CSmartTableCleaner} from './CSmartTableCleaner'\nimport {CSmartTableFilter} from './CSmartTableFilter'\nimport {CSmartTableHead} from './CSmartTableHead'\nimport {CSmartTableItemsPerPageSelector} from './CSmartTableItemsPerPageSelector'\n\nimport CIcon from '@coreui/icons-react'\n\nexport const CSmartTable = forwardRef<HTMLDivElement, CSmartTableProps>(\n  (\n    {\n      activePage = 1,\n      cleaner,\n      clickableRows,\n      columnFilter,\n      columnFilterValue, // TODO: consider to use only columnFilter prop\n      columns,\n      columnSorter,\n      footer,\n      header = true,\n      items,\n      itemsPerPage = 10,\n      itemsPerPageLabel = 'Items per page:',\n      itemsPerPageOptions = [5, 10, 20, 50],\n      itemsPerPageSelect,\n      loading,\n      noItemsLabel = 'No items found',\n      onActivePageChange,\n      onColumnFilterChange,\n      onFilteredItemsChange,\n      onItemsPerPageChange,\n      onRowClick,\n      onSelectedItemsChange,\n      onSorterChange,\n      onTableFilterChange,\n      pagination,\n      paginationProps,\n      scopedColumns,\n      selectable,\n      sorterValue,\n      sortingIcon = <CIcon width={18} icon={cilSwapVertical} key='csv' />,\n      sortingIconAscending = <CIcon width={18} icon={cilArrowTop} key='cat' />,\n      sortingIconDescending = <CIcon width={18} icon={cilArrowBottom} key='cab' />,\n      tableBodyProps,\n      tableFootProps,\n      tableFilter,\n      tableFilterLabel = 'Filter:',\n      tableFilterPlaceholder = 'type string...',\n      tableFilterValue, // TODO: consider to use only tableFilter prop\n      tableHeadProps,\n      tableProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    // instance data\n    const [_activePage, setActivePage] = useState<number>(activePage)\n    const [_items, setItems] = useState<ItemInternal[]>([])\n    const [_itemsPerPage, setItemsPerPage] = useState(itemsPerPage)\n    const [columnFilterState, setColumnFilterState] = useState<ColumnFilterValue>({})\n    const [selectedAll, setSelectedAll] = useState<boolean | string>()\n    const [sorterState, setSorterState] = useState<SorterValue>({})\n    const [tableFilterState, setTableFilterState] = useState<string>(tableFilterValue ? tableFilterValue : '')\n\n    // watch\n    useMemo(() => {\n      if (items && items.length < _itemsPerPage * _activePage - _itemsPerPage) {\n        setActivePage(1)\n      }\n\n      // Create the internal array of items\n      Array.isArray(items) &&\n        setItems(\n          items?.map((item: Item, index: number) => {\n            return {...item, _id: index}\n          }),\n        )\n    }, [JSON.stringify(items)])\n\n    useMemo(() => {\n      columnFilterValue && setColumnFilterState(columnFilterValue)\n    }, [JSON.stringify(columnFilterValue)])\n\n    useMemo(() => {\n      setSorterState({...sorterValue})\n    }, [JSON.stringify(sorterValue)])\n\n    useMemo(() => setItemsPerPage(itemsPerPage), [itemsPerPage])\n\n    // functions\n\n    const isSortable = (i: number): boolean | undefined => {\n      const isDataColumn = itemsDataColumns.includes(rawColumnNames[i])\n      let column\n      if (columns) column = columns[i]\n      return (\n        columnSorter &&\n        (!columns ||\n          typeof column !== 'object' ||\n          (typeof column === 'object' && (typeof column.sorter === 'undefined' || column.sorter))) &&\n        isDataColumn\n      )\n    }\n\n    const sorterChange = (column: string, index: number): void => {\n      if (!isSortable(index)) {\n        return\n      }\n      //if column changed or sort was descending change asc to true\n      const state = sorterState ? sorterState : {column: '', state: ''}\n\n      if (state.column === column) {\n        if (state.state === 0) {\n          state.state = 'asc'\n        } else if (state.state === 'asc') {\n          state.state = 'desc'\n        } else {\n          if (typeof columnSorter === 'object' && !columnSorter.resetable) {\n            state.state = 'asc'\n          } else {\n            state.state = 0\n          }\n        }\n      } else {\n        state.column = column\n        state.state = 'asc'\n      }\n      setSorterState({...state})\n    }\n\n    const itemsPerPageChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n      if (\n        typeof itemsPerPageSelect !== 'object' ||\n        (typeof itemsPerPageSelect === 'object' && !itemsPerPageSelect.external)\n      )\n        setItemsPerPage(Number((event.target as HTMLSelectElement).value))\n    }\n\n    const columnFilterChange = (colName: string, value: string, type: string): void => {\n      const isLazy = columnFilter && typeof columnFilter === 'object' && columnFilter.lazy === true\n      if ((isLazy && type === 'input') || (!isLazy && type === 'change')) {\n        return\n      }\n      const newState = {...columnFilterState, [`${colName}`]: value}\n      setActivePage(1)\n      setColumnFilterState(newState)\n    }\n\n    const tableFilterChange = (value: string, type: string): void => {\n      const isLazy = tableFilter && typeof tableFilter === 'object' && tableFilter.lazy === true\n      if ((isLazy && type === 'input') || (!isLazy && type === 'change')) {\n        return\n      }\n      setActivePage(1)\n      setTableFilterState(value)\n    }\n\n    const clean = (): void => {\n      setTableFilterState('')\n      setColumnFilterState({})\n      setSorterState({})\n    }\n\n    // computed\n\n    const genCols = Object.keys(_items[0] || {}).filter(el => el.charAt(0) !== '_')\n    const rawColumnNames = columns\n      ? columns.map((column: any) => {\n          if (typeof column === 'object') return column.key\n          else return column\n        })\n      : genCols //! || el\n    const itemsDataColumns = rawColumnNames.filter(name => genCols.includes(name))\n\n    // variables\n    const filteredColumns: ItemInternal[] = useMemo(() => {\n      let items = _items\n      if (columnFilter && typeof columnFilter === 'object' && columnFilter.external) {\n        return items\n      }\n      Object.entries(columnFilterState).forEach(([key, value]) => {\n        const columnFilter = String(value).toLowerCase()\n        if (columnFilter && itemsDataColumns.includes(key)) {\n          items = items.filter(item => {\n            return String(item[key]).toLowerCase().includes(columnFilter)\n          })\n        }\n      })\n      return items\n    }, [JSON.stringify(columnFilterState), JSON.stringify(_items)])\n\n    const filteredTable: ItemInternal[] = useMemo(() => {\n      let items = filteredColumns\n      if (!tableFilterState || (tableFilter && typeof tableFilter === 'object' && tableFilter.external)) {\n        return items\n      }\n      const filter = tableFilterState.toLowerCase()\n      const valueContainFilter = (val: any) => String(val).toLowerCase().includes(filter)\n      items = items.filter(item => {\n        return !!itemsDataColumns.find(key => valueContainFilter(item[key]))\n      })\n      return items\n    }, [tableFilterState, JSON.stringify(tableFilterValue), JSON.stringify(filteredColumns)])\n\n    const sortedItems: ItemInternal[] = useMemo(() => {\n      const col = sorterState?.column\n      if (\n        !col ||\n        !itemsDataColumns.includes(col) ||\n        (columnSorter && typeof columnSorter === 'object' && columnSorter.external)\n      ) {\n        return filteredTable\n      }\n\n      const flip = sorterState.state === 'asc' ? 1 : sorterState.state === 'desc' ? -1 : 0\n      const sorted = filteredTable.slice().sort((item, item2) => {\n        const value = item[col]\n        const value2 = item2[col]\n        const a = typeof value === 'number' ? value : String(value).toLowerCase()\n        const b = typeof value2 === 'number' ? value2 : String(value2).toLowerCase()\n        return a > b ? 1 * flip : b > a ? -1 * flip : 0\n      })\n      return sorted\n    }, [\n      JSON.stringify(filteredTable),\n      JSON.stringify(sorterState),\n      JSON.stringify(columnSorter),\n      JSON.stringify(filteredColumns),\n      JSON.stringify(_items),\n    ])\n\n    const numberOfPages: number = _itemsPerPage ? Math.ceil(sortedItems.length / _itemsPerPage) : 1\n\n    const firstItemOnActivePageIndex: number = _activePage ? (_activePage - 1) * _itemsPerPage : 0\n\n    const itemsOnActivePage: ItemInternal[] = sortedItems.slice(\n      firstItemOnActivePageIndex,\n      firstItemOnActivePageIndex + _itemsPerPage,\n    )\n\n    const currentItems: ItemInternal[] = _activePage ? itemsOnActivePage : sortedItems\n\n    const isFiltered: string = tableFilterState || sorterState?.column || Object.values(columnFilterState).join('')\n\n    // effects\n\n    useEffect(() => {\n      onActivePageChange && onActivePageChange(_activePage)\n    }, [_activePage])\n\n    useEffect(() => {\n      onItemsPerPageChange && onItemsPerPageChange(_itemsPerPage)\n      itemsPerPage !== _itemsPerPage && setActivePage(1) // TODO: set proper page after _itemsPerPage update\n    }, [_itemsPerPage])\n\n    useEffect(() => {\n      sorterState && onSorterChange && onSorterChange(sorterState)\n    }, [JSON.stringify(sorterState)])\n\n    useEffect(() => {\n      onColumnFilterChange && onColumnFilterChange(columnFilterState)\n    }, [JSON.stringify(columnFilterState)])\n\n    useEffect(() => {\n      onTableFilterChange && onTableFilterChange(tableFilterState)\n    }, [tableFilterState])\n\n    useEffect(() => {\n      onFilteredItemsChange && onFilteredItemsChange(sortedItems)\n    }, [JSON.stringify(sortedItems)])\n\n    const handleRowChecked = (id: number, value: boolean) => {\n      const newArr = [..._items]\n      newArr[id]._selected = value\n      setItems(newArr)\n    }\n\n    const handleSelectAllChecked = () => {\n      if (selectedAll === true) {\n        setItems(\n          _items.map((item: ItemInternal) => {\n            return {...item, _selected: false}\n          }),\n        )\n        return\n      }\n\n      setItems(\n        _items.map((item: ItemInternal) => {\n          return {...item, _selected: true}\n        }),\n      )\n    }\n\n    useEffect(() => {\n      if (selectable) {\n        const selected = _items.filter(item => item._selected === true)\n        onSelectedItemsChange && onSelectedItemsChange(selected)\n\n        if (selected.length === _items.length) {\n          setSelectedAll(true)\n          return\n        }\n\n        if (selected.length === 0) {\n          setSelectedAll(false)\n          return\n        }\n\n        if (selected.length !== 0 && selected.length !== _items.length) {\n          setSelectedAll('indeterminate')\n        }\n      }\n    }, [_items])\n\n    return (\n      <React.Fragment>\n        <div {...rest} ref={ref}>\n          {(itemsPerPageSelect || tableFilter || cleaner) && (\n            <div className='row my-2 mx-0'>\n              {(tableFilter || cleaner) && (\n                <>\n                  <div className='col-auto p-0'>\n                    {tableFilter && (\n                      <CSmartTableFilter\n                        filterLabel={tableFilterLabel}\n                        filterPlaceholder={tableFilterPlaceholder}\n                        onInput={e => {\n                          tableFilterChange((e.target as HTMLInputElement).value, 'input')\n                        }}\n                        onChange={e => {\n                          tableFilterChange((e.target as HTMLInputElement).value, 'change')\n                        }}\n                        value={tableFilterState || ''}\n                      />\n                    )}\n                  </div>\n                  <div className='col-auto p-0'>\n                    {cleaner && (\n                      <CSmartTableCleaner\n                        isFiltered={isFiltered}\n                        onClick={() => clean()}\n                        onKeyUp={event => {\n                          if (event.key === 'Enter') clean()\n                        }}\n                      />\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        <div className='position-relative'>\n          <CTable {...tableProps}>\n            {header && (\n              <CSmartTableHead\n                {...tableHeadProps}\n                columnFilter={columnFilter}\n                columnFilterState={columnFilterState}\n                columns={columns ? columns : rawColumnNames}\n                columnSorter={columnSorter}\n                selectable={selectable}\n                selectAll={selectedAll}\n                sorterState={sorterState}\n                sortingIcon={sortingIcon}\n                sortingIconAscending={sortingIconAscending}\n                sortingIconDescending={sortingIconDescending}\n                handleSort={(key, index) => sorterChange(key, index)}\n                handleFilterOnChange={(key, event) => columnFilterChange(key, event, 'change')}\n                handleFilterOnInput={(key, event) => columnFilterChange(key, event, 'input')}\n                handleSelectAllChecked={() => handleSelectAllChecked()}\n              />\n            )}\n            <CSmartTableBody\n              currentItems={currentItems}\n              firstItemOnActivePageIndex={firstItemOnActivePageIndex}\n              noItemsLabel={noItemsLabel}\n              onRowClick={(item, index, columnName, event) =>\n                clickableRows && onRowClick && onRowClick(item, index, columnName, event)\n              }\n              onRowChecked={(id, value) => handleRowChecked(id, value)}\n              rawColumnNames={rawColumnNames}\n              scopedColumns={scopedColumns}\n              selectable={selectable}\n              {...tableBodyProps}\n            />\n            {footer && (\n              <CSmartTableHead\n                component={CTableFoot}\n                {...tableFootProps}\n                columnFilter={false}\n                columnSorter={false}\n                columns={columns ? columns : rawColumnNames}\n                handleSelectAllChecked={() => handleSelectAllChecked()}\n                selectable={selectable}\n                selectAll={selectedAll}\n              />\n            )}\n          </CTable>\n          {loading && (\n            <CElementCover\n              boundaries={[\n                {sides: ['top'], query: 'td'},\n                {sides: ['bottom'], query: 'tbody'},\n              ]}\n            />\n          )}\n        </div>\n\n        {(pagination || itemsPerPageSelect) && (\n          <div className='row'>\n            <div className='col'>\n              {pagination && numberOfPages > 1 && (\n                <CSmartPagination\n                  {...paginationProps}\n                  onActivePageChange={page => {\n                    setActivePage(page)\n                  }}\n                  pages={numberOfPages}\n                  activePage={_activePage}\n                />\n              )}\n            </div>\n            <div className='col-auto ms-auto'>\n              {itemsPerPageSelect && (\n                <CSmartTableItemsPerPageSelector\n                  itemsPerPage={_itemsPerPage}\n                  itemsPerPageLabel={itemsPerPageLabel}\n                  itemsPerPageOptions={itemsPerPageOptions}\n                  onChange={(event: ChangeEvent<HTMLSelectElement>) => itemsPerPageChange(event)}\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    )\n  },\n)\n\nCSmartTable.propTypes = {\n  activePage: PropTypes.number,\n  cleaner: PropTypes.bool,\n  clickableRows: PropTypes.bool,\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  columnFilterValue: PropTypes.object,\n  columns: PropTypes.array,\n  columnSorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  footer: PropTypes.bool,\n  header: PropTypes.bool,\n  items: PropTypes.array,\n  itemsPerPage: PropTypes.number,\n  itemsPerPageLabel: PropTypes.string,\n  itemsPerPageOptions: PropTypes.array,\n  itemsPerPageSelect: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  loading: PropTypes.bool,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onActivePageChange: PropTypes.func,\n  onColumnFilterChange: PropTypes.func,\n  onFilteredItemsChange: PropTypes.func,\n  onItemsPerPageChange: PropTypes.func,\n  onRowClick: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  onSorterChange: PropTypes.func,\n  onTableFilterChange: PropTypes.func,\n  pagination: PropTypes.bool,\n  paginationProps: PropTypes.any, // TODO: update\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n  sorterValue: PropTypes.object,\n  sortingIcon: PropTypes.node,\n  sortingIconAscending: PropTypes.node,\n  sortingIconDescending: PropTypes.node,\n  tableBodyProps: PropTypes.object,\n  tableFootProps: PropTypes.object,\n  tableFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  tableFilterLabel: PropTypes.string,\n  tableFilterPlaceholder: PropTypes.string,\n  tableFilterValue: PropTypes.string,\n  tableHeadProps: PropTypes.object,\n  tableProps: PropTypes.object,\n}\n\nCSmartTable.displayName = 'CSmartTable'\n"],"names":["CPagination","forwardRef","ref","children","align","className","size","rest","_className","classNames","displayName","CPaginationItem","component","active","disabled","Component","CSmartPagination","activePage","arrows","dots","doubleArrows","firstButton","lastButton","limit","nextButton","onActivePageChange","pages","previousButton","useEffect","_classNames","showDots","maxPrevItems","Math","floor","maxNextItems","ceil","beforeDots","afterDots","computedLimit","range","lastItem","itemsAmount","items","Array","from","length","_v","i","reverse","setPage","number","onClick","role","map","assignRef","value","toString","call","isFunction","current","error","Error","CSpinner","color","variant","visuallyHiddenLabel","CElementCover","boundaries","opacity","elementCoverRef","useRef","forkedRef","refs","useMemo","every","node","forEach","useForkedRef","useState","customBoundaries","setCustomBoundaries","getCustomBoundaries","parent","parentElement","parentCoords","getBoundingClientRect","sides","query","element","querySelector","coords","side","sideMargin","abs","JSON","stringify","classes","containerCoords","top","left","right","bottom","coverStyles","position","backgroundColor","style","transform","CTable","borderColor","bordered","borderless","caption","hover","responsive","small","striped","undefined","CTableFoot","CTableBody","CTableRow","CTableDataCell","CSmartTableBody","clickableRows","currentItems","firstItemOnActivePageIndex","noItemsLabel","onRowChecked","onRowClick","rawColumnNames","scopedColumns","selectable","getColumnName","event","target","closest","clickedCell","filter","child","contains","indexOf","colspan","cursor","item","trIndex","_props","tabIndex","checked","_selected","onChange","_id","colName","index","React","key","_cellProps","tableDataCellProps","String","details","colSpan","borderBottomWidth","border","CSmartTableCleaner","content","width","icon","cilFilterX","isFiltered","type","CSmartTableFilter","filterLabel","filterPlaceholder","placeholder","CTableHead","CTableHeaderCell","CSmartTableHead","columnFilter","columnFilterState","columnSorter","columns","handleFilterOnChange","handleFilterOnInput","handleSelectAllChecked","handleSort","selectAll","sorterState","sortingIcon","sortingIconAscending","sortingIconDescending","tableHeaderCellProps","column","tableHeaderCellStyles","verticalAlign","overflow","sorter","_style","pretifyName","name","replace","split","word","charAt","toUpperCase","slice","join","label","getColumnSorterState","state","checkboxRef","indeterminate","columnSorterIcon","onInput","CSmartTableItemsPerPageSelector","itemsPerPage","itemsPerPageLabel","itemsPerPageOptions","defaultValue","CSmartTable","cleaner","columnFilterValue","footer","header","itemsPerPageSelect","loading","onColumnFilterChange","onFilteredItemsChange","onItemsPerPageChange","onSelectedItemsChange","onSorterChange","onTableFilterChange","pagination","paginationProps","sorterValue","cilSwapVertical","cilArrowTop","cilArrowBottom","tableBodyProps","tableFootProps","tableFilter","tableFilterLabel","tableFilterPlaceholder","tableFilterValue","tableHeadProps","tableProps","_activePage","setActivePage","_items","setItems","_itemsPerPage","setItemsPerPage","setColumnFilterState","selectedAll","setSelectedAll","setSorterState","tableFilterState","setTableFilterState","isArray","sorterChange","isDataColumn","itemsDataColumns","includes","isSortable","resetable","columnFilterChange","isLazy","lazy","newState","tableFilterChange","clean","genCols","Object","keys","el","filteredColumns","external","entries","toLowerCase","filteredTable","find","val","sortedItems","col","flip","sort","item2","value2","a","b","numberOfPages","itemsOnActivePage","values","selected","e","onKeyUp","columnName","id","newArr","handleRowChecked","page","Number","itemsPerPageChange"],"sourceRoot":""}