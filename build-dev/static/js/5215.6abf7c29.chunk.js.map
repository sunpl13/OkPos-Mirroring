{"version":3,"file":"static/js/5215.6abf7c29.chunk.js","mappings":"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","sources":["components/forms/downloadForm/MultiFileDownloadForm.js","components/forms/inputForm/ModalQuillEditor.js","components/forms/inputForm/ModalSelect.js","utils/columns/homePage/qna/Columns.js","components/Modal/homePage/QnA/QnADetail.js","pages/homePage/QnA/QnAList.js","utils/columns/homePage/qna/ColumnsSelectedValue.js"],"sourcesContent":["import {CCol, CFormInput, CFormLabel} from '@coreui/react'\nimport styled from 'styled-components'\nimport {antdImageFormat} from '../../../utils/awsCustom'\nimport React from 'react'\n\nconst MultiFileDownloadForm = ({id, files, label, isRequired}) => {\n  const downloadFile = (url, fileName) => {\n    url = antdImageFormat(url)\n\n    fetch(url, {method: 'GET'})\n      .then(res => {\n        return res.blob()\n      })\n      .then(blob => {\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = fileName\n        document.body.appendChild(a)\n        a.click()\n        setTimeout(_ => {\n          window.URL.revokeObjectURL(url)\n        }, 60000)\n        a.remove()\n      })\n      .catch(err => {\n        console.error('err: ', err)\n      })\n  }\n\n  //onClick={() => downloadFile(file, fileName)}\n\n  return (\n    <>\n      <CFormLabel htmlFor={`${id}Static`} className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol>\n        {files?.length > 0 ? (\n          files.map((file, index) => {\n            const splitUrl = file.split('/') //   \"/\" 로 전체 url 을 나눈다\n            const splitUrlLength = splitUrl.length\n            const fileName = splitUrl[splitUrlLength - 1] // 나누어진 배열의 맨 끝이 파일명이다\n            return (\n              <div key={index} className='col-form-label'>\n                <SpanStyle\n                  role='link'\n                  key={index}\n                  href={antdImageFormat(file)}\n                  onClick={() => downloadFile(file, fileName)}\n                >\n                  {index + 1}. {fileName}\n                </SpanStyle>\n              </div>\n            )\n          })\n        ) : (\n          <CFormInput type={'text'} id={id || ''} placeholder='등록된 파일이 없습니다.' disabled />\n        )}\n      </CCol>\n    </>\n  )\n}\nexport default MultiFileDownloadForm\n\nconst SpanStyle = styled.span`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding: 0 8px;\n  line-height: 1.5714285714285714;\n  flex: auto;\n  transition: all 0.3s;\n  color: #1677ff !important;\n  text-decoration: none;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n`\n","import React, {useMemo, useRef, useState} from 'react'\nimport ReactQuill from 'react-quill'\nimport 'react-quill/dist/quill.snow.css'\nimport {CCol, CFormLabel} from '@coreui/react'\nimport styled from 'styled-components'\n\nconst ModalQuillEditor = ({\n  id, // Tag ID\n  value, // useState\n  label, // Title\n  isRequired, // isRequired\n  readOnly = false,\n  setValue, // onChange function\n  maxLength, // 문자 길이 int ex) 400\n  editorHeight = 300,\n}) => {\n  const QuillRef = useRef()\n  const [textLengthCheck, setTextLengthCheck] = useState(false)\n\n  // 이미지를 업로드 하기 위한 함수\n  const imageHandler = () => {\n    // 파일을 업로드 하기 위한 input 태그 생성\n    const input = document.createElement('input')\n    const formData = new FormData()\n    let url = ''\n\n    input.setAttribute('type', 'file')\n    input.setAttribute('accept', 'image/*')\n    input.click()\n\n    // 파일이 input 태그에 담기면 실행 될 함수\n    input.onchange = async () => {\n      const file = input.files\n      if (file !== null) {\n        formData.append('image', file[0])\n        try {\n          const res = (url = res.data.url)\n          // 커서의 위치를 알고 해당 위치에 이미지 태그를 넣어주는 코드\n          // 해당 DOM의 데이터가 필요하기에 useRef를 사용.\n          const range = QuillRef.current?.getEditor().getSelection()?.index\n          if (range !== null && range !== undefined) {\n            let quill = QuillRef.current?.getEditor()\n\n            quill?.setSelection(range, 1)\n\n            quill?.clipboard.dangerouslyPasteHTML(range, `<img src=${url} alt=\"이미지 태그가 삽입됩니다.\" />`)\n          }\n\n          return {...res, success: true}\n        } catch (error) {\n          return {...error.response, success: false}\n        }\n      }\n    }\n  }\n\n  const modules = useMemo(() => {\n    return {\n      toolbar: {\n        container: [\n          ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n          ['blockquote'],\n          [{list: 'ordered'}, {list: 'bullet'}], // 리스트\n          [{script: 'sub'}, {script: 'super'}], // superscript/subscript\n          [{indent: '-1'}, {indent: '+1'}], // Text 좌우 이동\n          [{direction: 'rtl'}], // Text 좌우 끝으로 이동\n          [{header: [1, 2, 3, 4, 5, 6, false]}], // Text 제목 크기\n          [{color: []}, {background: []}], // Text 색상\n          [{font: []}], // Text 폰트\n          [{align: []}], // Text 정렬\n          ['clean'], // Text 설정 초기화\n          //['image', 'video'],\n        ],\n        //handlers: {\n        //           image: imageHandler,\n        //         },\n      },\n    }\n  }, [])\n\n  const handleEditorOnChange = item => {\n    if (maxLength) {\n      const textReplace = item?.replace(/<[^>]*>?| /g, '').length\n      if (maxLength >= textReplace) {\n        setValue(() => item)\n        setTextLengthCheck(false)\n      } else {\n        setTextLengthCheck(true)\n      }\n    } else if (!maxLength) {\n      setValue(() => item)\n    }\n  }\n\n  return (\n    <CCol style={{height: `${editorHeight}px`, marginBottom: '20px'}} className={'pb-5'}>\n      <CFormLabel htmlFor={`${id}Static`} className='col-form-label'>\n        <span className={isRequired && 'required'}>{label || ' * '}</span>\n        <MaxTextMsg className={'px-lg-2'} textLengthCheck={textLengthCheck}>\n          {maxLength ? `* ${maxLength}자 까지 입력 가능합니다.` : '  '}\n        </MaxTextMsg>\n      </CFormLabel>\n      <EditorStyle\n        id={id || ''}\n        ref={element => {\n          if (element !== null) {\n            QuillRef.current = element\n          }\n        }}\n        value={value}\n        defaultValue={value}\n        onChange={item => (!textLengthCheck ? handleEditorOnChange(item) : handleEditorOnChange(value))}\n        modules={modules}\n        readOnly={readOnly}\n        theme='snow'\n        placeholder='내용을 입력해주세요.'\n        style={{height: '100%'}}\n      />\n    </CCol>\n  )\n}\n\nexport default ModalQuillEditor\n\nconst EditorStyle = styled(ReactQuill)`\n  background-color: ${({readOnly}) => (readOnly ? '#d8dbe0' : 'transparent')};\n  border-radius: 0.375rem;\n  border: none;\n  padding-bottom: ${({readOnly}) => (readOnly ? '0' : '67px')};\n  .ql-container {\n    border-radius: ${({readOnly}) => (readOnly ? '0.375rem' : '0')};\n    border-bottom-left-radius: 0.375rem;\n    border-bottom-right-radius: 0.375rem;\n  }\n  .ql-editor {\n    border-radius: ${({readOnly}) => (readOnly ? '0.375rem' : '0')};\n  }\n  .ql-toolbar {\n    border-top-left-radius: 0.375rem;\n    border-top-right-radius: 0.375rem;\n    display: ${({readOnly}) => (readOnly ? 'none' : 'block')};\n  }\n`\nconst MaxTextMsg = styled.span`\n  font-size: 12px;\n  padding-left: 10px;\n  //color: ${({textLengthCheck}) => textLengthCheck && 'red'};\n`\n//border-top: ${({readOnly}) => (readOnly ? '1px solid #b1b7c1' : 'none')};\n","import {CCol, CFormSelect, CFormLabel} from '@coreui/react'\nimport * as PorpTypes from 'prop-types'\n\nconst ModalSelect = ({\n  onChange,\n  size,\n  placeholder,\n  label,\n  value,\n  readOnly,\n  id,\n  xs,\n  disabled = false,\n  isRequired,\n  options,\n}) => {\n  const newOptions = options.map(item => (\n    <option key={item.key} value={item.key}>\n      {item.value}\n    </option>\n  ))\n\n  return (\n    <>\n      <CFormLabel htmlFor='staticEmail' className='col-sm-2 col-form-label'>\n        <span className={isRequired ? 'required' : ''}>{label || ' * '}</span>\n      </CFormLabel>\n      <CCol xs={xs}>\n        <CFormSelect value={value} disabled={disabled} id={id} size={size} onChange={onChange} readOnly={readOnly}>\n          <option value=''>{placeholder}</option>\n          {newOptions}\n        </CFormSelect>\n      </CCol>\n    </>\n  )\n}\n\nModalSelect.propTypes = {\n  onChange: PorpTypes.func,\n  size: PorpTypes.string,\n  placeholder: PorpTypes.string,\n  label: PorpTypes.string,\n  value: PorpTypes.any,\n  readOnly: PorpTypes.bool,\n  id: PorpTypes.string,\n  disabled: PorpTypes.bool,\n  isRequired: PorpTypes.bool,\n  options: PorpTypes.any,\n}\n\nexport default ModalSelect\n","export const qnaColumns = [\n  {\n    key: 'no',\n    label: 'No',\n    _props: {color: 'primary', className: 'no'},\n    filter: false,\n  },\n  {\n    key: 'name',\n    label: '이름',\n    _props: {color: 'primary', className: 'name'},\n  },\n  {\n    key: 'email',\n    label: '이메일',\n    _props: {color: 'primary', className: 'email'},\n    sorter: false,\n  },\n  {\n    key: 'number',\n    label: '전화번호',\n    _props: {color: 'primary', className: 'number'},\n    sorter: false,\n  },\n  {\n    key: 'categoryKorean',\n    label: '문의 유형',\n    _props: {color: 'primary', className: 'categoryKorean'},\n  },\n  {\n    key: 'hasReply',\n    label: '답변 여부',\n    _props: {color: 'primary', className: 'hasReply'},\n    filter: false,\n  },\n]\n","import {CModal, CModalBody, CModalHeader, CModalTitle, CRow, CModalFooter, CButton} from '@coreui/react'\nimport ModalInput from '../../../forms/inputForm/ModalInput'\nimport PropTypes from 'prop-types'\nimport MultiFileDownloadForm from '../../../forms/downloadForm/MultiFileDownloadForm'\nimport ApiConfig, {HttpMethod} from '../../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../../dataManager/apiMapper'\nimport ModalQuillEditor from '../../../forms/inputForm/ModalQuillEditor'\nimport ModalSelect from '../../../forms/inputForm/ModalSelect'\nimport {useEffect, useState} from 'react'\n\nconst category = [\n  {key: 'PRODUCTS', value: '상품'},\n  {key: 'ADDITIONAL_SERVICES', value: '부가서비스'},\n  {key: 'RECRUITMENT', value: '채용'},\n  {key: 'PARTNERSHIPS', value: '제휴'},\n  {key: 'ETC', value: '기타'},\n]\n\nconst QnADetail = ({\n  getList,\n  reply,\n  setReply,\n  value,\n  visible,\n  setVisible,\n  onChange,\n  isReadOnly,\n  setIsReadOnly,\n  content,\n  setContent,\n}) => {\n  const [isReplyReanOnly, setIsReplyReanOnly] = useState(true)\n\n  const onDelete = async () => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          id: value.inquiryId,\n        },\n        method: HttpMethod.PATCH,\n        url: `${EndPoint.HOME_INQUIRY}/:id/d`,\n      })\n      if (data.isSuccess) {\n        getList()\n        setIsReadOnly(true)\n        setVisible(false)\n        alert(data.result)\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onCloseCheck = () => {\n    if (!isReplyReanOnly && value.No !== -1) {\n      if (window.confirm('정말 페이지에서 나가시겠습니까? \\n\\n 지금 페이지를 나가시면 변경사항이 저장되지 않습니다.')) {\n        onClose()\n      }\n    } else {\n      onClose()\n    }\n  }\n\n  const onClose = () => {\n    setVisible(false)\n    setIsReadOnly(true)\n    setIsReplyReanOnly(true)\n  }\n\n  const onDeleteConfilm = () => {\n    if (window.confirm('정말 삭제하시겠습니까?')) {\n      onDelete()\n    }\n  }\n\n  const onPostReply = async () => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {\n          content: reply,\n        },\n        query: {},\n        path: {\n          id: value.inquiryId,\n        },\n        method: HttpMethod.POST,\n        url: `${EndPoint.HOME_INQUIRY}/:id/replies`,\n      })\n      if (data.isSuccess) {\n        getList()\n        alert('답변이 정상적으로 등록 되었습니다.')\n        onClose()\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onUpdateReply = async () => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {\n          content: reply,\n        },\n        query: {},\n        path: {\n          id: value.inquiryId,\n          replyId: value.replyId,\n        },\n        method: HttpMethod.PATCH,\n        url: `${EndPoint.HOME_INQUIRY}/:id/replies/:replyId`,\n      })\n      if (data.isSuccess) {\n        getList()\n        alert(data.result)\n        onClose()\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const returnReplyBtn = () => {\n    if (value.hasReply) {\n      if (isReplyReanOnly) {\n        return (\n          <CButton color='primary' onClick={() => setIsReplyReanOnly(false)}>\n            답변 수정\n          </CButton>\n        )\n      } else {\n        return (\n          <CButton color='success' onClick={onUpdateReply}>\n            저장\n          </CButton>\n        )\n      }\n    } else {\n      if (isReplyReanOnly) {\n        return (\n          <CButton color='primary' onClick={() => setIsReplyReanOnly(false)}>\n            답변 달기\n          </CButton>\n        )\n      } else {\n        return (\n          <CButton color='success' onClick={onPostReply}>\n            등록\n          </CButton>\n        )\n      }\n    }\n  }\n  return (\n    <>\n      <CModal alignment='center' size='lg' visible={visible}>\n        <CModalHeader>\n          <CModalTitle>1:1 문의 상세</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow className='mb-3'>\n            <ModalInput\n              onChange={onChange}\n              id='inquiryId'\n              placeholder='No.'\n              label='ID'\n              readOnly={true}\n              disabled={true}\n              value={value.inquiryId === -1 ? '' : value.inquiryId}\n            />\n            <ModalInput\n              onChange={onChange}\n              id='name'\n              placeholder='이름을 입력해주세요'\n              label='이름'\n              value={value.name}\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n            />\n          </CRow>\n\n          <CRow className='mb-3'>\n            <ModalInput\n              onChange={onChange}\n              id='email'\n              placeholder='email'\n              label='이메일'\n              value={value.email}\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n            />\n            <ModalInput\n              onChange={onChange}\n              id='number'\n              placeholder='phone number'\n              label='전화번호'\n              value={value.number}\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n            />\n          </CRow>\n          <CRow className='mb-3'>\n            <ModalSelect\n              onChange={onChange}\n              size='sm'\n              options={category}\n              value={value.category ?? value.categoryEnglish}\n              id='category'\n              placeholder='선택해주세요'\n              readOnly={isReadOnly}\n              disabled={isReadOnly}\n              label='문의유형'\n            />\n          </CRow>\n          <CRow>\n            <ModalQuillEditor\n              id='content'\n              value={content}\n              isRequired={false}\n              readOnly={isReadOnly}\n              setValue={setContent}\n              label='문의 내용'\n            />\n          </CRow>\n          <CRow className='mb-3'>\n            <MultiFileDownloadForm files={value.fileUrl} id='fileUrl' label='첨부파일' />\n          </CRow>\n          <CRow>\n            <ModalQuillEditor\n              id='reply'\n              value={reply}\n              isRequired={true}\n              readOnly={isReplyReanOnly}\n              setValue={setReply}\n              label='문의 답변'\n            />\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          {returnReplyBtn()}\n          <CButton color='danger' onClick={onDeleteConfilm}>\n            삭제\n          </CButton>\n          <CButton color='secondary' onClick={onCloseCheck}>\n            취소\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nQnADetail.propTypes = {\n  value: PropTypes.any,\n  visible: PropTypes.bool,\n  setVisible: PropTypes.func,\n  onChange: PropTypes.func,\n  isReadOnly: PropTypes.bool,\n  setIsReadOnly: PropTypes.func,\n}\n\nexport default QnADetail\n","import {useState, useEffect} from 'react'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport {qnaColumns} from '../../../utils/columns/homePage/qna/Columns'\nimport {inquirys} from '../../../utils/columns/homePage/qna/ColumnsSelectedValue'\nimport QnADetail from '../../../components/Modal/homePage/QnA/QnADetail'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nconst QnAList = () => {\n  const [items, setItems] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(true)\n  const [content, setContent] = useState('') //quill용 state\n  const [reply, setReply] = useState('') //quill용 state\n  const [selectedItem, setSelectedItem] = useState({\n    inquiryId: -1,\n    content: '',\n    name: '',\n    email: '',\n    hasReply: false,\n    replyId: -1,\n    pNum: '',\n    inquiryType: '',\n    fileUrl: [],\n  })\n\n  const onLoadInquiryList = async () => {\n    try {\n      const data = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {},\n        method: HttpMethod.GET,\n        url: EndPoint.HOME_INQUIRY,\n      })\n      setItems(data?.data.result.responses)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  const onLoadDetail = async id => {\n    try {\n      const {data} = await ApiConfig.request({\n        data: {},\n        query: {},\n        path: {\n          id: id,\n        },\n        method: HttpMethod.GET,\n        url: `${EndPoint.HOME_INQUIRY}/:id`,\n      })\n      if (data.result.hasReply) {\n        const {reply, ...rest} = data.result\n        setSelectedItem({...rest, replyId: reply.replyId})\n        setReply(data.result.reply.content)\n      } else {\n        setReply('')\n        setSelectedItem({...data.result, replyId: -1})\n      }\n      setContent(data.result.content)\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  useEffect(() => {\n    onLoadInquiryList()\n  }, [])\n\n  const handleShowInquiryDetailModal = async item => {\n    onLoadDetail(item.inquiryId)\n    setShowModal(!showModal)\n  }\n\n  const handleInquiryDetailOnChange = ({target}) => {\n    const {id, value} = target\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n  return (\n    <main>\n      <PageHeader title='1:1 문의' />\n      <CRow>\n        <CCol xs={12}>\n          <CCard className='mb-4'>\n            <CCardBody>\n              <ListTemplate\n                items={items}\n                onClick={handleShowInquiryDetailModal}\n                selectedOptions={inquirys}\n                columns={qnaColumns}\n                className='inquiryList'\n                datePickerHidden={false}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <QnADetail\n        onChange={handleInquiryDetailOnChange}\n        visible={showModal}\n        value={selectedItem}\n        setVisible={setShowModal}\n        isReadOnly={isReadOnly}\n        setIsReadOnly={setIsReadOnly}\n        getList={onLoadInquiryList}\n        content={content}\n        setContent={setContent}\n        reply={reply}\n        setReply={setReply}\n      />\n    </main>\n  )\n}\n\nexport default QnAList\n","exports.inquirys = {\n  a: '제품',\n  b: '부가 서비스',\n  c: '채용 ',\n  d: '제휴',\n  e: '기타',\n}\n"],"names":["_ref","id","files","label","isRequired","_jsxs","_Fragment","children","_jsx","CFormLabel","htmlFor","concat","className","CCol","length","map","file","index","splitUrl","split","fileName","SpanStyle","role","href","antdImageFormat","onClick","downloadFile","url","fetch","method","then","res","blob","window","URL","createObjectURL","a","document","createElement","download","body","appendChild","click","setTimeout","_","revokeObjectURL","remove","catch","err","console","error","CFormInput","type","placeholder","disabled","styled","span","_templateObject","_taggedTemplateLiteral","value","readOnly","setValue","maxLength","editorHeight","QuillRef","useRef","textLengthCheck","setTextLengthCheck","useState","modules","useMemo","toolbar","container","list","script","indent","direction","header","color","background","font","align","handleEditorOnChange","item","textReplace","replace","style","height","marginBottom","MaxTextMsg","EditorStyle","ref","element","current","defaultValue","onChange","theme","ReactQuill","_ref2","_ref3","_ref4","_ref5","_ref6","_templateObject2","_ref7","size","xs","options","newOptions","key","CFormSelect","qnaColumns","_props","filter","sorter","category","_value$category","getList","reply","setReply","visible","setVisible","isReadOnly","setIsReadOnly","content","setContent","isReplyReanOnly","setIsReplyReanOnly","onClose","onPostReply","async","data","ApiConfig","request","query","path","inquiryId","HttpMethod","POST","EndPoint","HOME_INQUIRY","isSuccess","alert","onUpdateReply","replyId","PATCH","result","CModal","alignment","CModalHeader","CModalTitle","CModalBody","CRow","ModalInput","name","email","number","ModalSelect","categoryEnglish","ModalQuillEditor","MultiFileDownloadForm","fileUrl","CModalFooter","hasReply","CButton","onDeleteConfilm","confirm","onDelete","onCloseCheck","No","QnAList","items","setItems","showModal","setShowModal","selectedItem","setSelectedItem","pNum","inquiryType","onLoadInquiryList","GET","responses","useEffect","PageHeader","title","CCard","CCardBody","ListTemplate","rest","onLoadDetail","selectedOptions","inquirys","columns","datePickerHidden","QnADetail","target","exports","b","c","d","e"],"sourceRoot":""}