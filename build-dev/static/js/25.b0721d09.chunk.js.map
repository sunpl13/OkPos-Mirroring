{"version":3,"file":"static/js/25.b0721d09.chunk.js","mappings":"oVAuLA,UA7KsB,WACpB,OAA0BA,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAkCF,EAAAA,EAAAA,WAAS,GAAM,eAA1CG,EAAS,KAAEC,EAAY,KAC9B,GAAwCJ,EAAAA,EAAAA,WAAS,GAAM,eAAhDK,EAAY,KAAEC,EAAe,KACpC,GAAoCN,EAAAA,EAAAA,WAAS,GAAK,eAA3CO,EAAU,KAAEC,EAAa,KAChC,GAAwCR,EAAAA,EAAAA,UAAS,CAC/CS,UAAW,EACXC,MAAO,GACPC,OAAQ,KACR,eAJKC,EAAY,KAAEC,EAAe,KAKpC,GAAwBb,EAAAA,EAAAA,UAAS,CAC/BS,UAAW,EACXC,MAAO,GACPC,OAAQ,KACR,eAJKG,EAAI,KAAEC,EAAO,MAMpBC,EAAAA,EAAAA,YAAU,WACHb,GACHK,GAAc,EAElB,GAAG,CAACL,IAEJ,IAAMc,EAAc,yCAAG,mFACrBf,EAASgB,EAAAA,IAAgC,2CAC1C,kBAFmB,mCA2GpB,OACE,iCACE,SAAC,IAAU,CAACR,MAAM,2CAClB,SAAC,KAAI,WACH,SAAC,KAAI,CAACS,GAAI,GAAG,UACX,UAAC,KAAK,CAACC,UAAU,OAAM,WACrB,SAAC,KAAW,WACV,UAAC,KAAK,CAACA,UAAU,UAAS,WACxB,SAAC,KAAI,CAACD,GAAI,EAAE,UACV,SAAC,KAAO,CAACE,MAAM,UAAUC,QAASL,EAAe,yCAInD,SAAC,KAAI,CAACE,GAAI,EAAE,UACV,SAAC,KAAO,CAACE,MAAM,UAAUC,QAxGb,WAC1Bd,GAAc,GACdK,EAAgB,CACdJ,UAAW,EACXC,MAAO,GACPC,OAAQ,KAEVP,GAAcD,EAChB,EAgGsE,kCAM5D,SAAC,KAAS,WACR,SAAC,IAAY,CACXF,MAAOA,EACPqB,QA9HoB,SAAAR,GAChCD,EAAgBC,GAChBV,GAAcD,EAChB,EA4HcoB,QAASC,EAAAA,EACTJ,UAAW,uBAMrB,SAAC,IAAmB,CAClBE,QAhHgC,WACpCpB,EAAS,GAAD,eACHD,GAAK,YAEHa,MAGPC,EAAQ,CACNU,GAAI,EACJC,UAAW,GACXC,SAAU,KAEZrB,GAAiBD,EACnB,EAoGMuB,SAnIsB,SAAH,GAAkB,IAAbC,EAAM,EAANA,OACrBC,EAAaD,EAAbC,GAAIC,EAASF,EAATE,MACXlB,GAAgB,kBACXD,GAAY,cACdkB,EAAKC,IAEV,EA8HMC,QAAS7B,EACT4B,MAAOnB,EACPqB,WAAY7B,EACZG,WAAYA,EACZC,cAAeA,MAIvB,C","sources":["pages/homePage/rollingBanner/RollingBanner.js"],"sourcesContent":["import {useEffect, useState} from 'react'\nimport PageHeader from '../../../components/common/PageHeader'\nimport {CCard, CCardBody, CCardHeader, CCol, CForm, CButton, CRow} from '@coreui/react'\nimport ListTemplate from '../../../components/list/ListTemplate'\nimport {rollingBannerColumns} from '../../../utils/columns/homePage/rollingBanner/Columns'\nimport {testHomePageRollingBannerValues} from '../../test/testConstant'\nimport ApiConfig, {HttpMethod} from '../../../dataManager/apiConfig'\nimport {EndPoint} from '../../../dataManager/apiMapper'\nimport RollingBannerDetail from '../../../components/Modal/EnHomePage/rollingBanner/RollingBannerDetail'\n\nconst RollingBanner = () => {\n  const [items, setItems] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [showAddModal, setShowAddModal] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(true)\n  const [selectedItem, setSelectedItem] = useState({\n    bannerId: -1,\n    title: '',\n    imgUrl: '',\n  })\n  const [item, setItem] = useState({\n    bannerId: -1,\n    title: '',\n    imgUrl: '',\n  })\n\n  useEffect(() => {\n    if (!showModal) {\n      setIsReadOnly(true)\n    }\n  }, [showModal])\n\n  const handleTestList = async () => {\n    setItems(testHomePageRollingBannerValues)\n  }\n\n  const handleShowUserDetailModal = item => {\n    setSelectedItem(item)\n    setShowModal(!showModal)\n  }\n\n  const handlePopUpOnChange = ({target}) => {\n    const {id, value} = target\n    setSelectedItem({\n      ...selectedItem,\n      [id]: value,\n    })\n  }\n\n  const handlePopupAddModal = () => {\n    setIsReadOnly(false)\n    setSelectedItem({\n      bannerId: -1,\n      title: '',\n      imgUrl: '',\n    })\n    setShowModal(!showModal)\n  }\n\n  const handleUserItemAddModalOnClick = () => {\n    setItems([\n      ...items,\n      {\n        ...item,\n      },\n    ])\n    setItem({\n      No: 0,\n      popUpName: '',\n      popUpImg: '',\n    })\n    setShowAddModal(!showAddModal)\n  }\n\n  // const onLoadEmploymentList = async () => {\n  //   try {\n  //     const data = await ApiConfig.request({\n  //       data: {},\n  //       query: {},\n  //       path: {},\n  //       method: HttpMethod.GET,\n  //       url: EndPoint.RECRUITMENT,\n  //     })\n  //     setItems(data?.data.result)\n  //   } catch (error) {\n  //     alert(error)\n  //   }\n  // }\n\n  //가져오기 onLoad\n  //생성 onCreate\n  //수정 onUpdate\n  //삭제 onDelete\n  // const onLoadDetail = async id => {\n  //   try {\n  //     const {data} = await ApiConfig.request({\n  //       data: {},\n  //       query: {},\n  //       path: {\n  //         recruitmentId: id,\n  //       },\n  //       method: HttpMethod.GET,\n  //       url: `${EndPoint.RECRUITMENT}/:recruitmentId`,\n  //     })\n\n  //     setSelectedItem(data.result)\n  //   } catch (error) {\n  //     alert(error)\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   onLoadEmploymentList()\n  // }, [])\n\n  // const handleShowEmploymentDetailModal = async item => {\n  //   onLoadDetail(item.recruitmentId)\n  //   setShowModal(!showModal)\n  // }\n\n  // const handleEmploymentAddModal = () => {\n  //   setIsReadOnly(false)\n  //   setSelectedItem({\n  //     bannerId: -1,\n  //     title: '',\n  //     startedAt: '',\n  //     content: '',\n  //   })\n  //   setShowModal(!showModal)\n  // }\n\n  // const handleEmployDetailOnChange = ({target}) => {\n  //   const {id, value} = target\n\n  //   setSelectedItem({\n  //     ...selectedItem,\n  //     [id]: value,\n  //   })\n  // }\n  return (\n    <>\n      <PageHeader title='롤링배너 관리' />\n      <CRow>\n        <CCol xs={12}>\n          <CCard className='mb-4'>\n            <CCardHeader>\n              <CForm className='row g-3'>\n                <CCol xs={1}>\n                  <CButton color='primary' onClick={handleTestList}>\n                    조회하기\n                  </CButton>\n                </CCol>\n                <CCol xs={1}>\n                  <CButton color='primary' onClick={handlePopupAddModal}>\n                    추가\n                  </CButton>\n                </CCol>\n              </CForm>\n            </CCardHeader>\n            <CCardBody>\n              <ListTemplate\n                items={items}\n                onClick={handleShowUserDetailModal}\n                columns={rollingBannerColumns}\n                className={'userList'}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <RollingBannerDetail\n        onClick={handleUserItemAddModalOnClick}\n        onChange={handlePopUpOnChange}\n        visible={showModal}\n        value={selectedItem}\n        setVisible={setShowModal}\n        isReadOnly={isReadOnly}\n        setIsReadOnly={setIsReadOnly}\n      />\n    </>\n  )\n}\n\nexport default RollingBanner\n"],"names":["useState","items","setItems","showModal","setShowModal","showAddModal","setShowAddModal","isReadOnly","setIsReadOnly","bannerId","title","imgUrl","selectedItem","setSelectedItem","item","setItem","useEffect","handleTestList","testHomePageRollingBannerValues","xs","className","color","onClick","columns","rollingBannerColumns","No","popUpName","popUpImg","onChange","target","id","value","visible","setVisible"],"sourceRoot":""}